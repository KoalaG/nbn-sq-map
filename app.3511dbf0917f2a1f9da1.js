/*! For license information please see app.3511dbf0917f2a1f9da1.js.LICENSE.txt */
(()=>{"use strict";var e,t={196:(e,t,n)=>{const o=function(){function e(){}return e.prototype.fetchPage=function(e,t,n){return void 0===t&&(t=1),void 0===n&&(n=function(){return!0}),o=this,r=void 0,i=function(){var o,r,a,i;return function(e,t){var n,o,r,a,i={label:0,sent:function(){if(1&r[0])throw r[1];return r[1]},trys:[],ops:[]};return a={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(a[Symbol.iterator]=function(){return this}),a;function s(s){return function(l){return function(s){if(n)throw new TypeError("Generator is already executing.");for(;a&&(a=0,s[0]&&(i=0)),i;)try{if(n=1,o&&(r=2&s[0]?o.return:s[0]?o.throw||((r=o.return)&&r.call(o),0):o.next)&&!(r=r.call(o,s[1])).done)return r;switch(o=0,r&&(s=[2&s[0],r.value]),s[0]){case 0:case 1:r=s;break;case 4:return i.label++,{value:s[1],done:!1};case 5:i.label++,o=s[1],s=[0];continue;case 7:s=i.ops.pop(),i.trys.pop();continue;default:if(!((r=(r=i.trys).length>0&&r[r.length-1])||6!==s[0]&&2!==s[0])){i=0;continue}if(3===s[0]&&(!r||s[1]>r[0]&&s[1]<r[3])){i.label=s[1];break}if(6===s[0]&&i.label<r[1]){i.label=r[1],r=s;break}if(r&&i.label<r[2]){i.label=r[2],i.ops.push(s);break}r[2]&&i.ops.pop(),i.trys.pop();continue}s=t.call(e,i)}catch(e){s=[6,e],o=0}finally{n=r=0}if(5&s[0])throw s[1];return{value:s[0]?s[1]:void 0,done:!0}}([s,l])}}}(this,(function(s){switch(s.label){case 0:if(o=e.getNorth().toFixed(2),r=e.getEast().toFixed(2),a=e.getSouth().toFixed(2),i=e.getWest().toFixed(2),!n())throw new Error("Proceed function returned false. Stopping fetch.");return t=Math.max(1,Number(t)),"https://api.lip.net.au/nbn-bulk/map/".concat(o,"/").concat(r,"/").concat(a,"/").concat(i,"?page=").concat(t),[4,new Promise((function(e,n){fetch("https://api.lip.net.au/nbn-bulk/map/".concat(o,"/").concat(r,"/").concat(a,"/").concat(i,"?page=").concat(t),{method:"GET",redirect:"follow"}).then((function(e){return e.text()})).then((function(t){var n=JSON.parse(t);e(n.data)})).catch(n)}))];case 1:return[2,s.sent()]}}))},new((a=void 0)||(a=Promise))((function(e,t){function n(e){try{l(i.next(e))}catch(e){t(e)}}function s(e){try{l(i.throw(e))}catch(e){t(e)}}function l(t){var o;t.done?e(t.value):(o=t.value,o instanceof a?o:new a((function(e){e(o)}))).then(n,s)}l((i=i.apply(o,r||[])).next())}));var o,r,a,i},e}();n(623);var r=n(243),a=(n(664),n(687),n(634),n(817)),i=(n(732),n(256),function(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var o,r,a=n.call(e),i=[];try{for(;(void 0===t||t-- >0)&&!(o=a.next()).done;)i.push(o.value)}catch(e){r={error:e}}finally{try{o&&!o.done&&(n=a.return)&&n.call(a)}finally{if(r)throw r.error}}return i}),s=function(e,t,n){if(n||2===arguments.length)for(var o,r=0,a=t.length;r<a;r++)!o&&r in t||(o||(o=Array.prototype.slice.call(t,0,r)),o[r]=t[r]);return e.concat(o||Array.prototype.slice.call(t))},l=function(){function e(e){this.name=e}return e.prototype.sub=function(t){return new e("".concat(this.name,".").concat(t))},e.prototype.error=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];console.error.apply(console,s(["[".concat(this.name,"]")],i(e),!1))},e.prototype.warn=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];console.warn.apply(console,s(["[".concat(this.name,"]")],i(e),!1))},e.prototype.debug=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];c()&&console.debug.apply(console,s(["[".concat(this.name,"]")],i(e),!1))},e.prototype.info=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];console.info.apply(console,s(["[".concat(this.name,"]")],i(e),!1))},e.prototype.log=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];console.log.apply(console,s(["[".concat(this.name,"]")],i(e),!1))},e}();function c(){return window.location.href.includes("localhost")||window.location.href.includes("debug=true")}var u=function(e,t,n,o){return new(n||(n=Promise))((function(r,a){function i(e){try{l(o.next(e))}catch(e){a(e)}}function s(e){try{l(o.throw(e))}catch(e){a(e)}}function l(e){var t;e.done?r(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(i,s)}l((o=o.apply(e,t||[])).next())}))},p=function(e,t){var n,o,r,a,i={label:0,sent:function(){if(1&r[0])throw r[1];return r[1]},trys:[],ops:[]};return a={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(a[Symbol.iterator]=function(){return this}),a;function s(s){return function(l){return function(s){if(n)throw new TypeError("Generator is already executing.");for(;a&&(a=0,s[0]&&(i=0)),i;)try{if(n=1,o&&(r=2&s[0]?o.return:s[0]?o.throw||((r=o.return)&&r.call(o),0):o.next)&&!(r=r.call(o,s[1])).done)return r;switch(o=0,r&&(s=[2&s[0],r.value]),s[0]){case 0:case 1:r=s;break;case 4:return i.label++,{value:s[1],done:!1};case 5:i.label++,o=s[1],s=[0];continue;case 7:s=i.ops.pop(),i.trys.pop();continue;default:if(!((r=(r=i.trys).length>0&&r[r.length-1])||6!==s[0]&&2!==s[0])){i=0;continue}if(3===s[0]&&(!r||s[1]>r[0]&&s[1]<r[3])){i.label=s[1];break}if(6===s[0]&&i.label<r[1]){i.label=r[1],r=s;break}if(r&&i.label<r[2]){i.label=r[2],i.ops.push(s);break}r[2]&&i.ops.pop(),i.trys.pop();continue}s=t.call(e,i)}catch(e){s=[6,e],o=0}finally{n=r=0}if(5&s[0])throw s[1];return{value:s[0]?s[1]:void 0,done:!0}}([s,l])}}},d=function(){function e(e,t,n){this.logger=new l("MarkerLayerCluster"),this.pointMap=new Map,this.map=e,this.placeStore=n,this.modeHandler=t,this.markers=new r.MarkerClusterGroup({maxClusterRadius:this.markerClusterRadius,spiderfyOnMaxZoom:!1,disableClusteringAtZoom:18,showCoverageOnHover:!0,zoomToBoundsOnClick:!0,removeOutsideVisibleBounds:!0,iconCreateFunction:this.iconCreateFunction,chunkedLoading:!0,chunkInterval:150,chunkDelay:150,chunkProgress:function(e,t,n){console.log("chunkProgress",{processed:e,total:t,elapsed:n})}}),this.markers.addTo(this.map),this.map.on("zoomend",(function(e){console.log("zoomend",e.target.getZoom())}))}return e.prototype.addPoints=function(e){var t=this,n=this.logger.sub("addPoints"),o=[];e.forEach((function(e){var n=e.lat+","+e.lng,r=t.pointMap.get(n);if(r)r.point=e;else{var a=t.renderPoint(e);o.push(a),t.pointMap.set(n,{layer:a,point:e})}})),n.debug("Adding new layers",o.length),o.length&&this.markers.addLayers(o)},e.prototype.removeAllPoints=function(){this.logger.sub("removeAllPoints").debug("Removing all points",this.pointMap),this.markers.clearLayers(),this.pointMap.clear(),this.logger.sub("removeAllPoints").debug("Removed all points",this.pointMap)},e.prototype.removeAllMarkers=function(){return u(this,void 0,void 0,(function(){return p(this,(function(e){return this.removeAllPoints(),[2]}))}))},e.prototype.markerClusterRadius=function(e){switch(e){case 0:case 1:case 2:case 3:case 4:case 5:case 6:case 7:case 8:case 9:case 10:case 11:case 12:case 13:return 150;case 14:return 100;default:return 0}},e.prototype.updatePointStyle=function(e,t){t.setStyle({fillColor:this.modeHandler.placeColour(e[0])}),t.setTooltipContent(this.modeHandler.renderTooltip(e)),t.redraw()},e.prototype.setModeHandler=function(e,t){return this.modeHandler=e,this},e.prototype.DEP_refreshMarkersInsideBounds=function(e,t){return u(this,void 0,void 0,(function(){return p(this,(function(e){return[2]}))}))},e.prototype.removeMarkersOutsideBounds=function(e){return u(this,void 0,void 0,(function(){return p(this,(function(e){return[2]}))}))},e.prototype.renderPoint=function(e){var t=this,n=r.circleMarker([e.lat,e.lng],{radius:5,fillColor:e.col?e.col[0]:void 0,color:"#000000",weight:1,opacity:1,fillOpacity:.8});return n.bindPopup((function(n){t.placeStore.getPlaces(e.ids).then((function(e){var o=t.renderPopup(e);n.setPopupContent(o)}));var o=document.createElement("div");return o.innerHTML='<div class="loading">Loading...</div>',o}),{autoPan:!0,autoClose:!1}),n.bindTooltip((function(t){var n=e.add[0];return e.add.length>1&&(n+=" ( + "+(e.add.length-1)+" more)"),n}),{}),n},e.prototype.renderPopup=function(e){return 1==e.length?this.modeHandler.renderPopupContent(e[0]):this.rendorPopupMulti(e)},e.prototype.rendorPopupMulti=function(e){var t,n,o=document.createElement("div"),r=[];e.sort((function(e,t){return e.address1<t.address1?-1:e.address1>t.address1?1:0}));var a=function(e){var t=document.createElement("div"),n=i.modeHandler.placeColour(e),a=document.createElement("button");a.classList.add("accordion"),a.type="button",a.innerHTML='<svg height="15" width="15" style="margin-right:3px">'+'<circle class="circle" cx="7.5" cy="9" r="5" stroke="#000" stroke-width="1" fill="'.concat(n,'" />')+"</svg>"+"<span>".concat(e.address1,"</span>");var s=document.createElement("div");s.classList.add("panel"),s.appendChild(i.modeHandler.renderPopupContent(e)),a.addEventListener("click",(function(){var e=t.classList.contains("active");r.forEach((function(e){e.classList.remove("active")})),e||t.classList.add("active")})),t.appendChild(a),t.appendChild(s),o.appendChild(t),r.push(t)},i=this;try{for(var s=function(e){var t="function"==typeof Symbol&&Symbol.iterator,n=t&&e[t],o=0;if(n)return n.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&o>=e.length&&(e=void 0),{value:e&&e[o++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")}(e),l=s.next();!l.done;l=s.next())a(l.value)}catch(e){t={error:e}}finally{try{l&&!l.done&&(n=s.return)&&n.call(s)}finally{if(t)throw t.error}}return o},e.prototype.iconCreateFunction=function(e){var t=e.getAllChildMarkers().map((function(e){return e.options.fillColor})),n={};t.forEach((function(e){n[e]||(n[e]=0),n[e]++}));var o=Object.keys(n).sort((function(e,t){return n[t]-n[e]})),a="background: conic-gradient(",i=0;o.forEach((function(e,o){0==o&&(a+="\n"+e+" 0%");var r=n[e]/t.length*100;a+=", \n"+e+" "+i+"%",a+=", \n"+e+" "+(i+r)+"%",i+=r})),a+="\n);";var s=Math.random().toString(36).substring(7);return r.divIcon({html:"<style>#cluster_".concat(s,"::before { ").concat(a," }</style> <div id='cluster_").concat(s,"'><span>")+e.getChildCount()+"</span></div>",className:"marker-cluster"})},e}();const h=d;var f=function(){return f=Object.assign||function(e){for(var t,n=1,o=arguments.length;n<o;n++)for(var r in t=arguments[n])Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r]);return e},f.apply(this,arguments)},g=function(e,t,n,o){return new(n||(n=Promise))((function(r,a){function i(e){try{l(o.next(e))}catch(e){a(e)}}function s(e){try{l(o.throw(e))}catch(e){a(e)}}function l(e){var t;e.done?r(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(i,s)}l((o=o.apply(e,t||[])).next())}))},m=function(e,t){var n,o,r,a,i={label:0,sent:function(){if(1&r[0])throw r[1];return r[1]},trys:[],ops:[]};return a={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(a[Symbol.iterator]=function(){return this}),a;function s(s){return function(l){return function(s){if(n)throw new TypeError("Generator is already executing.");for(;a&&(a=0,s[0]&&(i=0)),i;)try{if(n=1,o&&(r=2&s[0]?o.return:s[0]?o.throw||((r=o.return)&&r.call(o),0):o.next)&&!(r=r.call(o,s[1])).done)return r;switch(o=0,r&&(s=[2&s[0],r.value]),s[0]){case 0:case 1:r=s;break;case 4:return i.label++,{value:s[1],done:!1};case 5:i.label++,o=s[1],s=[0];continue;case 7:s=i.ops.pop(),i.trys.pop();continue;default:if(!((r=(r=i.trys).length>0&&r[r.length-1])||6!==s[0]&&2!==s[0])){i=0;continue}if(3===s[0]&&(!r||s[1]>r[0]&&s[1]<r[3])){i.label=s[1];break}if(6===s[0]&&i.label<r[1]){i.label=r[1],r=s;break}if(r&&i.label<r[2]){i.label=r[2],i.ops.push(s);break}r[2]&&i.ops.pop(),i.trys.pop();continue}s=t.call(e,i)}catch(e){s=[6,e],o=0}finally{n=r=0}if(5&s[0])throw s[1];return{value:s[0]?s[1]:void 0,done:!0}}([s,l])}}},v=function(){function e(t){var n=this;this.MAX_UNFETCHED_BOXES=100,this.logger=new l("NbnTechMap"),this.initialViewSet=!1,this.fetchedBoxes=new Set,this.progressControl=new r.Control({position:"bottomleft"}),this.progressItems={},this.controls={},t=f(f({},e.DEFAULT_OPTIONS),t),this.api=t.api,this.placeStore=t.placestore,this.modeHandler=t.defaultModeHandler,this.map=r.map(t.mapContainerId,{preferCanvas:!0}),this.markerLayer=new h(this.map,this.modeHandler,this.placeStore),this.mapTileLayer=r.tileLayer("https://{s}.basemaps.cartocdn.com/rastertiles/voyager/{z}/{x}/{y}{r}.png",{attribution:'&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors &copy; <a href="https://carto.com/attributions">CARTO</a>',subdomains:"abcd",crossOrigin:!0,minZoom:5,maxZoom:20}),this.mapTileLayer.addTo(this.map),console.log({L:r,Geocoder:a.Ms,geocoder:a.yK});var o=new a.d2.ArcGis({apiKey:"AAPKa97b8a5374db4fa9b0fdd8e55361cba4Z9fEuw3ckAOIFHK1CP_VbzTv3OTeUz3ggrFAzVPzjyn3Q7bQFzbwkDMvDxaJ-JzG",geocodingQueryParams:{countryCode:"AU",category:"Address,LatLong,Neighborhood,District,City,Metro Area"}});this.mapSearch=r.Control.geocoder({position:"topleft",collapsed:!0,defaultMarkGeocode:!1,geocoder:o,suggestMinLength:5,suggestTimeout:1e3}),this.mapSearch.on("markgeocode",(function(e){var t=e.geocode.bbox;n.map.fitBounds(t,{maxZoom:16})})),this.mapSearch.addTo(this.map),this.mapLocate=r.control.locate({position:"topleft",locateOptions:{maxZoom:16},setView:"untilPan",keepCurrentZoomLevel:!0,initialZoomLevel:17,cacheLocation:!0}),this.mapLocate.addTo(this.map),this.map.on("locateactivate",(function(){localStorage.setItem("geolocate","1")})),this.map.on("locatedeactivate",(function(){localStorage.removeItem("geolocate")})),this.setInitialMapView(),this.map.on("moveend",(function(){return g(n,void 0,void 0,(function(){var e,t;return m(this,(function(n){return e=this.map.getCenter(),t=this.map.getZoom(),localStorage.setItem("startpos",JSON.stringify({lat:e.lat,lng:e.lng,zoom:t})),this.pushBrowserHistory(),o.options.geocodingQueryParams&&(o.options.geocodingQueryParams.location="".concat(e.lng,",").concat(e.lat)),this.fetchDataForCurrentView(),[2]}))}))})),this.fetchDataForCurrentView(),window.addEventListener("popstate",(function(){var e=new URLSearchParams(window.location.search),t=e.get("lat"),o=e.get("lng"),r=e.get("zoom");t&&o&&r&&(n.map.setView([Number(t),Number(o)],parseInt(r)),n.initialViewSet=!0)}))}return e.prototype.pushBrowserHistory=function(){var e=this.map.getCenter(),t=this.map.getZoom(),n=new URLSearchParams(window.location.search);n.set("lat",e.lat.toString()),n.set("lng",e.lng.toString()),n.set("zoom",t.toString());var o=window.location.pathname+"?"+n.toString();window.history.pushState({},"",o)},e.prototype.getStartPos=function(){var e=localStorage.getItem("startpos");if(!e)return null;try{return JSON.parse(e)}catch(e){return null}},e.prototype.setInitialMapView=function(){var e=this.logger.sub("setInitialMapView");if(this.initialViewSet)e.warn("Initial map view already set");else{var t=new URLSearchParams(window.location.search),n=t.get("lat"),o=t.get("lng"),r=t.get("zoom");if(n&&o&&r)return this.map.setView([Number(n),Number(o)],parseInt(r)),void(this.initialViewSet=!0);var a=localStorage.getItem("geolocate"),i=this.getStartPos();i&&(this.map.setView([i.lat,i.lng],i.zoom),this.initialViewSet=!0),i||(this.map.setView([-26.1772288,133.4170119],10),this.initialViewSet=!0),!a&&i||(this.mapLocate.start(),this.map.setZoom(17),this.initialViewSet=!0),this.initialViewSet||e.error("Could not set initial map view")}},e.prototype.getBoxesInBounds=function(e){for(var t=Math.ceil(50*e.getNorth())/50,n=Math.floor(25*e.getWest())/25,o=[],a=t;a>e.getSouth();a-=.02)for(var i=n;i<e.getEast();i+=.04)o.push([a,i]);return o.map((function(e){var t=e[0],n=e[1],o=t-.02,a=n+.04;return r.latLngBounds([o,n],[t,a])}))},e.prototype.getCurrentViewBoxes=function(){return this.getBoxesInBounds(this.map.getBounds())},e.prototype.hideMarkersOutsideCurrentView=function(){var e=this.map.getBounds().pad(.5);this.markerLayer.removeMarkersOutsideBounds(e)},e.prototype.DEP_displayMarkersInCurrentView=function(e){return void 0===e&&(e=1),g(this,void 0,void 0,(function(){return m(this,(function(e){return[2]}))}))},e.prototype.showZoomInWarning=function(){var e=this;this.zoomInWarningControl||(this.zoomInWarningControl=new r.Control({position:"topright"}),this.zoomInWarningControl.onAdd=function(){var e=r.DomUtil.create("div","info legend");return e.innerHTML='<h4 style="margin:0">Area Too Big!</h4>',e.innerHTML+='<p style="margin:0">Location loading is paused until you zoom in.</p>',e.style.backgroundColor="#ff9800",e.style.opacity="0.8",e.style.padding="10px 20px",e.style.color="#ffffff",e});var t=this.zoomInWarningControl;setTimeout((function(){return e.map.addControl(t)}),1e3)},e.prototype.hideZoomInWarning=function(){this.zoomInWarningControl&&this.map.removeControl(this.zoomInWarningControl)},e.prototype.fetchDataForCurrentView=function(){return g(this,void 0,void 0,(function(){var e,t,n,o,r,a,i,s,l,c,u,p,d=this;return m(this,(function(h){switch(h.label){case 0:if(e=this.logger.sub("fetchDataForCurrentView"),this.map.getZoom()<11)return e.warn("Zoom level too low. Skipping."),this.showZoomInWarning(),[2];if(t=this.getCurrentViewBoxes(),e.debug("Current view boxes",t),n=t.filter((function(e){return!d.fetchedBoxes.has(e.getCenter().toString())})),0==n.length)return this.hideZoomInWarning(),[2];if(n.length>this.MAX_UNFETCHED_BOXES)return e.warn("Too many boxes to fetch. Skipping."),this.showZoomInWarning(),[2];this.hideZoomInWarning(),o=this.map.getCenter().toString()+this.map.getZoom(),r=this.createProgress(o,n.length,"Fetching sections..."),this.renderProgress(),a=0,h.label=1;case 1:h.trys.push([1,6,7,8]),i=function(e){var t="function"==typeof Symbol&&Symbol.iterator,n=t&&e[t],o=0;if(n)return n.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&o>=e.length&&(e=void 0),{value:e&&e[o++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")}(n),s=i.next(),h.label=2;case 2:return s.done?[3,5]:(l=s.value,this.map.getCenter().toString()+this.map.getZoom()!=o?(e.debug("Map moved. Fetch stopped."),r.text="Map moved. Fetch stopped.",this.updateProgress(o,a,!0),[2]):[4,this.fetchData(l)]);case 3:h.sent(),this.fetchedBoxes.add(l.getCenter().toString()),a++,this.updateProgress(o,a,!1),h.label=4;case 4:return s=i.next(),[3,2];case 5:return[3,8];case 6:return c=h.sent(),u={error:c},[3,8];case 7:try{s&&!s.done&&(p=i.return)&&p.call(i)}finally{if(u)throw u.error}return[7];case 8:return this.updateProgress(o,a,!0),e.debug("All boxes fetched"),[2]}}))}))},e.prototype.createProgress=function(e,t,n){return this.progressItems[e]={started:new Date,finished:void 0,complete:!1,progress:0,total:t,text:n},this.progressItems[e]},e.prototype.updateProgress=function(e,t,n){if(!this.progressItems[e])throw new Error("Progress item with key ".concat(e," does not exist"));this.progressItems[e].finished=n?new Date:void 0,this.progressItems[e].complete=n,this.progressItems[e].progress=t,this.renderProgress()},e.prototype.renderProgress=function(){for(var e=this,t=new Date,n=Object.keys(this.progressItems),o=0;o<n.length;o++){var a=n[o];if(this.progressItems[a]){var i=this.progressItems[a].finished;i&&t.getTime()-i.getTime()>5e3&&delete this.progressItems[a]}}0!=Object.keys(this.progressItems).length?(this.progressControl.onAdd=function(){var t=r.DomUtil.create("div","info legend");t.innerHTML='<h4 style="margin:0">Loading...</h4>';for(var n=Object.values(e.progressItems),o=0;o<n.length;o++){var a=n[o];if(!(a.finished&&(new Date).getTime()-a.finished.getTime()>1e4)){var i=a.progress/a.total*100,s=a.complete?"Complete":"".concat(a.progress," of ").concat(a.total);t.innerHTML+='<p style="margin:0">'.concat(a.text," (").concat(s,")</p>"),t.innerHTML+='<progress value="'.concat(i,'" max="100"></progress>')}}return t.style.backgroundColor="#000000",t.style.opacity="0.8",t.style.padding="10px 20px",t.style.color="#ffffff",t},this.map.addControl(this.progressControl),setTimeout((function(){Object.values(e.progressItems).every((function(e){return e.complete}))&&e.hideProgress()}),5e3)):this.hideProgress()},e.prototype.hideProgress=function(){this.map.removeControl(this.progressControl)},e.prototype.fetchData=function(e,t){return void 0===t&&(t=1),g(this,void 0,void 0,(function(){var n,o,r=this;return m(this,(function(a){switch(a.label){case 0:this.logger.sub("fetchData").debug("Fetching Box",e.getCenter().toString(),t),a.label=1;case 1:return a.trys.push([1,5,,6]),[4,this.api.fetchPage(e,t,(function(){return r.map.getBounds().intersects(e)}))];case 2:return n=a.sent(),this.processFetchResult(n,e),n.next?[4,this.fetchData(e,n.next)]:[3,4];case 3:return[2,a.sent()];case 4:return[2];case 5:return"Page already loaded this session."==(o=a.sent()).message?[2]:(console.error(o),[3,6]);case 6:return[2]}}))}))},e.prototype.processFetchResult=function(e,t){var n=this.logger.sub("processFetchResult");n.debug("Processing Fetch Result",e,t),this.placeStore.storePlaces(e.places);for(var o=new Map,r=0;r<e.places.length;r++){var a=e.places[r];if(this.modeHandler.filter(a)){var i="".concat(a.latitude,",").concat(a.longitude),s=this.modeHandler.placeColour(a),l=o.get(i);l?l.ids.includes(a.locid)||(l.ids.push(a.locid),l.add.push(a.address1),l.col.push(s)):o.set(i,{lat:a.latitude,lng:a.longitude,col:[s],add:[a.address1],ids:[a.locid]})}}n.debug("Adding points to marker layer",o),this.markerLayer.addPoints(o)},e.prototype.DEPR_refreshPointsFromStore=function(e){return g(this,void 0,void 0,(function(){return m(this,(function(t){if(!this.markerLayer)throw new Error("Marker Layer not set");return e||(console.log("Bounds not passed. Using map bounds."),e=this.map.getBounds()),e=function(e){var t=Math.ceil(50*e.getNorth())/50,n=Math.floor(25*e.getWest())/25,o=Math.floor(50*e.getSouth())/50,a=Math.ceil(25*e.getEast())/25;return r.latLngBounds([o,n],[t,a])}(e),[2]}))}))},e.prototype.addControl=function(e,t){if(this.controls[e])throw new Error("Control with key ".concat(e," already exists"));this.controls[e]=t,this.map.addControl(t.getControl()),console.log("Added control",e)},e.prototype.setModeHandler=function(e){var t,n;this.modeHandler=e,null===(t=this.markerLayer)||void 0===t||t.removeAllMarkers(),console.log("Current Fetched Boxes",this.fetchedBoxes),this.fetchedBoxes.clear(),console.log("Fetched Boxes Cleared",this.fetchedBoxes),null===(n=this.markerLayer)||void 0===n||n.setModeHandler(e,this.placeStore),this.fetchDataForCurrentView()},e.DEFAULT_OPTIONS={mapContainerId:"map"},e}();const y=v,b=function(){function e(){this.eventHandlers={},this.control=new r.Control}return e.prototype.on=function(e,t){this.eventHandlers[e]||(this.eventHandlers[e]=[]),this.eventHandlers[e].push(t)},e.prototype.emit=function(e,t){var n=this;console.debug("Emitting event: ".concat(e),{data:t,handlers:this.eventHandlers[e]}),this.eventHandlers[e]&&this.eventHandlers[e].forEach((function(o){return o({name:e,state:n.getState(),data:t})}))},e.prototype.getControl=function(){return this.control},e}();var w,C=(w=function(e,t){return w=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])},w(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function n(){this.constructor=e}w(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});const T=function(e){function t(){var t=e.call(this)||this;return t.displayMode="all",t.elControlDiv=document.createElement("div"),t.elDropdown=document.createElement("select"),t.allLabel=null,t.allRadio=null,t.allText=null,t.upgradeLabel=null,t.upgradeRadio=null,t.upgradeText=null,t.eeLabel=null,t.eeRadio=null,t.eeText=null,t.generateControlDiv(),t.control.onAdd=function(e){return t.generateDropdown(),t.elControlDiv},t}return C(t,e),t.prototype.getState=function(){return this.displayMode},t.prototype.changeMode=function(e){this.displayMode=e,this.emit("change",e)},t.prototype.generateControlDiv=function(){this.elControlDiv&&console.warn("ControlDiv already exists"),this.elControlDiv.classList.add("info","legend"),this.elControlDiv.style.backgroundColor="#ffffff",this.elControlDiv.style.opacity="0.8",this.elControlDiv.style.padding="5px",this.elControlDiv.style.borderRadius="5px"},t.prototype.generateDropdown=function(){var e=this;this.elDropdown&&console.warn("Dropdown already exists");var t=this.elDropdown;t.classList.add("control-select");var n=document.createElement("option");n.value="all",n.innerText="Show All Locations",t.appendChild(n);var o=document.createElement("option");o.value="upgrade",o.innerText="Tech Upgrades",t.appendChild(o),t.addEventListener("change",(function(t){return e.changeMode(t.target.value)})),this.elDropdown=t,this.elControlDiv.appendChild(t)},t}(b);var S="#1D7044",x="#75AD6F",P="#C8E3C5",M="#FFBE00",E="#FF7E01",L="#E3071D",k="#02B9E3",D="#022BE3",F="#6B02E3",H="#888888";function I(e){switch(e){case"FTTP":return S;case"FTTC":return E;case"FTTN":case"FTTB":return L;case"HFC":return M;case"WIRELESS":return k;case"SATELLITE":return F}return H}const O=function(){function e(){}return e.prototype.filter=function(e){return!0},e.prototype.pointColour=function(e){return this.placeColour(e.places[0])},e.prototype.placeColour=function(e){return function(e){return"FTTP"===e.techType}(e)?S:function(e){return!(!e.altReasonCode||!e.altReasonCode.match(/^FTTP/)||"Eligible To Order"!==e.techChangeStatus)}(e)?x:function(e){if(e.altReasonCode&&e.altReasonCode.match(/^FTTP/))switch(e.techChangeStatus){case"In Design":case"Build Finalised":case"Planned":case"MDU Complex Eligible To Apply":case"MDU Complex Premises In Build":return!0}return!1}(e)?P:function(e){if(e.altReasonCode&&e.altReasonCode.match(/^FTTP/)&&"Committed"===e.techChangeStatus)return!0}(e)?I(e.techType):function(e){return!("FTTC"!=e.techType||!e.reasonCode||!e.reasonCode.match(/^FTTC/)||"New Tech Connected"!=e.techChangeStatus)}(e)?E:function(e){return"FTTC"==e.techType&&"FTTC_SA"==e.reasonCode&&"FW_CT"==e.altReasonCode&&"Eligible To Order"==e.techChangeStatus}(e)?"#FF7E01":function(e){return"FTTN"==e.techType&&"FTTN_SA"==e.reasonCode&&"FW_CT"==e.altReasonCode&&"Eligible To Order"==e.techChangeStatus}(e)?L:function(e){return"WIRELESS"==e.techType&&"FW_SA"==e.reasonCode&&"Eligible To Order"==e.techChangeStatus}(e)?D:(e.altReasonCode&&"NULL_NA"!=e.altReasonCode&&console.log(e),I(e.techType))},e.prototype.renderPopupContent=function(e){var t=r.DomUtil.create("div");if(t.innerHTML="<b>"+e.locid+"</b></br>"+e.address1+"</br>"+e.address2+"</br><br />",t.innerHTML+="<b>Technology Plan</b></br>","FTTP"!=e.techType&&e.altReasonCode&&"NULL_NA"!=e.altReasonCode?(e.altReasonCode&&e.altReasonCode.match(/^FTTP/),t.innerHTML+="Current: "+e.techType+"<br />",t.innerHTML+="Change: "+e.altReasonCode+"<br />",t.innerHTML+="Status: "+e.techChangeStatus+"<br />",t.innerHTML+="Program: "+e.programType+"<br />",t.innerHTML+="Target Qtr: "+e.targetEligibilityQuarter+"<br />"):(t.innerHTML+="Technology: "+e.techType+"<br />","FTTP"!=e.techType&&(t.innerHTML+="No tech upgrade planned<br />")),t.innerHTML+="<br />",e.ee&&(t.innerHTML+="<b>Enterprise Ethernet</b></br>",t.innerHTML+="Price Zone: "+(e.cbdpricing?"CBD":"Zone 1/2/3")+"<br />",t.innerHTML+="Build Cost: "+(e.zeroBuildCost?"$0":"POA")+"<br />",t.innerHTML+="<br />"),c()){var n=r.DomUtil.create("hr"),o=r.DomUtil.create("pre");o.innerHTML=JSON.stringify(e,null,2),t.appendChild(n),t.appendChild(o)}return t},e.prototype.renderTooltip=function(e){var t=e[0].address1;return e.length>1&&(t+=" ( + "+(e.length-1)+" more)"),t},e.prototype.getLegendItems=function(){return[{label:"FTTP",colour:S},{label:"FTTP Upgrade",colour:x},{label:"FTTP Upgrade Soon",colour:P},{label:"HFC",colour:M},{label:"FTTC",colour:E},{label:"FTTN/FTTB",colour:L},{label:"FW",colour:k},{label:"FW Upgrade",colour:D},{label:"Satellite",colour:F},{label:"Unknown",colour:H}]},e}();var B=function(){var e=function(t,n){return e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])},e(t,n)};return function(t,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function o(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}();const A=function(e){function t(){var t=e.call(this)||this;return t.elControlDiv=document.createElement("div"),t.control.setPosition("bottomright"),t.elControlDiv.classList.add("info","legend"),t.elControlDiv.style.backgroundColor="#ffffff",t.elControlDiv.style.opacity="0.8",t.elControlDiv.style.padding="5px",t.elControlDiv.style.borderRadius="5px",t.control.onAdd=function(e){return t.elControlDiv},t}return B(t,e),t.prototype.getState=function(){},t.prototype.updateLegend=function(e){var t="";e.forEach((function(e){t+='<svg height="10" width="10"><circle cx="5" cy="5" r="5" fill="'+e.colour+'" stroke="#000000" stroke-width="1" opacity="1" fill-opacity="0.8" /></svg> '+e.label,e.count&&(t+=" ("+e.count+")"),t+="<br>"})),this.elControlDiv.innerHTML=t},t}(b);n.p,n.p,n.p;var R=n(269),U=function(e,t,n,o){return new(n||(n=Promise))((function(r,a){function i(e){try{l(o.next(e))}catch(e){a(e)}}function s(e){try{l(o.throw(e))}catch(e){a(e)}}function l(e){var t;e.done?r(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(i,s)}l((o=o.apply(e,t||[])).next())}))},N=function(e,t){var n,o,r,a,i={label:0,sent:function(){if(1&r[0])throw r[1];return r[1]},trys:[],ops:[]};return a={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(a[Symbol.iterator]=function(){return this}),a;function s(s){return function(l){return function(s){if(n)throw new TypeError("Generator is already executing.");for(;a&&(a=0,s[0]&&(i=0)),i;)try{if(n=1,o&&(r=2&s[0]?o.return:s[0]?o.throw||((r=o.return)&&r.call(o),0):o.next)&&!(r=r.call(o,s[1])).done)return r;switch(o=0,r&&(s=[2&s[0],r.value]),s[0]){case 0:case 1:r=s;break;case 4:return i.label++,{value:s[1],done:!1};case 5:i.label++,o=s[1],s=[0];continue;case 7:s=i.ops.pop(),i.trys.pop();continue;default:if(!((r=(r=i.trys).length>0&&r[r.length-1])||6!==s[0]&&2!==s[0])){i=0;continue}if(3===s[0]&&(!r||s[1]>r[0]&&s[1]<r[3])){i.label=s[1];break}if(6===s[0]&&i.label<r[1]){i.label=r[1],r=s;break}if(r&&i.label<r[2]){i.label=r[2],i.ops.push(s);break}r[2]&&i.ops.pop(),i.trys.pop();continue}s=t.call(e,i)}catch(e){s=[6,e],o=0}finally{n=r=0}if(5&s[0])throw s[1];return{value:s[0]?s[1]:void 0,done:!0}}([s,l])}}},_=function(){function e(){var e=this;this.DB_NAME="nsm-placestore",this.logger=new l("IndexDBPlaceStore"),this.logger.info("Setting up database..."),(0,R.X3)(this.DB_NAME,1,{upgrade:function(e,t,n,o,r){e.objectStoreNames.contains("nbnPlaceStore")||e.createObjectStore("nbnPlaceStore",{keyPath:"locid"})},blocked:function(t,n,o){e.logger.warn("Database blocked!",{currentVersion:t,blockedVersion:n,event:o})},blocking:function(t,n,o){e.logger.warn("Database blocking!",{currentVersion:t,blockedVersion:n,event:o})},terminated:function(){e.logger.warn("Database terminated!")}}).then((function(t){e.db=t,e.logger.info("Database ready!")})).catch((function(t){e.logger.error("Failed to open database: ",t)})).finally((function(){e.logger.info("Database setup complete.")}))}return e.prototype.isReady=function(){return!!this.db},e.prototype.waitUntilReady=function(e){return U(this,void 0,void 0,(function(){var t=this;return N(this,(function(n){return[2,new Promise((function(n,o){var r=Date.now(),a=setInterval((function(){var i=Date.now()-r;t.isReady()?(clearInterval(a),n()):i>1e3*e&&(clearInterval(a),o(new Error("Database not ready after ".concat(e," seconds."))))}),100)}))]}))}))},e.prototype.storePlace=function(e){return U(this,void 0,void 0,(function(){return N(this,(function(t){switch(t.label){case 0:return[4,this.getDb()];case 1:return[4,t.sent().put("nbnPlaceStore",e)];case 2:return t.sent(),[2]}}))}))},e.prototype.storePlaces=function(e){return U(this,void 0,void 0,(function(){var t,n,o;return N(this,(function(r){switch(r.label){case 0:return[4,this.getDb()];case 1:return t=r.sent(),n=t.transaction(["nbnPlaceStore"],"readwrite",{durability:"relaxed"}),o=n.objectStore("nbnPlaceStore"),[4,e.map((function(e){return o.put(e)}))];case 2:return r.sent(),[4,n.done];case 3:return r.sent(),[2]}}))}))},e.prototype.getPlace=function(e){return U(this,void 0,void 0,(function(){return N(this,(function(t){switch(t.label){case 0:return[4,this.getDb()];case 1:return[4,t.sent().get("nbnPlaceStore",e)];case 2:return[2,t.sent()]}}))}))},e.prototype.getPlaces=function(e){return U(this,void 0,void 0,(function(){var t,n,o,r;return N(this,(function(a){switch(a.label){case 0:return[4,this.getDb()];case 1:return t=a.sent(),n=t.transaction(["nbnPlaceStore"],"readonly"),o=n.objectStore("nbnPlaceStore"),[4,Promise.all(e.map((function(e){return o.get(e)})))];case 2:return r=a.sent(),[4,n.done];case 3:return a.sent(),[2,r.filter((function(e){return!!e}))]}}))}))},e.prototype.getDb=function(e){return void 0===e&&(e=5),U(this,void 0,void 0,(function(){return N(this,(function(t){switch(t.label){case 0:return[4,this.waitUntilReady(e)];case 1:if(t.sent(),!this.db)throw new Error("Database not ready.");return[2,this.db]}}))}))},e}(),z="#1D7044",V="#02B9E3",j="#FFBE00",W="#FF7E01",Z="#E3071D",G="#022BE3",Q="#6B02E3",J="#888888";const X=function(){function e(){}return e.prototype.filter=function(e){return"Not Planned"!=e.techChangeStatus&&!!e.techChangeStatus},e.prototype.pointColour=function(e){return this.placeColour(e.places[0])},e.prototype.placeColour=function(e){switch(e.techChangeStatus){case"Previous Tech Disconnected":case"New Tech Connected":return z;case"In Design":return W;case"Build Finalised":return j;case"Committed":return Z;case"Eligible To Order":return V;case"MDU Complex Eligible To Apply":return Q;case"MDU Complex Premises In Build":return G}return J},e.prototype.renderPopupContent=function(e){var t=r.DomUtil.create("div");if(t.innerHTML="<b>"+e.locid+"</b></br>"+e.address1+"</br>"+e.address2+"</br><br />",t.innerHTML+="<b>Technology Plan</b></br>","FTTP"!=e.techType&&e.altReasonCode&&"NULL_NA"!=e.altReasonCode?(e.altReasonCode&&e.altReasonCode.match(/^FTTP/),t.innerHTML+="Current: "+e.techType+"<br />",t.innerHTML+="Change: "+e.altReasonCode+"<br />",t.innerHTML+="Status: "+e.techChangeStatus+"<br />",t.innerHTML+="Program: "+e.programType+"<br />",t.innerHTML+="Target Qtr: "+e.targetEligibilityQuarter+"<br />"):(t.innerHTML+="Technology: "+e.techType+"<br />","FTTP"!=e.techType&&(t.innerHTML+="No tech upgrade planned<br />")),t.innerHTML+="<br />",c()){var n=r.DomUtil.create("hr"),o=r.DomUtil.create("pre");o.innerHTML=JSON.stringify(e,null,2),t.appendChild(n),t.appendChild(o)}return t},e.prototype.renderTooltip=function(e){var t=e[0].address1;return e.length>1&&(t+=" ( + "+(e.length-1)+" more)"),t},e.prototype.getLegendItems=function(){return[{label:"Previous Tech Disconnected",colour:z},{label:"New Tech Connected",colour:z},{label:"Eligible To Order",colour:V},{label:"Build Finalised",colour:j},{label:"In Design",colour:W},{label:"Committed",colour:Z},{label:"MDU Complex Eligible To Apply",colour:Q},{label:"MDU Complex Premises In Build",colour:G},{label:"Unknown",colour:J}]},e}();var K,$=new l("index.ts"),q=function(){try{return process.argv.includes("development")}catch(e){return!1}}();$.debug("isDevelopment",q),"serviceWorker"in navigator&&!q&&window.addEventListener("load",(function(){navigator.serviceWorker.register("./service-worker.js").then((function(e){$.info("SW registered: ",e)})).catch((function(e){$.warn("SW registration failed: ",e)}))})),K=function(){var e=new o,t=new O,n=new X,r=function(e){switch(e||(e=new URLSearchParams(window.location.search).get("mode")||localStorage.getItem("mode")||"all"),e){case"all":default:return t;case"upgrade":return n}},a=r(),i=new _,s=new y({mapContainerId:"map",api:e,defaultModeHandler:a,placestore:i}),l=new T;s.addControl("displaymode",l);var c=new A;c.updateLegend(a.getLegendItems()),s.addControl("legend",c),l.on("change",(function(e){var t=r(e.state);if(t){s.setModeHandler(t),c.updateLegend(t.getLegendItems()),localStorage.setItem("mode",e.state);var n=new URL(window.location.href);n.searchParams.set("mode",e.state),window.history.pushState({},"",n.toString())}}))},"complete"===document.readyState||"interactive"===document.readyState?setTimeout(K,1):document.addEventListener("DOMContentLoaded",K)},36:e=>{e.exports="data:image/svg+xml,%3Csvg xmlns=%27http://www.w3.org/2000/svg%27 stroke=%27%23000%27 stroke-linecap=%27round%27 stroke-width=%271.6%27 viewBox=%270 0 24 24%27%3E%3Cdefs/%3E%3Cg%3E%3Cpath stroke-opacity=%27.1%27 d=%27M14 8.4l3-5%27/%3E%3Cpath stroke-opacity=%27.2%27 d=%27M15.6 10l5-3%27/%3E%3Cpath stroke-opacity=%27.3%27 d=%27M16.2 12H22%27/%3E%3Cpath stroke-opacity=%27.4%27 d=%27M15.6 14l5 3m-6.5-1.4l2.9 5%27/%3E%3Cpath stroke-opacity=%27.5%27 d=%27M12 16.2V22m-2-6.4l-3 5%27/%3E%3Cpath stroke-opacity=%27.6%27 d=%27M8.4 14l-5 3%27/%3E%3Cpath stroke-opacity=%27.7%27 d=%27M7.8 12H2%27/%3E%3Cpath stroke-opacity=%27.8%27 d=%27M8.4 10l-5-3%27/%3E%3Cpath stroke-opacity=%27.9%27 d=%27M10 8.4l-3-5%27/%3E%3Cpath d=%27M12 7.8V2%27/%3E%3CanimateTransform attributeName=%27transform%27 calcMode=%27discrete%27 dur=%271s%27 repeatCount=%27indefinite%27 type=%27rotate%27 values=%270 12 12;30 12 12;60 12 12;90 12 12;120 12 12;150 12 12;180 12 12;210 12 12;240 12 12;270 12 12;300 12 12;330 12 12%27/%3E%3C/g%3E%3C/svg%3E"},585:e=>{e.exports="data:image/svg+xml,%3Csvg xmlns=%27http://www.w3.org/2000/svg%27 viewBox=%270 0 24 24%27%3E%3Cpath d=%27M12.2 13l3.4 6.6c.6 1.1 2.5-.4 2-1.2l-4-6.2z%27/%3E%3Ccircle cx=%2710.8%27 cy=%278.9%27 r=%273.9%27 fill=%27none%27 stroke=%27%23000%27 stroke-width=%271.5%27/%3E%3C/svg%3E"},539:e=>{e.exports='data:image/svg+xml;charset=UTF-8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><path fill="black" d="M304 48a48 48 0 1 1-96 0 48 48 0 0 1 96 0zm-48 368a48 48 0 1 0 0 96 48 48 0 0 0 0-96zm208-208a48 48 0 1 0 0 96 48 48 0 0 0 0-96zM96 256a48 48 0 1 0-96 0 48 48 0 0 0 96 0zm13 99a48 48 0 1 0 0 96 48 48 0 0 0 0-96zm294 0a48 48 0 1 0 0 96 48 48 0 0 0 0-96zM109 61a48 48 0 1 0 0 96 48 48 0 0 0 0-96z"/></svg>'},141:e=>{e.exports='data:image/svg+xml;charset=UTF-8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><path fill="black" d="M445 4 29 195c-48 23-32 93 19 93h176v176c0 51 70 67 93 19L508 67c16-38-25-79-63-63z"/></svg>'},478:e=>{e.exports='data:image/svg+xml;charset=UTF-8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><path fill="rgb%28252, 132, 40%29" d="M445 4 29 195c-48 23-32 93 19 93h176v176c0 51 70 67 93 19L508 67c16-38-25-79-63-63z"/></svg>'},38:e=>{e.exports='data:image/svg+xml;charset=UTF-8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><path fill="rgb%2832, 116, 182%29" d="M445 4 29 195c-48 23-32 93 19 93h176v176c0 51 70 67 93 19L508 67c16-38-25-79-63-63z"/></svg>'}},n={};function o(e){var r=n[e];if(void 0!==r)return r.exports;var a=n[e]={id:e,exports:{}};return t[e].call(a.exports,a,a.exports,o),a.exports}o.m=t,e=[],o.O=(t,n,r,a)=>{if(!n){var i=1/0;for(u=0;u<e.length;u++){for(var[n,r,a]=e[u],s=!0,l=0;l<n.length;l++)(!1&a||i>=a)&&Object.keys(o.O).every((e=>o.O[e](n[l])))?n.splice(l--,1):(s=!1,a<i&&(i=a));if(s){e.splice(u--,1);var c=r();void 0!==c&&(t=c)}}return t}a=a||0;for(var u=e.length;u>0&&e[u-1][2]>a;u--)e[u]=e[u-1];e[u]=[n,r,a]},o.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return o.d(t,{a:t}),t},o.d=(e,t)=>{for(var n in t)o.o(t,n)&&!o.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},o.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),o.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),(()=>{var e;o.g.importScripts&&(e=o.g.location+"");var t=o.g.document;if(!e&&t&&(t.currentScript&&(e=t.currentScript.src),!e)){var n=t.getElementsByTagName("script");if(n.length)for(var r=n.length-1;r>-1&&!e;)e=n[r--].src}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),o.p=e})(),(()=>{o.b=document.baseURI||self.location.href;var e={143:0};o.O.j=t=>0===e[t];var t=(t,n)=>{var r,a,[i,s,l]=n,c=0;if(i.some((t=>0!==e[t]))){for(r in s)o.o(s,r)&&(o.m[r]=s[r]);if(l)var u=l(o)}for(t&&t(n);c<i.length;c++)a=i[c],o.o(e,a)&&e[a]&&e[a][0](),e[a]=0;return o.O(u)},n=self.webpackChunk=self.webpackChunk||[];n.forEach(t.bind(null,0)),n.push=t.bind(null,n.push.bind(n))})(),o.nc=void 0;var r=o.O(void 0,[578],(()=>o(196)));r=o.O(r)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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S0FBSyxLQUFNLElBQzNERCxFQUFtQmxZLEtBQU82WCxFQUFxQk0sS0FBSyxLQUFNRCxFQUFtQmxZLEtBQUttWSxLQUFLRCxRQ2hEdkZsRCxFQUFvQm9ELFFBQUsxVyxFQ0d6QixJQUFJMlcsRUFBc0JyRCxFQUFvQlMsT0FBRS9ULEVBQVcsQ0FBQyxNQUFNLElBQU9zVCxFQUFvQixPQUM3RnFELEVBQXNCckQsRUFBb0JTLEVBQUU0QyIsInNvdXJjZXMiOlsid2VicGFjazovLy93ZWJwYWNrL3J1bnRpbWUvY2h1bmsgbG9hZGVkIiwid2VicGFjazovLy8uL3NyYy9hcGkvbGlwX2FwaS5jbGFzcy50cyIsIndlYnBhY2s6Ly8vLi9zcmMvdXRpbHMudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL21hcmtlcmxheWVyL21hcmtlcmxheWVyLmNsdXN0ZXIuY2xhc3MudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL25ibl90ZWNoX21hcC5jbGFzcy50cyIsIndlYnBhY2s6Ly8vLi9zcmMvY29udHJvbHMvY29udHJvbC5hYnN0cmFjdC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvY29udHJvbHMvY29udHJvbF9kaXNwbGF5X21vZGUuY2xhc3MudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL21vZGVzL21vZGUuYWxsLnRzIiwid2VicGFjazovLy8uL3NyYy9jb250cm9scy9jb250cm9sX2xlZ2VuZC5jbGFzcy50cyIsIndlYnBhY2s6Ly8vLi9zcmMvcGxhY2VzdG9yZS9pbmRleGRiLnBsYWNlc3RvcmUudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL21vZGVzL3RlY2h1cGdyYWRlLm1vZGUudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2luZGV4LnRzIiwid2VicGFjazovLy93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly8vd2VicGFjay9ydW50aW1lL2NvbXBhdCBnZXQgZGVmYXVsdCBleHBvcnQiLCJ3ZWJwYWNrOi8vL3dlYnBhY2svcnVudGltZS9kZWZpbmUgcHJvcGVydHkgZ2V0dGVycyIsIndlYnBhY2s6Ly8vd2VicGFjay9ydW50aW1lL2dsb2JhbCIsIndlYnBhY2s6Ly8vd2VicGFjay9ydW50aW1lL2hhc093blByb3BlcnR5IHNob3J0aGFuZCIsIndlYnBhY2s6Ly8vd2VicGFjay9ydW50aW1lL3B1YmxpY1BhdGgiLCJ3ZWJwYWNrOi8vL3dlYnBhY2svcnVudGltZS9qc29ucCBjaHVuayBsb2FkaW5nIiwid2VicGFjazovLy93ZWJwYWNrL3J1bnRpbWUvbm9uY2UiLCJ3ZWJwYWNrOi8vL3dlYnBhY2svc3RhcnR1cCJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgZGVmZXJyZWQgPSBbXTtcbl9fd2VicGFja19yZXF1aXJlX18uTyA9IChyZXN1bHQsIGNodW5rSWRzLCBmbiwgcHJpb3JpdHkpID0+IHtcblx0aWYoY2h1bmtJZHMpIHtcblx0XHRwcmlvcml0eSA9IHByaW9yaXR5IHx8IDA7XG5cdFx0Zm9yKHZhciBpID0gZGVmZXJyZWQubGVuZ3RoOyBpID4gMCAmJiBkZWZlcnJlZFtpIC0gMV1bMl0gPiBwcmlvcml0eTsgaS0tKSBkZWZlcnJlZFtpXSA9IGRlZmVycmVkW2kgLSAxXTtcblx0XHRkZWZlcnJlZFtpXSA9IFtjaHVua0lkcywgZm4sIHByaW9yaXR5XTtcblx0XHRyZXR1cm47XG5cdH1cblx0dmFyIG5vdEZ1bGZpbGxlZCA9IEluZmluaXR5O1xuXHRmb3IgKHZhciBpID0gMDsgaSA8IGRlZmVycmVkLmxlbmd0aDsgaSsrKSB7XG5cdFx0dmFyIFtjaHVua0lkcywgZm4sIHByaW9yaXR5XSA9IGRlZmVycmVkW2ldO1xuXHRcdHZhciBmdWxmaWxsZWQgPSB0cnVlO1xuXHRcdGZvciAodmFyIGogPSAwOyBqIDwgY2h1bmtJZHMubGVuZ3RoOyBqKyspIHtcblx0XHRcdGlmICgocHJpb3JpdHkgJiAxID09PSAwIHx8IG5vdEZ1bGZpbGxlZCA+PSBwcmlvcml0eSkgJiYgT2JqZWN0LmtleXMoX193ZWJwYWNrX3JlcXVpcmVfXy5PKS5ldmVyeSgoa2V5KSA9PiAoX193ZWJwYWNrX3JlcXVpcmVfXy5PW2tleV0oY2h1bmtJZHNbal0pKSkpIHtcblx0XHRcdFx0Y2h1bmtJZHMuc3BsaWNlKGotLSwgMSk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRmdWxmaWxsZWQgPSBmYWxzZTtcblx0XHRcdFx0aWYocHJpb3JpdHkgPCBub3RGdWxmaWxsZWQpIG5vdEZ1bGZpbGxlZCA9IHByaW9yaXR5O1xuXHRcdFx0fVxuXHRcdH1cblx0XHRpZihmdWxmaWxsZWQpIHtcblx0XHRcdGRlZmVycmVkLnNwbGljZShpLS0sIDEpXG5cdFx0XHR2YXIgciA9IGZuKCk7XG5cdFx0XHRpZiAociAhPT0gdW5kZWZpbmVkKSByZXN1bHQgPSByO1xuXHRcdH1cblx0fVxuXHRyZXR1cm4gcmVzdWx0O1xufTsiLCJpbXBvcnQgSUFwaSBmcm9tIFwiLi4vaW50ZXJmYWNlcy9hcGkuaW50ZXJmYWNlXCI7XHJcbmltcG9ydCB7IE5iblBsYWNlQXBpUmVzcG9uc2UgfSBmcm9tIFwiLi4vdHlwZXNcIjtcclxuaW1wb3J0IHsgaXNEZWJ1Z01vZGUgfSBmcm9tIFwiLi4vdXRpbHNcIjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIExpcEFwaSBpbXBsZW1lbnRzIElBcGkge1xyXG5cclxuICAgIGFzeW5jIGZldGNoUGFnZShcclxuICAgICAgICBib3VuZHM6IEwuTGF0TG5nQm91bmRzLFxyXG4gICAgICAgIHBhZ2U6IG51bWJlciA9IDEsXHJcbiAgICAgICAgcHJvY2VlZDogKCkgPT4gYm9vbGVhbiA9ICgpID0+IHRydWUsXHJcbiAgICApIDogUHJvbWlzZTxOYm5QbGFjZUFwaVJlc3BvbnNlPlxyXG4gICAge1xyXG5cclxuICAgICAgICBjb25zdCBub3J0aCA9IGJvdW5kcy5nZXROb3J0aCgpLnRvRml4ZWQoMik7XHJcbiAgICAgICAgY29uc3QgZWFzdCA9IGJvdW5kcy5nZXRFYXN0KCkudG9GaXhlZCgyKTtcclxuICAgICAgICBjb25zdCBzb3V0aCA9IGJvdW5kcy5nZXRTb3V0aCgpLnRvRml4ZWQoMik7XHJcbiAgICAgICAgY29uc3Qgd2VzdCA9IGJvdW5kcy5nZXRXZXN0KCkudG9GaXhlZCgyKTtcclxuXHJcbiAgICAgICAgaWYgKCFwcm9jZWVkKCkpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdQcm9jZWVkIGZ1bmN0aW9uIHJldHVybmVkIGZhbHNlLiBTdG9wcGluZyBmZXRjaC4nKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICAgICAgcGFnZSA9IE1hdGgubWF4KDEsIE51bWJlcihwYWdlKSk7XHJcblxyXG4gICAgICAgIGNvbnN0IHBhZ2VVcmwgPSBgaHR0cHM6Ly9hcGkubGlwLm5ldC5hdS9uYm4tYnVsay9tYXAvJHtub3J0aH0vJHtlYXN0fS8ke3NvdXRofS8ke3dlc3R9P3BhZ2U9JHtwYWdlfWA7XHJcblxyXG4gICAgICAgIC8vIENoZWNrIGlmIHBhZ2UgaGFzIGFscmVhZHkgYmVlbiBsb2FkZWQgdGhpcyBzZXNzaW9uLlxyXG4gICAgICAgIC8vY29uc3QgY2FjaGUgPSBzZXNzaW9uU3RvcmFnZS5nZXRJdGVtKHBhZ2VVcmwpO1xyXG4gICAgICAgIC8vY29uc3QgY2FjaGVkVGltZSA9IGNhY2hlID8gbmV3IERhdGUoY2FjaGUpIDogbnVsbDtcclxuICAgICAgICAvL2lmIChjYWNoZWRUaW1lICYmIGNhY2hlZFRpbWUuZ2V0VGltZSgpID4gbmV3IERhdGUoKS5nZXRUaW1lKCkgLSAxMDAwICogNjAgKiA2MCAqIDI0KSB7XHJcbiAgICAgICAgLy8gICAgdGhyb3cgbmV3IEVycm9yKCdQYWdlIGFscmVhZHkgbG9hZGVkIHRoaXMgc2Vzc2lvbi4nKTtcclxuICAgICAgICAvL31cclxuICAgICAgICBcclxuICAgICAgICByZXR1cm4gYXdhaXQgbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG5cclxuICAgICAgICAgICAgZmV0Y2goYGh0dHBzOi8vYXBpLmxpcC5uZXQuYXUvbmJuLWJ1bGsvbWFwLyR7bm9ydGh9LyR7ZWFzdH0vJHtzb3V0aH0vJHt3ZXN0fT9wYWdlPSR7cGFnZX1gLCB7XHJcbiAgICAgICAgICAgICAgICBtZXRob2Q6ICdHRVQnLFxyXG4gICAgICAgICAgICAgICAgcmVkaXJlY3Q6ICdmb2xsb3cnLFxyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAudGhlbihyZXNwb25zZSA9PiByZXNwb25zZS50ZXh0KCkpXHJcbiAgICAgICAgICAgIC50aGVuKHJlc3VsdCA9PiB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBwYXJzZWRSZXN1bHQgPSBKU09OLnBhcnNlKHJlc3VsdCkgYXMgeyBkYXRhOiBOYm5QbGFjZUFwaVJlc3BvbnNlfTtcclxuICAgICAgICAgICAgICAgIHJlc29sdmUocGFyc2VkUmVzdWx0LmRhdGEpO1xyXG4gICAgICAgICAgICAgICAgLy9zZXNzaW9uU3RvcmFnZS5zZXRJdGVtKHBhZ2VVcmwsIG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKSk7XHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIC5jYXRjaChyZWplY3QpO1xyXG5cclxuICAgICAgICB9KTtcclxuICAgICAgICBcclxuICAgIH1cclxufSIsImltcG9ydCB7IE5iblBsYWNlIH0gZnJvbSBcIi4vdHlwZXNcIjtcclxuXHJcblxyXG5leHBvcnQgY2xhc3MgTG9nZ2VyIHtcclxuXHJcbiAgICBzdWIobmFtZTogc3RyaW5nKSB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBMb2dnZXIoYCR7dGhpcy5uYW1lfS4ke25hbWV9YCk7XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBuYW1lOiBzdHJpbmcpIHtcclxuICAgIH1cclxuXHJcbiAgICBlcnJvciguLi5hcmdzOiBhbnlbXSkge1xyXG4gICAgICAgIGNvbnNvbGUuZXJyb3IoYFske3RoaXMubmFtZX1dYCwgLi4uYXJncyk7XHJcbiAgICB9XHJcblxyXG4gICAgd2FybiguLi5hcmdzOiBhbnlbXSkge1xyXG4gICAgICAgIGNvbnNvbGUud2FybihgWyR7dGhpcy5uYW1lfV1gLCAuLi5hcmdzKTtcclxuICAgIH1cclxuXHJcbiAgICBkZWJ1ZyguLi5hcmdzOiBhbnlbXSkge1xyXG4gICAgICAgIGlmIChpc0RlYnVnTW9kZSgpKSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUuZGVidWcoYFske3RoaXMubmFtZX1dYCwgLi4uYXJncyk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgXHJcbiAgICBpbmZvKC4uLmFyZ3M6IGFueVtdKSB7XHJcbiAgICAgICAgY29uc29sZS5pbmZvKGBbJHt0aGlzLm5hbWV9XWAsIC4uLmFyZ3MpO1xyXG4gICAgfVxyXG5cclxuICAgIGxvZyguLi5hcmdzOiBhbnlbXSkge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKGBbJHt0aGlzLm5hbWV9XWAsIC4uLmFyZ3MpO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gY2h1bmtBcnJheTxUPihhcnJheTogVFtdLCBzaXplOiBudW1iZXIpOiBUW11bXSB7XHJcbiAgICBjb25zdCByZXN1bHRzID0gW107XHJcbiAgICB3aGlsZSAoYXJyYXkubGVuZ3RoKSB7XHJcbiAgICAgICAgcmVzdWx0cy5wdXNoKGFycmF5LnNwbGljZSgwLCBzaXplKSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcmVzdWx0cztcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGlzRGVidWdNb2RlKCkge1xyXG4gICAgcmV0dXJuIHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAnZGV2ZWxvcG1lbnQnXHJcbiAgICAgICAgfHwgd2luZG93LmxvY2F0aW9uLmhyZWYuaW5jbHVkZXMoJ2xvY2FsaG9zdCcpXHJcbiAgICAgICAgfHwgd2luZG93LmxvY2F0aW9uLmhyZWYuaW5jbHVkZXMoJ2RlYnVnPXRydWUnKVxyXG4gICAgO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gaXNQbGFjZUZUVFAocGxhY2U6IE5iblBsYWNlKSB7XHJcbiAgICByZXR1cm4gcGxhY2UudGVjaFR5cGUgPT09ICdGVFRQJztcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGlzUGxhY2VGVFROKHBsYWNlOiBOYm5QbGFjZSkge1xyXG4gICAgcmV0dXJuIHBsYWNlLnRlY2hUeXBlID09PSAnRlRUTic7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBpc1BsYWNlSEZDKHBsYWNlOiBOYm5QbGFjZSkge1xyXG4gICAgcmV0dXJuIHBsYWNlLnRlY2hUeXBlID09PSAnSEZDJztcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGlzUGxhY2VGVFRCKHBsYWNlOiBOYm5QbGFjZSkge1xyXG4gICAgcmV0dXJuIHBsYWNlLnRlY2hUeXBlID09PSAnRlRUQic7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBpc1BsYWNlRlRUQyhwbGFjZTogTmJuUGxhY2UpIHtcclxuICAgIGlmKHBsYWNlLnRlY2hUeXBlID09IFwiRlRUQ1wiXHJcbiAgICAgICAgJiYgcGxhY2UucmVhc29uQ29kZSAmJiBwbGFjZS5yZWFzb25Db2RlLm1hdGNoKC9eRlRUQy8pXHJcbiAgICAgICAgJiYgcGxhY2UudGVjaENoYW5nZVN0YXR1cyA9PSAnTmV3IFRlY2ggQ29ubmVjdGVkJ1xyXG4gICAgKSB7XHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gZmFsc2U7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBpc1BsYWNlRml4ZWRXaXJlbGVzcyhwbGFjZTogTmJuUGxhY2UpIHtcclxuICAgIHJldHVybiBwbGFjZS50ZWNoVHlwZSA9PT0gJ0ZpeGVkIFdpcmVsZXNzJztcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGlzUGxhY2VTYXRlbGxpdGUocGxhY2U6IE5iblBsYWNlKSB7XHJcbiAgICByZXR1cm4gcGxhY2UudGVjaFR5cGUgPT09ICdTYXRlbGxpdGUnO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gaXNQbGFjZUZUVFBBdmFpbChwbGFjZTogTmJuUGxhY2UpIHtcclxuICAgIGlmIChwbGFjZS5hbHRSZWFzb25Db2RlICYmIHBsYWNlLmFsdFJlYXNvbkNvZGUubWF0Y2goL15GVFRQLykpIHtcclxuICAgICAgICBzd2l0Y2gocGxhY2UudGVjaENoYW5nZVN0YXR1cykge1xyXG4gICAgICAgICAgICBjYXNlICdFbGlnaWJsZSBUbyBPcmRlcic6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gZmFsc2U7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBpc1BsYWNlRlRUUFNvb24ocGxhY2U6IE5iblBsYWNlKSB7XHJcbiAgICBpZiAocGxhY2UuYWx0UmVhc29uQ29kZSAmJiBwbGFjZS5hbHRSZWFzb25Db2RlLm1hdGNoKC9eRlRUUC8pKSB7XHJcbiAgICAgICAgc3dpdGNoKHBsYWNlLnRlY2hDaGFuZ2VTdGF0dXMpIHtcclxuICAgICAgICAgICAgY2FzZSAnSW4gRGVzaWduJzpcclxuICAgICAgICAgICAgY2FzZSAnQnVpbGQgRmluYWxpc2VkJzpcclxuICAgICAgICAgICAgY2FzZSAnUGxhbm5lZCc6XHJcbiAgICAgICAgICAgIGNhc2UgJ01EVSBDb21wbGV4IEVsaWdpYmxlIFRvIEFwcGx5JzpcclxuICAgICAgICAgICAgY2FzZSAnTURVIENvbXBsZXggUHJlbWlzZXMgSW4gQnVpbGQnOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIGZhbHNlO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gaXNQbGFjZUZUVFBGYXIocGxhY2U6IE5iblBsYWNlKSB7XHJcbiAgICBpZiAocGxhY2UuYWx0UmVhc29uQ29kZSAmJiBwbGFjZS5hbHRSZWFzb25Db2RlLm1hdGNoKC9eRlRUUC8pKSB7XHJcbiAgICAgICAgc3dpdGNoKHBsYWNlLnRlY2hDaGFuZ2VTdGF0dXMpIHtcclxuICAgICAgICAgICAgY2FzZSAnQ29tbWl0dGVkJzpcclxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGlzRnd0b0ZUVE4ocGxhY2U6IE5iblBsYWNlKSB7XHJcbiAgICByZXR1cm4gcGxhY2UudGVjaFR5cGUgPT0gXCJGVFROXCJcclxuICAgICAgICAmJiBwbGFjZS5yZWFzb25Db2RlID09IFwiRlRUTl9TQVwiXHJcbiAgICAgICAgJiYgcGxhY2UuYWx0UmVhc29uQ29kZSA9PSBcIkZXX0NUXCJcclxuICAgICAgICAmJiBwbGFjZS50ZWNoQ2hhbmdlU3RhdHVzID09ICdFbGlnaWJsZSBUbyBPcmRlcidcclxuICAgIDtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGlzRnd0b0ZUVEMocGxhY2U6IE5iblBsYWNlKSB7XHJcbiAgICByZXR1cm4gcGxhY2UudGVjaFR5cGUgPT0gXCJGVFRDXCJcclxuICAgICAgICAmJiBwbGFjZS5yZWFzb25Db2RlID09IFwiRlRUQ19TQVwiXHJcbiAgICAgICAgJiYgcGxhY2UuYWx0UmVhc29uQ29kZSA9PSBcIkZXX0NUXCJcclxuICAgICAgICAmJiBwbGFjZS50ZWNoQ2hhbmdlU3RhdHVzID09ICdFbGlnaWJsZSBUbyBPcmRlcidcclxuICAgIDtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGlzU2F0VG9GVyhwbGFjZTogTmJuUGxhY2UpIHtcclxuICAgIHJldHVybiBwbGFjZS50ZWNoVHlwZSA9PSBcIldJUkVMRVNTXCJcclxuICAgICAgICAmJiBwbGFjZS5yZWFzb25Db2RlID09IFwiRldfU0FcIlxyXG4gICAgICAgICYmIHBsYWNlLnRlY2hDaGFuZ2VTdGF0dXMgPT0gJ0VsaWdpYmxlIFRvIE9yZGVyJ1xyXG4gICAgO1xyXG59XHJcbiIsImltcG9ydCBJRGF0YXN0b3JlIGZyb20gXCIuLi9pbnRlcmZhY2VzL2RhdGFzdG9yZS5pbnRlcmZhY2VcIjtcclxuaW1wb3J0IElNYXJrZXJMYXllciBmcm9tIFwiLi4vaW50ZXJmYWNlcy9tYXJrZXJsYXllci5pbnRlcmZhY2VcIjtcclxuXHJcbmltcG9ydCAqIGFzIEwgZnJvbSBcImxlYWZsZXRcIjtcclxuaW1wb3J0ICdsZWFmbGV0Lm1hcmtlcmNsdXN0ZXInO1xyXG5pbXBvcnQgJ2xlYWZsZXQubWFya2VyY2x1c3Rlci9kaXN0L01hcmtlckNsdXN0ZXIuY3NzJztcclxuXHJcbmltcG9ydCB7IE5iblBsYWNlLCBQb2ludEFuZExvY2lkcyB9IGZyb20gXCIuLi90eXBlc1wiO1xyXG5cclxuLy8gQ29uc3RhbnQgQ29sb3Vyc1xyXG5jb25zdCBjb2xvdXJGVFRQIFx0XHQ9ICcjMUQ3MDQ0JztcclxuY29uc3QgY29sb3VyRlRUUEF2YWlsICAgPSAnIzc1QUQ2Ric7XHJcbmNvbnN0IGNvbG91ckZUVFBTb29uICAgID0gJyNDOEUzQzUnO1xyXG5jb25zdCBjb2xvdXJIRkMgXHRcdD0gJyNGRkJFMDAnO1xyXG5jb25zdCBjb2xvdXJGVFRDIFx0XHQ9ICcjRkY3RTAxJztcclxuY29uc3QgY29sb3VyRlRUQ0F2YWlsICAgPSAnI0ZGN0UwMSc7XHJcbmNvbnN0IGNvbG91ckZUVE5CIFx0XHQ9ICcjRTMwNzFEJztcclxuY29uc3QgY29sb3VyRlcgXHRcdCAgICA9ICcjMDJCOUUzJztcclxuY29uc3QgY29sb3VyRldBdmFpbCBcdD0gJyMwMjJCRTMnO1xyXG5jb25zdCBjb2xvdXJTYXQgXHQgICAgPSAnIzZCMDJFMyc7XHJcblxyXG5jb25zdCBjb2xvdXJFRV9DQkRfWkJDICA9ICcjMUQ3MDQ0JztcclxuY29uc3QgY29sb3VyRUVfQ0JEX0JDICAgPSAnIzAyQjlFMyc7XHJcbmNvbnN0IGNvbG91ckVFX1oxMjNfWkJDID0gJyNGRjdFMDEnO1xyXG5jb25zdCBjb2xvdXJFRV9aMTIzX0JDICA9ICcjRTMwNzFEJztcclxuXHJcbmNvbnN0IENPTF9URUNIX0NPTVBMRVRFICAgICAgICAgPSAnIzFENzA0NCc7XHJcbmNvbnN0IENPTF9URUNIX0FWQUlMICAgICAgICAgICAgPSAnIzAyQjlFMyc7XHJcbmNvbnN0IENPTF9URUNIX0JVSUxERklOQUxJU0VEICAgPSAnI0ZGQkUwMCc7XHJcbmNvbnN0IENPTF9URUNIX0RFU0lHTiAgICAgICAgICAgPSAnI0ZGN0UwMSc7XHJcbmNvbnN0IENPTF9URUNIX0NPTU1JVFRFRCAgICAgICAgPSAnI0UzMDcxRCc7XHJcblxyXG5jb25zdCBDT0xfVEVDSF9NRFVfSU5CVUlMRCAgICAgID0gJyMwMjJCRTMnO1xyXG5jb25zdCBDT0xfVEVDSF9NRFVfRUxJR0lCTEUgICAgID0gJyM2QjAyRTMnO1xyXG5cclxuY29uc3QgY29sb3VyVW5rbm93biAgICAgID0gJyM4ODg4ODgnO1xyXG5cclxuaW1wb3J0IElNb2RlIGZyb20gXCIuLi9pbnRlcmZhY2VzL21vZGUuaW50ZXJmYWNlXCI7XHJcbmltcG9ydCBJUGxhY2VTdG9yZSBmcm9tIFwiLi4vaW50ZXJmYWNlcy9wbGFjZXN0b3JlLmludGVyZmFjZVwiO1xyXG5pbXBvcnQgeyBMb2dnZXIgfSBmcm9tIFwiLi4vdXRpbHNcIjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE1hcmtlckxheWVyQ2x1c3RlciBpbXBsZW1lbnRzIElNYXJrZXJMYXllciB7XHJcblxyXG4gICAgcHJpdmF0ZSBsb2dnZXIgPSBuZXcgTG9nZ2VyKCdNYXJrZXJMYXllckNsdXN0ZXInKTtcclxuXHJcbiAgICBwcml2YXRlIG1hcDogTC5NYXA7XHJcbiAgICBwcml2YXRlIHBsYWNlU3RvcmU6IElQbGFjZVN0b3JlO1xyXG4gICAgcHJpdmF0ZSBtb2RlSGFuZGxlcjogSU1vZGU7XHJcblxyXG4gICAgcHJpdmF0ZSBtYXJrZXJzOiBMLk1hcmtlckNsdXN0ZXJHcm91cDtcclxuXHJcbiAgICBwcml2YXRlIHBvaW50TWFwOiBNYXA8c3RyaW5nLCB7XHJcbiAgICAgICAgbGF5ZXI6IEwuQ2lyY2xlTWFya2VyLFxyXG4gICAgICAgIHBvaW50OiBQb2ludEFuZExvY2lkc1xyXG4gICAgfT4gPSBuZXcgTWFwKCk7XHJcblxyXG4gICAgY29uc3RydWN0b3IobWFwOiBMLk1hcCwgbW9kZUhhbmRsZXI6IElNb2RlLCBwbGFjZVN0b3JlOiBJUGxhY2VTdG9yZSkge1xyXG5cclxuICAgICAgICB0aGlzLm1hcCA9IG1hcDtcclxuICAgICAgICB0aGlzLnBsYWNlU3RvcmUgPSBwbGFjZVN0b3JlO1xyXG4gICAgICAgIHRoaXMubW9kZUhhbmRsZXIgPSBtb2RlSGFuZGxlcjtcclxuXHJcbiAgICAgICAgdGhpcy5tYXJrZXJzID0gbmV3IEwuTWFya2VyQ2x1c3Rlckdyb3VwKHtcclxuICAgICAgICAgICAgbWF4Q2x1c3RlclJhZGl1czogdGhpcy5tYXJrZXJDbHVzdGVyUmFkaXVzLFxyXG4gICAgICAgICAgICBzcGlkZXJmeU9uTWF4Wm9vbTogZmFsc2UsXHJcbiAgICAgICAgICAgIGRpc2FibGVDbHVzdGVyaW5nQXRab29tOiAxOCxcclxuICAgICAgICAgICAgc2hvd0NvdmVyYWdlT25Ib3ZlcjogdHJ1ZSxcclxuICAgICAgICAgICAgem9vbVRvQm91bmRzT25DbGljazogdHJ1ZSxcclxuICAgICAgICAgICAgcmVtb3ZlT3V0c2lkZVZpc2libGVCb3VuZHM6IHRydWUsXHJcbiAgICAgICAgICAgIGljb25DcmVhdGVGdW5jdGlvbjogdGhpcy5pY29uQ3JlYXRlRnVuY3Rpb24sXHJcbiAgICAgICAgICAgIGNodW5rZWRMb2FkaW5nOiB0cnVlLFxyXG4gICAgICAgICAgICBjaHVua0ludGVydmFsOiAxNTAsXHJcbiAgICAgICAgICAgIGNodW5rRGVsYXk6IDE1MCxcclxuICAgICAgICAgICAgY2h1bmtQcm9ncmVzczogKHByb2Nlc3NlZCwgdG90YWwsIGVsYXBzZWQpID0+IHtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdjaHVua1Byb2dyZXNzJywgeyBwcm9jZXNzZWQsIHRvdGFsLCBlbGFwc2VkIH0pO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICB0aGlzLm1hcmtlcnMuYWRkVG8odGhpcy5tYXApO1xyXG5cclxuICAgICAgICB0aGlzLm1hcC5vbignem9vbWVuZCcsIChldmVudCkgPT4ge1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZygnem9vbWVuZCcsIGV2ZW50LnRhcmdldC5nZXRab29tKCkpO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEFkZCBwb2ludHMgdG8gdGhlIG1hcFxyXG4gICAgICogQHBhcmFtIHBvaW50cyBcclxuICAgICAqL1xyXG4gICAgYWRkUG9pbnRzKFxyXG4gICAgICAgIHBvaW50czogTWFwPHN0cmluZywgUG9pbnRBbmRMb2NpZHM+XHJcbiAgICApIDogdm9pZFxyXG4gICAge1xyXG5cclxuICAgICAgICBjb25zdCBsb2dnZXIgPSB0aGlzLmxvZ2dlci5zdWIoJ2FkZFBvaW50cycpO1xyXG4gICAgICAgIFxyXG4gICAgICAgIGNvbnN0IG5ld0xheWVyczogTC5DaXJjbGVNYXJrZXJbXSA9IFtdO1xyXG5cclxuICAgICAgICAvLyBBZGQgdGhlIHBvaW50cyB0byB0aGUgcG9pbnQgc3RvcmVcclxuICAgICAgICBwb2ludHMuZm9yRWFjaCgocG9pbnQpID0+IHtcclxuICAgICAgICAgICAgY29uc3QgbGF0TG5nU3RyaW5nID0gcG9pbnQubGF0ICsgJywnICsgcG9pbnQubG5nO1xyXG4gICAgICAgICAgICBjb25zdCBwb2ludE1hcCA9IHRoaXMucG9pbnRNYXAuZ2V0KGxhdExuZ1N0cmluZyk7XHJcbiAgICAgICAgICAgIGlmICghcG9pbnRNYXApIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG5ld0xheWVyID0gdGhpcy5yZW5kZXJQb2ludChwb2ludCk7XHJcbiAgICAgICAgICAgICAgICBuZXdMYXllcnMucHVzaChuZXdMYXllcik7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnBvaW50TWFwLnNldChsYXRMbmdTdHJpbmcsIHtcclxuICAgICAgICAgICAgICAgICAgICBsYXllcjogbmV3TGF5ZXIsXHJcbiAgICAgICAgICAgICAgICAgICAgcG9pbnQsXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHBvaW50TWFwLnBvaW50ID0gcG9pbnQ7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgLy8gQWRkIGFsbCB0aGUgbGF5ZXJzIHRvIHRoZSBtYXBcclxuICAgICAgICBsb2dnZXIuZGVidWcoJ0FkZGluZyBuZXcgbGF5ZXJzJywgbmV3TGF5ZXJzLmxlbmd0aCk7XHJcbiAgICAgICAgaWYgKG5ld0xheWVycy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgdGhpcy5tYXJrZXJzLmFkZExheWVycyhuZXdMYXllcnMpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBSZW1vdmUgcG9pbnRzIGZyb20gdGhlIG1hcFxyXG4gICAgICogQHBhcmFtIHBvaW50cyBcclxuICAgICAqL1xyXG4gICAgcmVtb3ZlQWxsUG9pbnRzKCkgOiB2b2lkXHJcbiAgICB7XHJcbiAgICAgICAgdGhpcy5sb2dnZXIuc3ViKCdyZW1vdmVBbGxQb2ludHMnKS5kZWJ1ZygnUmVtb3ZpbmcgYWxsIHBvaW50cycsIHRoaXMucG9pbnRNYXApO1xyXG4gICAgICAgIHRoaXMubWFya2Vycy5jbGVhckxheWVycygpO1xyXG4gICAgICAgIHRoaXMucG9pbnRNYXAuY2xlYXIoKTtcclxuICAgICAgICB0aGlzLmxvZ2dlci5zdWIoJ3JlbW92ZUFsbFBvaW50cycpLmRlYnVnKCdSZW1vdmVkIGFsbCBwb2ludHMnLCB0aGlzLnBvaW50TWFwKTtcclxuICAgIH1cclxuXHJcbiAgICBcclxuICAgIGFzeW5jIHJlbW92ZUFsbE1hcmtlcnMoKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgICAgICAgdGhpcy5yZW1vdmVBbGxQb2ludHMoKTtcclxuICAgIH1cclxuXHJcblxyXG4gICAgbWFya2VyQ2x1c3RlclJhZGl1cyh6b29tOiBudW1iZXIpIHtcclxuICAgICAgICBzd2l0Y2goem9vbSkge1xyXG4gICAgICAgICAgICBjYXNlIDA6XHJcbiAgICAgICAgICAgIGNhc2UgMTpcclxuICAgICAgICAgICAgY2FzZSAyOlxyXG4gICAgICAgICAgICBjYXNlIDM6XHJcbiAgICAgICAgICAgIGNhc2UgNDpcclxuICAgICAgICAgICAgY2FzZSA1OlxyXG4gICAgICAgICAgICBjYXNlIDY6XHJcbiAgICAgICAgICAgIGNhc2UgNzpcclxuICAgICAgICAgICAgY2FzZSA4OlxyXG4gICAgICAgICAgICBjYXNlIDk6XHJcbiAgICAgICAgICAgIGNhc2UgMTA6XHJcbiAgICAgICAgICAgIGNhc2UgMTE6XHJcbiAgICAgICAgICAgIGNhc2UgMTI6XHJcbiAgICAgICAgICAgIGNhc2UgMTM6IHJldHVybiAxNTA7XHJcbiAgICAgICAgICAgIGNhc2UgMTQ6IHJldHVybiAxMDA7XHJcbiAgICAgICAgICAgIGNhc2UgMTU6XHJcbiAgICAgICAgICAgIGNhc2UgMTY6XHJcbiAgICAgICAgICAgIGRlZmF1bHQ6IHJldHVybiAwO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIHVwZGF0ZVBvaW50U3R5bGUocGxhY2VzOiBOYm5QbGFjZVtdLCBsYXllcjogTC5DaXJjbGVNYXJrZXIpIHtcclxuICAgICAgICBsYXllci5zZXRTdHlsZSh7XHJcbiAgICAgICAgICAgIGZpbGxDb2xvcjogdGhpcy5tb2RlSGFuZGxlci5wbGFjZUNvbG91cihwbGFjZXNbMF0pLFxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGxheWVyLnNldFRvb2x0aXBDb250ZW50KHRoaXMubW9kZUhhbmRsZXIucmVuZGVyVG9vbHRpcChwbGFjZXMpKTtcclxuICAgICAgICBsYXllci5yZWRyYXcoKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFNldCB0aGUgbW9kZSBoYW5kbGVyXHJcbiAgICAgKiAgLSBTdG9yZSB0aGUgbW9kZSBoYW5kbGVyXHJcbiAgICAgKiAgLSBVcGRhdGUgdGhlIGNvbG91ciBvZiB0aGUgcG9pbnRzXHJcbiAgICAgKiBAcGFyYW0gbW9kZUhhbmRsZXIgXHJcbiAgICAgKiBAcmV0dXJucyBcclxuICAgICAqL1xyXG4gICAgc2V0TW9kZUhhbmRsZXIobW9kZUhhbmRsZXI6IElNb2RlLCBwbGFjZXN0b3JlOiBJUGxhY2VTdG9yZSkge1xyXG5cclxuICAgICAgICB0aGlzLm1vZGVIYW5kbGVyID0gbW9kZUhhbmRsZXI7XHJcbiAgICAgICAgLypcclxuICAgICAgICB0aGlzLnBvaW50TWFwLmZvckVhY2goKHsgbGF5ZXIsIHBvaW50IH0pID0+IHtcclxuXHJcbiAgICAgICAgICAgIC8vIEdldCB0aGUgcGxhY2VzXHJcbiAgICAgICAgICAgIGNvbnN0IGdldFBsYWNlcyA9IHBsYWNlc3RvcmUuZ2V0UGxhY2VzKHBvaW50Lmlkcyk7XHJcblxyXG4gICAgICAgICAgICAvLyBVcGRhdGUgdGhlIHBvaW50IHN0eWxlXHJcbiAgICAgICAgICAgIGdldFBsYWNlcy50aGVuKChwbGFjZXMpID0+IHRoaXMudXBkYXRlUG9pbnRTdHlsZShwbGFjZXMsIGxheWVyKSk7XHJcblxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBpZiAodGhpcy5tYXJrZXJzICYmIHRoaXMubWFya2Vycy5nZXRMYXllcnMoKS5sZW5ndGgpIHtcclxuICAgICAgICAgICAgdGhpcy5tYXJrZXJzLnJlZnJlc2hDbHVzdGVycygpO1xyXG4gICAgICAgIH1cclxuICAgICAgICAqL1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfVxyXG5cclxuICAgIGFzeW5jIERFUF9yZWZyZXNoTWFya2Vyc0luc2lkZUJvdW5kcyhib3VuZHM6IEwuTGF0TG5nQm91bmRzLCBtRmlsdGVyPzogKHBsYWNlOiBOYm5QbGFjZSkgPT4gYm9vbGVhbikge1xyXG5cclxuICAgICAgICAvKlxyXG4gICAgICAgIGlmICghdGhpcy5kYXRhc3RvcmUpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdEYXRhc3RvcmUgbm90IHNldCcpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29uc3QgbmV3UG9pbnRzID0gYXdhaXQgdGhpcy5kYXRhc3RvcmUuZ2V0RnVsbFBvaW50c1dpdGhpbkJvdW5kcyhib3VuZHMpO1xyXG4gICAgICAgIFxyXG4gICAgICAgIG5ld1BvaW50c1xyXG4gICAgICAgICAgICAuZm9yRWFjaChwb2ludCA9PiB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBsYXRMbmdTdHJpbmcgPSBwb2ludC5sYXRsbmc7XHJcbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMucG9pbnRTdG9yZVtsYXRMbmdTdHJpbmddKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wb2ludFN0b3JlW2xhdExuZ1N0cmluZ10gPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxheWVyOiB0aGlzLnJlbmRlclBvaW50KHBvaW50KSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgcG9pbnQsXHJcbiAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wb2ludHNbbGF0TG5nU3RyaW5nXS5wb2ludCA9IHBvaW50O1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KVxyXG5cclxuXHJcbiAgICAgICAgaWYgKG1GaWx0ZXIpIHtcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IHJlbW92ZUxheWVyczogTC5MYXllcltdID0gW107XHJcblxyXG4gICAgICAgICAgICBjb25zdCBmaWx0ZXJlZFBvaW50cyA9IE9iamVjdC52YWx1ZXModGhpcy5wb2ludHMpXHJcbiAgICAgICAgICAgICAgICAuZmlsdGVyKCh7bGF5ZXIsIHBvaW50fSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHNob3dQb2ludCA9IHBvaW50LnBsYWNlcy5maWx0ZXIobUZpbHRlcikubGVuZ3RoID4gMDtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIXNob3dQb2ludCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZW1vdmVMYXllcnMucHVzaChsYXllcik7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBzaG93UG9pbnQ7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIGlmIChyZW1vdmVMYXllcnMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm1hcmtlcnM/LnJlbW92ZUxheWVycyhyZW1vdmVMYXllcnMpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB0aGlzLm1hcmtlcnM/LmFkZExheWVycyhmaWx0ZXJlZFBvaW50cy5tYXAocCA9PiBwLmxheWVyKSk7XHJcblxyXG4gICAgICAgIH1cclxuICAgICAgICAgICAgXHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMubWFya2Vycz8uYWRkTGF5ZXJzKE9iamVjdC52YWx1ZXModGhpcy5wb2ludHMpLm1hcChwID0+IHAubGF5ZXIpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgKi9cclxuICAgIH1cclxuXHJcbiAgICBhc3luYyByZW1vdmVNYXJrZXJzT3V0c2lkZUJvdW5kcyhib3VuZHM6IEwuTGF0TG5nQm91bmRzKSB7XHJcbiAgICAgICAgLy8gV2UgZG9uJ3QgbmVlZCB0byBkbyBhbnl0aGluZyBoZXJlLCBhcyB0aGUgbWFya2VyIGNsdXN0ZXIgcGx1Z2luIGhhbmRsZXMgdGhpcyBmb3IgdXNcclxuICAgICAgICAvL2NvbnN0IHJlbW92ZU1hcmtlcnMgPSB0aGlzLm1hcmtlcnMuZ2V0TGF5ZXJzKClcclxuICAgICAgICAvLyAgICAuZmlsdGVyKChsYXllcjogTC5DaXJjbGVNYXJrZXIpID0+ICFib3VuZHMuY29udGFpbnMobGF5ZXIuZ2V0TGF0TG5nKCkpKVxyXG4gICAgICAgIC8vO1xyXG4gICAgICAgIC8vdGhpcy5tYXJrZXJzLnJlbW92ZUxheWVycyhyZW1vdmVNYXJrZXJzKTtcclxuICAgIH1cclxuXHJcbiAgICByZW5kZXJQb2ludChwb2ludDogUG9pbnRBbmRMb2NpZHMpOiBMLkNpcmNsZU1hcmtlciB7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgIGNvbnN0IGNpcmNsZU1hcmtlckxheWVyID0gTC5jaXJjbGVNYXJrZXIoWyBwb2ludC5sYXQsIHBvaW50LmxuZyBdLCB7XHJcbiAgICAgICAgICAgIHJhZGl1czogNSxcclxuICAgICAgICAgICAgZmlsbENvbG9yOiBwb2ludC5jb2wgPyBwb2ludC5jb2xbMF0gOiB1bmRlZmluZWQsIC8vdGhpcy5nZXRQbGFjZUNvbG91cihwbGFjZSksXHJcbiAgICAgICAgICAgIGNvbG9yOiBcIiMwMDAwMDBcIixcclxuICAgICAgICAgICAgd2VpZ2h0OiAxLFxyXG4gICAgICAgICAgICBvcGFjaXR5OiAxLFxyXG4gICAgICAgICAgICBmaWxsT3BhY2l0eTogMC44LFxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBjaXJjbGVNYXJrZXJMYXllci5iaW5kUG9wdXAoXHJcbiAgICAgICAgICAgIChsYXllcikgPT4ge1xyXG5cclxuICAgICAgICAgICAgICAgIC8vIEFzeW5jIHJlbmRlciBwb3B1cCBmcm9tIHBsYWNlU3RvcmUgZGF0YVxyXG4gICAgICAgICAgICAgICAgdGhpcy5wbGFjZVN0b3JlLmdldFBsYWNlcyhwb2ludC5pZHMpLnRoZW4oKHBsYWNlcykgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHBvcHVwID0gdGhpcy5yZW5kZXJQb3B1cChwbGFjZXMpO1xyXG4gICAgICAgICAgICAgICAgICAgIGxheWVyLnNldFBvcHVwQ29udGVudChwb3B1cCk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICAvLyBSZXR1cm4gbG9hZGluZyBwb3B1cCBjb250ZW50XHJcbiAgICAgICAgICAgICAgICBjb25zdCBsb2FkaW5nUG9wdXAgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgICAgICAgICAgICAgIGxvYWRpbmdQb3B1cC5pbm5lckhUTUwgPSAnPGRpdiBjbGFzcz1cImxvYWRpbmdcIj5Mb2FkaW5nLi4uPC9kaXY+JztcclxuXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbG9hZGluZ1BvcHVwO1xyXG5cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgYXV0b1BhbjogdHJ1ZSxcclxuICAgICAgICAgICAgICAgIGF1dG9DbG9zZTogZmFsc2UsXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICApO1xyXG5cclxuICAgICAgICBjaXJjbGVNYXJrZXJMYXllci5iaW5kVG9vbHRpcChcclxuICAgICAgICAgICAgKGxheWVyKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBsZXQgbGFiZWwgPSBwb2ludC5hZGRbMF07XHJcbiAgICAgICAgXHJcbiAgICAgICAgICAgICAgICBpZiAocG9pbnQuYWRkLmxlbmd0aCA+IDEpIHtcclxuICAgICAgICAgICAgICAgICAgICBsYWJlbCArPSAnICggKyAnICsgKHBvaW50LmFkZC5sZW5ndGggLSAxKSArICcgbW9yZSknO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgIFxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGxhYmVsO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB7fVxyXG4gICAgICAgICk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgcmV0dXJuIGNpcmNsZU1hcmtlckxheWVyO1xyXG5cclxuICAgIH1cclxuXHJcbiAgICByZW5kZXJQb3B1cChwbGFjZXM6IE5iblBsYWNlW10pIDogSFRNTEVsZW1lbnQge1xyXG5cclxuICAgICAgICBpZiAocGxhY2VzLmxlbmd0aCA9PSAxKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLm1vZGVIYW5kbGVyLnJlbmRlclBvcHVwQ29udGVudChwbGFjZXNbMF0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHRoaXMucmVuZG9yUG9wdXBNdWx0aShwbGFjZXMpO1xyXG5cclxuICAgIH1cclxuICAgIFxyXG4gICAgcmVuZG9yUG9wdXBNdWx0aShwbGFjZXM6IE5iblBsYWNlW10pIDogSFRNTEVsZW1lbnQge1xyXG4gICAgICAgIGNvbnN0IGdyb3VwRGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcblxyXG4gICAgICAgIGNvbnN0IHBsYWNlQ29udGFpbmVyczogSFRNTEVsZW1lbnRbXSA9IFtdO1xyXG5cclxuICAgICAgICBwbGFjZXMuc29ydCgoYSwgYikgPT4ge1xyXG4gICAgICAgICAgICBpZiAoYS5hZGRyZXNzMSA8IGIuYWRkcmVzczEpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiAtMTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoYS5hZGRyZXNzMSA+IGIuYWRkcmVzczEpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiAxO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiAwO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBmb3IgKGxldCBwbGFjZSBvZiBwbGFjZXMpIHtcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IHBsYWNlQ29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcblxyXG4gICAgICAgICAgICBjb25zdCBwbGFjZUNvbG91ciA9IHRoaXMubW9kZUhhbmRsZXIucGxhY2VDb2xvdXIocGxhY2UpO1xyXG5cclxuICAgICAgICAgICAgLy8gQ3JlYXRlIEFjY29yZGlvbiBCdXR0b25cclxuICAgICAgICAgICAgY29uc3QgYnV0dG9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYnV0dG9uJyk7XHJcbiAgICAgICAgICAgIGJ1dHRvbi5jbGFzc0xpc3QuYWRkKCdhY2NvcmRpb24nKTtcclxuICAgICAgICAgICAgYnV0dG9uLnR5cGUgPSAnYnV0dG9uJztcclxuICAgICAgICAgICAgYnV0dG9uLmlubmVySFRNTCA9IGA8c3ZnIGhlaWdodD1cIjE1XCIgd2lkdGg9XCIxNVwiIHN0eWxlPVwibWFyZ2luLXJpZ2h0OjNweFwiPmBcclxuICAgICAgICAgICAgICAgICsgYDxjaXJjbGUgY2xhc3M9XCJjaXJjbGVcIiBjeD1cIjcuNVwiIGN5PVwiOVwiIHI9XCI1XCIgc3Ryb2tlPVwiIzAwMFwiIHN0cm9rZS13aWR0aD1cIjFcIiBmaWxsPVwiJHtwbGFjZUNvbG91cn1cIiAvPmBcclxuICAgICAgICAgICAgICAgICsgYDwvc3ZnPmBcclxuICAgICAgICAgICAgICAgICsgYDxzcGFuPiR7cGxhY2UuYWRkcmVzczF9PC9zcGFuPmBcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIC8vIEFkZCBQYW5lbFxyXG4gICAgICAgICAgICBjb25zdCBwYW5lbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgICAgICAgICBwYW5lbC5jbGFzc0xpc3QuYWRkKCdwYW5lbCcpO1xyXG4gICAgICAgICAgICBwYW5lbC5hcHBlbmRDaGlsZCh0aGlzLm1vZGVIYW5kbGVyLnJlbmRlclBvcHVwQ29udGVudChwbGFjZSkpO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgLy8gQWRkIEV2ZW50c1xyXG4gICAgICAgICAgICBidXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XHJcblxyXG4gICAgICAgICAgICAgICAgY29uc3QgY3VycmVudGx5QWN0aXZlID0gcGxhY2VDb250YWluZXIuY2xhc3NMaXN0LmNvbnRhaW5zKCdhY3RpdmUnKTtcclxuICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgLy8gUmVtb3ZlIGFjdGl2ZSBjbGFzcyBmcm9tIGFsbCBidXR0b25zIGFuZCBwYW5lbHNcclxuICAgICAgICAgICAgICAgIHBsYWNlQ29udGFpbmVycy5mb3JFYWNoKChwbGFjZUNvbnRhaW5lcikgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIHBsYWNlQ29udGFpbmVyLmNsYXNzTGlzdC5yZW1vdmUoJ2FjdGl2ZScpO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKCFjdXJyZW50bHlBY3RpdmUpIHtcclxuICAgICAgICAgICAgICAgICAgICBwbGFjZUNvbnRhaW5lci5jbGFzc0xpc3QuYWRkKCdhY3RpdmUnKTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgLy8gQWRkIHRvIERPTVxyXG4gICAgICAgICAgICBwbGFjZUNvbnRhaW5lci5hcHBlbmRDaGlsZChidXR0b24pO1xyXG4gICAgICAgICAgICBwbGFjZUNvbnRhaW5lci5hcHBlbmRDaGlsZChwYW5lbCk7XHJcbiAgICAgICAgICAgIGdyb3VwRGl2LmFwcGVuZENoaWxkKHBsYWNlQ29udGFpbmVyKTtcclxuICAgICAgICAgICAgcGxhY2VDb250YWluZXJzLnB1c2gocGxhY2VDb250YWluZXIpO1xyXG5cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBncm91cERpdjtcclxuICAgIH1cclxuXHJcbiAgICAvKlxyXG4gICAgZ2V0UGxhY2VDb2xvdXIocGxhY2U6IE5iblBsYWNlKSB7XHJcblxyXG4gICAgICAgIC8qKiBFRSBEaXNwbGF5IE1vZGUgKi9cclxuICAgICAgICAvKlxyXG4gICAgICAgIGlmICh0aGlzLmNvbnRyb2xzLmRpc3BsYXlNb2RlLmRpc3BsYXlNb2RlID09ICdlZScpIHtcclxuXHJcbiAgICAgICAgICAgIGlmKHBsYWNlLmNiZHByaWNpbmcgJiYgcGxhY2UuemVyb0J1aWxkQ29zdCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGNvbG91ckVFX0NCRF9aQkM7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmKHBsYWNlLmNiZHByaWNpbmcgJiYgIXBsYWNlLnplcm9CdWlsZENvc3QpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBjb2xvdXJFRV9DQkRfQkM7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmKCFwbGFjZS5jYmRwcmljaW5nICYmIHBsYWNlLnplcm9CdWlsZENvc3QpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBjb2xvdXJFRV9aMTIzX1pCQztcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYoIXBsYWNlLmNiZHByaWNpbmcgJiYgIXBsYWNlLnplcm9CdWlsZENvc3QpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBjb2xvdXJFRV9aMTIzX0JDO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gY29sb3VyVW5rbm93bjtcclxuXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodGhpcy5jb250cm9scy5kaXNwbGF5TW9kZS5kaXNwbGF5TW9kZSA9PSAndXBncmFkZScpIHtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIHN3aXRjaCAocGxhY2UudGVjaENoYW5nZVN0YXR1cykge1xyXG4gICAgICAgICAgICAgICAgY2FzZSAnUHJldmlvdXMgVGVjaCBEaXNjb25uZWN0ZWQnOiByZXR1cm4gQ09MX1RFQ0hfQ09NUExFVEU7XHJcbiAgICAgICAgICAgICAgICBjYXNlICdOZXcgVGVjaCBDb25uZWN0ZWQnIDogcmV0dXJuIENPTF9URUNIX0NPTVBMRVRFO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAnSW4gRGVzaWduJzogcmV0dXJuIENPTF9URUNIX0RFU0lHTjtcclxuICAgICAgICAgICAgICAgIGNhc2UgJ0J1aWxkIEZpbmFsaXNlZCc6IHJldHVybiBDT0xfVEVDSF9CVUlMREZJTkFMSVNFRDtcclxuICAgICAgICAgICAgICAgIGNhc2UgJ0NvbW1pdHRlZCc6IHJldHVybiBDT0xfVEVDSF9DT01NSVRURUQ7XHJcbiAgICAgICAgICAgICAgICBjYXNlICdFbGlnaWJsZSBUbyBPcmRlcic6IHJldHVybiBDT0xfVEVDSF9BVkFJTDtcclxuICAgICAgICAgICAgICAgIGNhc2UgJ01EVSBDb21wbGV4IEVsaWdpYmxlIFRvIEFwcGx5JzogcmV0dXJuIENPTF9URUNIX01EVV9FTElHSUJMRTtcclxuICAgICAgICAgICAgICAgIGNhc2UgJ01EVSBDb21wbGV4IFByZW1pc2VzIEluIEJ1aWxkJzogcmV0dXJuIENPTF9URUNIX01EVV9JTkJVSUxEO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gY29sb3VyVW5rbm93bjtcclxuICAgICAgICB9Ki9cclxuLypcclxuICAgICAgICBpZiAoaXNQbGFjZUZUVFAocGxhY2UpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBjb2xvdXJGVFRQO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKGlzUGxhY2VGVFRQQXZhaWwocGxhY2UpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBjb2xvdXJGVFRQQXZhaWw7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoaXNQbGFjZUZUVFBTb29uKHBsYWNlKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gY29sb3VyRlRUUFNvb247XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoaXNQbGFjZUZUVFBGYXIocGxhY2UpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBnZXRUZWNoQ29sb3VyKHBsYWNlLnRlY2hUeXBlKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChpc1BsYWNlRlRUQyhwbGFjZSkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGNvbG91ckZUVEM7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoaXNGV3RvRlRUQyhwbGFjZSkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGNvbG91ckZUVENBdmFpbDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChpc0Z3dG9GVFROKHBsYWNlKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gY29sb3VyRlRUTkI7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIFxyXG4gICAgICAgIGlmIChpc1NhdFRvRlcocGxhY2UpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBjb2xvdXJGV0F2YWlsO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHBsYWNlLmFsdFJlYXNvbkNvZGUgJiYgcGxhY2UuYWx0UmVhc29uQ29kZSAhPSAnTlVMTF9OQScpIHtcclxuICAgICAgICAgICAgY29uc29sZS5sb2cocGxhY2UpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gZ2V0VGVjaENvbG91cihwbGFjZS50ZWNoVHlwZSk7XHJcbiAgICB9XHJcbiovXHJcblxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqIENyZWF0ZSB0aGUgaWNvbiBmb3IgdGhlIGNsdXN0ZXJcclxuICAgICAqIEBwYXJhbSBjbHVzdGVyIFxyXG4gICAgICogQHJldHVybnMgXHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgaWNvbkNyZWF0ZUZ1bmN0aW9uKGNsdXN0ZXI6IEwuTWFya2VyQ2x1c3RlcikgOiBMLkRpdkljb25cclxuICAgIHtcclxuICAgICAgICBcclxuICAgICAgICBjb25zdCBjb2xvckFycmF5ID0gY2x1c3Rlci5nZXRBbGxDaGlsZE1hcmtlcnMoKS5tYXAoKG1hcmtlcikgPT4gKG1hcmtlciBhcyBhbnkpLm9wdGlvbnMuZmlsbENvbG9yKVxyXG5cclxuICAgICAgICBjb25zdCBjb2xvckNvdW50czoge1tjb2xvcjogc3RyaW5nXTogbnVtYmVyfSA9IHt9O1xyXG5cclxuICAgICAgICBjb2xvckFycmF5LmZvckVhY2goKGNvbG9yKSA9PiB7XHJcbiAgICAgICAgICAgIGlmICghY29sb3JDb3VudHNbY29sb3JdKSB7XHJcbiAgICAgICAgICAgICAgICBjb2xvckNvdW50c1tjb2xvcl0gPSAwO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNvbG9yQ291bnRzW2NvbG9yXSsrO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBjb25zdCBjb2xvckFycmF5U29ydGVkID0gT2JqZWN0LmtleXMoY29sb3JDb3VudHMpXHJcbiAgICAgICAgICAgIC5zb3J0KChhLCBiKSA9PiBjb2xvckNvdW50c1tiXSAtIGNvbG9yQ291bnRzW2FdKVxyXG4gICAgICAgIDtcclxuXHJcbiAgICAgICAgbGV0IGJhY2tncm91bmQgPSAnYmFja2dyb3VuZDogY29uaWMtZ3JhZGllbnQoJ1xyXG5cclxuICAgICAgICBsZXQgbGFzdENvbG91clBlcmNlbnQgPSAwO1xyXG5cclxuICAgICAgICBjb2xvckFycmF5U29ydGVkLmZvckVhY2goKGNvbG9yLCBpbmRleCkgPT4ge1xyXG4gICAgICAgICAgICBpZiAoaW5kZXggPT0gMCkge1xyXG4gICAgICAgICAgICAgICAgYmFja2dyb3VuZCArPSBcIlxcblwiICsgY29sb3IgKyAnIDAlJztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjb25zdCB0aGlzQ29sb3VyUGVyY2VudCA9IChjb2xvckNvdW50c1tjb2xvcl0gLyBjb2xvckFycmF5Lmxlbmd0aCAqIDEwMCk7XHJcbiAgICAgICAgICAgIGJhY2tncm91bmQgKz0gXCIsIFxcblwiICsgY29sb3IgKyAnICcgKyAobGFzdENvbG91clBlcmNlbnQpICsgJyUnO1xyXG4gICAgICAgICAgICBiYWNrZ3JvdW5kICs9IFwiLCBcXG5cIiArIGNvbG9yICsgJyAnICsgKGxhc3RDb2xvdXJQZXJjZW50K3RoaXNDb2xvdXJQZXJjZW50KSArICclJztcclxuICAgICAgICAgICAgbGFzdENvbG91clBlcmNlbnQgKz0gdGhpc0NvbG91clBlcmNlbnQ7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIGJhY2tncm91bmQgKz0gXCJcXG4pO1wiO1xyXG5cclxuICAgICAgICBjb25zdCByYW5kb21JZCA9IE1hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnN1YnN0cmluZyg3KTtcclxuXHJcbiAgICAgICAgcmV0dXJuIEwuZGl2SWNvbih7XHJcbiAgICAgICAgICAgIGh0bWw6IGA8c3R5bGU+I2NsdXN0ZXJfJHtyYW5kb21JZH06OmJlZm9yZSB7ICR7YmFja2dyb3VuZH0gfTwvc3R5bGU+IDxkaXYgaWQ9J2NsdXN0ZXJfJHtyYW5kb21JZH0nPjxzcGFuPmAgKyBjbHVzdGVyLmdldENoaWxkQ291bnQoKSArICc8L3NwYW4+PC9kaXY+JyxcclxuICAgICAgICAgICAgY2xhc3NOYW1lOiAnbWFya2VyLWNsdXN0ZXInLFxyXG4gICAgICAgIH0pXHJcbiAgICB9XHJcblxyXG59IiwiXHJcbmltcG9ydCAnbGVhZmxldC9kaXN0L2xlYWZsZXQuY3NzJztcclxuaW1wb3J0ICogYXMgTCBmcm9tICdsZWFmbGV0JztcclxuXHJcbmltcG9ydCAnbGVhZmxldC5sb2NhdGVjb250cm9sL2Rpc3QvTC5Db250cm9sLkxvY2F0ZS5taW4uY3NzJ1xyXG5pbXBvcnQgJ2xlYWZsZXQubG9jYXRlY29udHJvbCc7XHJcblxyXG5pbXBvcnQgJ2xlYWZsZXQtY29udHJvbC1nZW9jb2Rlci9kaXN0L0NvbnRyb2wuR2VvY29kZXIuY3NzJztcclxuaW1wb3J0IHsgR2VvY29kZXIsIGdlb2NvZGVyLCBnZW9jb2RlcnMgfSBmcm9tICdsZWFmbGV0LWNvbnRyb2wtZ2VvY29kZXInO1xyXG5cclxuaW1wb3J0IHsgTmJuUGxhY2UsIE5iblBsYWNlQXBpUmVzcG9uc2UsIE5iblRlY2hNYXBPcHRpb25zLCBQb2ludEFuZExvY2lkcyB9IGZyb20gJy4vdHlwZXMnO1xyXG4vL2ltcG9ydCBNYXJrZXJHcm91cCBmcm9tICcuL21hcmtlcl9ncm91cC5jbGFzcy50cy5kZXYnO1xyXG4vL2ltcG9ydCBDb250cm9sWm9vbVdhcm5pbmcgZnJvbSAnLi9jb250cm9sX3pvb21fd2FybmluZy5jbGFzcyc7XHJcbi8vaW1wb3J0IENvbnRyb2xGaWx0ZXIgZnJvbSAnLi9jb250cm9sX2ZpbHRlci5jbGFzcyc7XHJcblxyXG5pbXBvcnQgSUFwaSBmcm9tICcuL2ludGVyZmFjZXMvYXBpLmludGVyZmFjZSc7XHJcbmltcG9ydCBJTWFya2VyTGF5ZXIgZnJvbSAnLi9pbnRlcmZhY2VzL21hcmtlcmxheWVyLmludGVyZmFjZSc7XHJcbmltcG9ydCBNYXJrZXJMYXllckNsdXN0ZXIgZnJvbSAnLi9tYXJrZXJsYXllci9tYXJrZXJsYXllci5jbHVzdGVyLmNsYXNzJztcclxuaW1wb3J0IElDb250cm9sIGZyb20gJy4vaW50ZXJmYWNlcy9jb250cm9sLmludGVyZmFjZSc7XHJcbmltcG9ydCB7IGlzRGVidWdNb2RlIH0gZnJvbSAnLi91dGlscyc7XHJcbmltcG9ydCBJTW9kZSBmcm9tICcuL2ludGVyZmFjZXMvbW9kZS5pbnRlcmZhY2UnO1xyXG5cclxuaW1wb3J0IHsgTG9nZ2VyIH0gZnJvbSBcIi4vdXRpbHNcIjtcclxuaW1wb3J0IElQbGFjZVN0b3JlIGZyb20gJy4vaW50ZXJmYWNlcy9wbGFjZXN0b3JlLmludGVyZmFjZSc7XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gcm91bmRCb3VuZHMoYm91bmRzOiBMLkxhdExuZ0JvdW5kcyk6IEwuTGF0TG5nQm91bmRzIHtcclxuICAgIGNvbnN0IG5vcnRoID0gTWF0aC5jZWlsKGJvdW5kcy5nZXROb3J0aCgpICogNTApIC8gNTA7XHJcbiAgICBjb25zdCB3ZXN0ID0gTWF0aC5mbG9vcihib3VuZHMuZ2V0V2VzdCgpICogMjUpIC8gMjU7XHJcbiAgICBjb25zdCBzb3V0aCA9IE1hdGguZmxvb3IoYm91bmRzLmdldFNvdXRoKCkgKiA1MCkgLyA1MDtcclxuICAgIGNvbnN0IGVhc3QgPSBNYXRoLmNlaWwoYm91bmRzLmdldEVhc3QoKSAqIDI1KSAvIDI1O1xyXG4gICAgcmV0dXJuIEwubGF0TG5nQm91bmRzKFtzb3V0aCwgd2VzdF0sIFtub3J0aCwgZWFzdF0pO1xyXG59XHJcblxyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTmJuVGVjaE1hcCB7XHJcblxyXG4gICAgcHJpdmF0ZSBNQVhfVU5GRVRDSEVEX0JPWEVTID0gMTAwO1xyXG5cclxuICAgIHByaXZhdGUgbG9nZ2VyID0gbmV3IExvZ2dlcignTmJuVGVjaE1hcCcpO1xyXG5cclxuICAgIHN0YXRpYyByZWFkb25seSBERUZBVUxUX09QVElPTlM6IFBhcnRpYWw8TmJuVGVjaE1hcE9wdGlvbnM+ID0ge1xyXG4gICAgICAgIG1hcENvbnRhaW5lcklkOiAnbWFwJyxcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEBQcm9wZXJ0eSB7bWFwfSAtIExlYWZsZXQgbWFwIG9iamVjdC5cclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSBtYXA6IEwuTWFwO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQFByb3BlcnR5IHttYXBUaWxlTGF5ZXJ9IC0gTGVhZmxldCBtYXAgdGlsZSBsYXllci5cclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSBtYXBUaWxlTGF5ZXI6IEwuVGlsZUxheWVyO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQFByb3BlcnR5IHthcGl9IC0gQVBJIG9iamVjdC5cclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSBhcGk6IElBcGk7XHJcblxyXG5cclxuICAgIHByaXZhdGUgbWFwTG9jYXRlOiBMLkNvbnRyb2wuTG9jYXRlO1xyXG4gICAgcHJpdmF0ZSBtYXBTZWFyY2g6IEdlb2NvZGVyO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQFByb3BlcnR5IHtwbGFjZVN0b3JlfSAtIFBsYWNlIHN0b3JlIG5ibiBwbGFjZXMuXHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgcGxhY2VTdG9yZTogSVBsYWNlU3RvcmU7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAUHJvcGVydHkge21hcmtlckxheWVyfSAtIExheWVyIHRvIGhvbGQgbWFya2Vyc1xyXG4gICAgICovXHJcbiAgICBwcml2YXRlIG1hcmtlckxheWVyOiBJTWFya2VyTGF5ZXI7XHJcblxyXG4gICAgcHJpdmF0ZSBtb2RlSGFuZGxlcjogSU1vZGU7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBcclxuICAgICAqIEBwYXJhbSB7Kn0gb3B0aW9ucyBcclxuICAgICAqL1xyXG4gICAgY29uc3RydWN0b3Iob3B0aW9uczogTmJuVGVjaE1hcE9wdGlvbnMpIHtcclxuXHJcbiAgICAgICAgb3B0aW9ucyA9IHsgLi4uTmJuVGVjaE1hcC5ERUZBVUxUX09QVElPTlMsIC4uLm9wdGlvbnMgfTtcclxuXHJcbiAgICAgICAgdGhpcy5hcGkgPSBvcHRpb25zLmFwaTtcclxuICAgICAgICB0aGlzLnBsYWNlU3RvcmUgPSBvcHRpb25zLnBsYWNlc3RvcmU7XHJcbiAgICAgICAgdGhpcy5tb2RlSGFuZGxlciA9IG9wdGlvbnMuZGVmYXVsdE1vZGVIYW5kbGVyO1xyXG5cclxuICAgICAgICAvLyBDcmVhdGUgdGhlIG1hcFxyXG4gICAgICAgIHRoaXMubWFwID0gTC5tYXAob3B0aW9ucy5tYXBDb250YWluZXJJZCwgeyBwcmVmZXJDYW52YXM6IHRydWUgfSk7XHJcblxyXG4gICAgICAgIC8vIFNldCB1cCB0aGUgbWFya2VyIGxheWVyXHJcbiAgICAgICAgdGhpcy5tYXJrZXJMYXllciA9IG5ldyBNYXJrZXJMYXllckNsdXN0ZXIoXHJcbiAgICAgICAgICAgIHRoaXMubWFwLCB0aGlzLm1vZGVIYW5kbGVyLCB0aGlzLnBsYWNlU3RvcmVcclxuICAgICAgICApXHJcblxyXG4gICAgICAgIC8vIFNldCB1cCB0aGUgT1NNIGxheWVyXHJcbiAgICAgICAgdGhpcy5tYXBUaWxlTGF5ZXIgPSBMLnRpbGVMYXllcignaHR0cHM6Ly97c30uYmFzZW1hcHMuY2FydG9jZG4uY29tL3Jhc3RlcnRpbGVzL3ZveWFnZXIve3p9L3t4fS97eX17cn0ucG5nJywge1xyXG4gICAgICAgICAgICBhdHRyaWJ1dGlvbjogJyZjb3B5OyA8YSBocmVmPVwiaHR0cHM6Ly93d3cub3BlbnN0cmVldG1hcC5vcmcvY29weXJpZ2h0XCI+T3BlblN0cmVldE1hcDwvYT4gY29udHJpYnV0b3JzICZjb3B5OyA8YSBocmVmPVwiaHR0cHM6Ly9jYXJ0by5jb20vYXR0cmlidXRpb25zXCI+Q0FSVE88L2E+JyxcclxuICAgICAgICAgICAgc3ViZG9tYWluczogJ2FiY2QnLFxyXG4gICAgICAgICAgICBjcm9zc09yaWdpbjogdHJ1ZSxcclxuICAgICAgICAgICAgbWluWm9vbTogNSxcclxuICAgICAgICAgICAgbWF4Wm9vbTogMjBcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgLy8gQWRkIHRoZSBsYXllciB0byB0aGUgbWFwXHJcbiAgICAgICAgdGhpcy5tYXBUaWxlTGF5ZXIuYWRkVG8odGhpcy5tYXApO1xyXG5cclxuICAgICAgICBjb25zb2xlLmxvZyh7IEwsIEdlb2NvZGVyLCBnZW9jb2RlciB9KTtcclxuXHJcbiAgICAgICAgLy8gQWRkIGdlb2NvZGVyIGNvbnRyb2xcclxuICAgICAgICBjb25zdCBtYXBHZW9jb2RlciA9IG5ldyBnZW9jb2RlcnMuQXJjR2lzKHtcclxuICAgICAgICAgICAgYXBpS2V5OiAnQUFQS2E5N2I4YTUzNzRkYjRmYTliMGZkZDhlNTUzNjFjYmE0WjlmRXV3M2NrQU9JRkhLMUNQX1ZielR2M09UZVV6M2dnckZBelZQemp5bjNRN2JRRnpid2tETXZEeGFKLUp6RycsXHJcbiAgICAgICAgICAgIGdlb2NvZGluZ1F1ZXJ5UGFyYW1zOiB7XHJcbiAgICAgICAgICAgICAgICBjb3VudHJ5Q29kZTogJ0FVJyxcclxuICAgICAgICAgICAgICAgIGNhdGVnb3J5OiAnQWRkcmVzcyxMYXRMb25nLE5laWdoYm9yaG9vZCxEaXN0cmljdCxDaXR5LE1ldHJvIEFyZWEnLFxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdGhpcy5tYXBTZWFyY2ggPSAoTC5Db250cm9sIGFzIHVua25vd24gYXMgeyBnZW9jb2RlcjogdHlwZW9mIGdlb2NvZGVyIH0pLmdlb2NvZGVyKHtcclxuICAgICAgICAgICAgcG9zaXRpb246ICd0b3BsZWZ0JyxcclxuICAgICAgICAgICAgY29sbGFwc2VkOiB0cnVlLFxyXG4gICAgICAgICAgICBkZWZhdWx0TWFya0dlb2NvZGU6IGZhbHNlLFxyXG4gICAgICAgICAgICBnZW9jb2RlcjogbWFwR2VvY29kZXIsXHJcbiAgICAgICAgICAgIHN1Z2dlc3RNaW5MZW5ndGg6IDUsXHJcbiAgICAgICAgICAgIHN1Z2dlc3RUaW1lb3V0OiAxMDAwLFxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICB0aGlzLm1hcFNlYXJjaC5vbignbWFya2dlb2NvZGUnLCAoZXZlbnQ6IGFueSkgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCBiYm94ID0gZXZlbnQuZ2VvY29kZS5iYm94O1xyXG4gICAgICAgICAgICB0aGlzLm1hcC5maXRCb3VuZHMoYmJveCwge1xyXG4gICAgICAgICAgICAgICAgJ21heFpvb20nOiAxNixcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHRoaXMubWFwU2VhcmNoLmFkZFRvKHRoaXMubWFwKTtcclxuXHJcblxyXG4gICAgICAgIC8vIEFkZCBsb2NhdGUgY29udHJvbFxyXG4gICAgICAgIHRoaXMubWFwTG9jYXRlID0gTC5jb250cm9sLmxvY2F0ZSh7XHJcbiAgICAgICAgICAgIHBvc2l0aW9uOiAndG9wbGVmdCcsXHJcbiAgICAgICAgICAgIGxvY2F0ZU9wdGlvbnM6IHtcclxuICAgICAgICAgICAgICAgIG1heFpvb206IDE2XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHNldFZpZXc6ICd1bnRpbFBhbicsXHJcbiAgICAgICAgICAgIGtlZXBDdXJyZW50Wm9vbUxldmVsOiB0cnVlLFxyXG4gICAgICAgICAgICBpbml0aWFsWm9vbUxldmVsOiAxNyxcclxuICAgICAgICAgICAgY2FjaGVMb2NhdGlvbjogdHJ1ZSxcclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzLm1hcExvY2F0ZS5hZGRUbyh0aGlzLm1hcCk7XHJcbiAgICAgICAgdGhpcy5tYXAub24oJ2xvY2F0ZWFjdGl2YXRlJywgKCkgPT4geyBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgnZ2VvbG9jYXRlJywgJzEnKTsgfSk7XHJcbiAgICAgICAgdGhpcy5tYXAub24oJ2xvY2F0ZWRlYWN0aXZhdGUnLCAoKSA9PiB7IGxvY2FsU3RvcmFnZS5yZW1vdmVJdGVtKCdnZW9sb2NhdGUnKTsgfSk7XHJcblxyXG4gICAgICAgIHRoaXMuc2V0SW5pdGlhbE1hcFZpZXcoKTtcclxuICAgICAgICBcclxuICAgICAgICAvLyBzdG9yZSBtYXAgcG9zaXRpb24gd2hlbiBtb3ZlZCBvciB6b29tZWRcclxuICAgICAgICB0aGlzLm1hcC5vbignbW92ZWVuZCcsIGFzeW5jICgpID0+IHtcclxuICAgICAgICAgICAgY29uc3QgY2VudGVyID0gdGhpcy5tYXAuZ2V0Q2VudGVyKCk7XHJcbiAgICAgICAgICAgIGNvbnN0IHpvb20gPSB0aGlzLm1hcC5nZXRab29tKCk7XHJcbiAgICAgICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCdzdGFydHBvcycsIEpTT04uc3RyaW5naWZ5KHsgbGF0OiBjZW50ZXIubGF0LCBsbmc6IGNlbnRlci5sbmcsIHpvb20gfSkpO1xyXG4gICAgICAgICAgICB0aGlzLnB1c2hCcm93c2VySGlzdG9yeSgpO1xyXG5cclxuICAgICAgICAgICAgaWYgKG1hcEdlb2NvZGVyLm9wdGlvbnMuZ2VvY29kaW5nUXVlcnlQYXJhbXMpIHtcclxuICAgICAgICAgICAgICAgIG1hcEdlb2NvZGVyLm9wdGlvbnMuZ2VvY29kaW5nUXVlcnlQYXJhbXMubG9jYXRpb24gPSBgJHtjZW50ZXIubG5nfSwke2NlbnRlci5sYXR9YDtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy9hd2FpdCB0aGlzLmRpc3BsYXlNYXJrZXJzSW5DdXJyZW50VmlldygpO1xyXG4gICAgICAgICAgICB0aGlzLmZldGNoRGF0YUZvckN1cnJlbnRWaWV3KCk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHRoaXMuZmV0Y2hEYXRhRm9yQ3VycmVudFZpZXcoKTtcclxuXHJcbiAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3BvcHN0YXRlJywgKCkgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCB1cmxQYXJhbXMgPSBuZXcgVVJMU2VhcmNoUGFyYW1zKHdpbmRvdy5sb2NhdGlvbi5zZWFyY2gpO1xyXG4gICAgICAgICAgICBjb25zdCBsYXQgPSB1cmxQYXJhbXMuZ2V0KCdsYXQnKTtcclxuICAgICAgICAgICAgY29uc3QgbG5nID0gdXJsUGFyYW1zLmdldCgnbG5nJyk7XHJcbiAgICAgICAgICAgIGNvbnN0IHpvb20gPSB1cmxQYXJhbXMuZ2V0KCd6b29tJyk7XHJcbiAgICAgICAgICAgIGlmIChsYXQgJiYgbG5nICYmIHpvb20pIHtcclxuICAgICAgICAgICAgICAgIHRoaXMubWFwLnNldFZpZXcoWyBOdW1iZXIobGF0KSwgTnVtYmVyKGxuZykgXSwgcGFyc2VJbnQoem9vbSkpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5pbml0aWFsVmlld1NldCA9IHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgICBcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIHB1c2hCcm93c2VySGlzdG9yeSgpIHtcclxuXHJcbiAgICAgICAgLy8gVXBkYXRlIGV4aXN0aW5nIFVSTCB3aXRoIGxhdCxsbmcsem9vbVxyXG4gICAgICAgIGNvbnN0IGNlbnRlciA9IHRoaXMubWFwLmdldENlbnRlcigpO1xyXG4gICAgICAgIGNvbnN0IHpvb20gPSB0aGlzLm1hcC5nZXRab29tKCk7XHJcblxyXG4gICAgICAgIGNvbnN0IHVybFBhcmFtcyA9IG5ldyBVUkxTZWFyY2hQYXJhbXMod2luZG93LmxvY2F0aW9uLnNlYXJjaCk7XHJcbiAgICAgICAgdXJsUGFyYW1zLnNldCgnbGF0JywgY2VudGVyLmxhdC50b1N0cmluZygpKTtcclxuICAgICAgICB1cmxQYXJhbXMuc2V0KCdsbmcnLCBjZW50ZXIubG5nLnRvU3RyaW5nKCkpO1xyXG4gICAgICAgIHVybFBhcmFtcy5zZXQoJ3pvb20nLCB6b29tLnRvU3RyaW5nKCkpO1xyXG4gICAgICAgIGNvbnN0IG5ld1VybCA9IHdpbmRvdy5sb2NhdGlvbi5wYXRobmFtZSArICc/JyArIHVybFBhcmFtcy50b1N0cmluZygpO1xyXG5cclxuICAgICAgICB3aW5kb3cuaGlzdG9yeS5wdXNoU3RhdGUoe30sICcnLCBuZXdVcmwpO1xyXG4gICAgICAgIFxyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgZ2V0U3RhcnRQb3MoKSA6IHsgbGF0OiBudW1iZXIsIGxuZzogbnVtYmVyLCB6b29tOiBudW1iZXIgfSB8IG51bGwge1xyXG4gICAgICAgIGNvbnN0IHN0YXJ0UG9zU3RyaW5nID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oJ3N0YXJ0cG9zJyk7XHJcbiAgICAgICAgaWYgKCFzdGFydFBvc1N0cmluZykge1xyXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICB9XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgcmV0dXJuIEpTT04ucGFyc2Uoc3RhcnRQb3NTdHJpbmcpIGFzIHsgbGF0OiBudW1iZXIsIGxuZzogbnVtYmVyLCB6b29tOiBudW1iZXIgfTtcclxuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBpbml0aWFsVmlld1NldCA9IGZhbHNlO1xyXG4gICAgcHJpdmF0ZSBzZXRJbml0aWFsTWFwVmlldygpIHtcclxuXHJcbiAgICAgICAgY29uc3QgbG9nZ2VyID0gdGhpcy5sb2dnZXIuc3ViKCdzZXRJbml0aWFsTWFwVmlldycpO1xyXG5cclxuICAgICAgICBpZiAodGhpcy5pbml0aWFsVmlld1NldCkge1xyXG4gICAgICAgICAgICBsb2dnZXIud2FybignSW5pdGlhbCBtYXAgdmlldyBhbHJlYWR5IHNldCcpO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBJZiBsYXQsbG5nLHpvb20gYXJlIGluIFVSTCwgc2V0IG1hcCB0byB0aGF0XHJcbiAgICAgICAgY29uc3QgdXJsUGFyYW1zID0gbmV3IFVSTFNlYXJjaFBhcmFtcyh3aW5kb3cubG9jYXRpb24uc2VhcmNoKTtcclxuICAgICAgICBjb25zdCBsYXQgPSB1cmxQYXJhbXMuZ2V0KCdsYXQnKTtcclxuICAgICAgICBjb25zdCBsbmcgPSB1cmxQYXJhbXMuZ2V0KCdsbmcnKTtcclxuICAgICAgICBjb25zdCB6b29tID0gdXJsUGFyYW1zLmdldCgnem9vbScpO1xyXG4gICAgICAgIGlmIChsYXQgJiYgbG5nICYmIHpvb20pIHtcclxuICAgICAgICAgICAgdGhpcy5tYXAuc2V0VmlldyhbIE51bWJlcihsYXQpLCBOdW1iZXIobG5nKSBdLCBwYXJzZUludCh6b29tKSk7XHJcbiAgICAgICAgICAgIHRoaXMuaW5pdGlhbFZpZXdTZXQgPSB0cnVlO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zdCBnZW9GbGFnID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oJ2dlb2xvY2F0ZScpO1xyXG4gICAgICAgIGNvbnN0IHN0YXJ0UG9zID0gdGhpcy5nZXRTdGFydFBvcygpO1xyXG5cclxuICAgICAgICAvLyBJZiBsb2NhbCBzdG9yYWdlIGNvbnRhaW5zIGxhc3QgbWFwIHBvc2l0aW9uLCBzZXQgbWFwIHRvIHRoYXRcclxuICAgICAgICBpZiAoc3RhcnRQb3MpIHtcclxuICAgICAgICAgICAgdGhpcy5tYXAuc2V0VmlldyhbIHN0YXJ0UG9zLmxhdCwgc3RhcnRQb3MubG5nIF0sIHN0YXJ0UG9zLnpvb20pO1xyXG4gICAgICAgICAgICB0aGlzLmluaXRpYWxWaWV3U2V0ID0gdHJ1ZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIFNldCB0byBBdXN0cmFsaWEgaWYgbm8gc3RhcnQgcG9zaXRpb25cclxuICAgICAgICBpZiAoIXN0YXJ0UG9zKSB7XHJcbiAgICAgICAgICAgIHRoaXMubWFwLnNldFZpZXcoWyAtMjYuMTc3MjI4OCwgMTMzLjQxNzAxMTkgXSwgMTApO1xyXG4gICAgICAgICAgICB0aGlzLmluaXRpYWxWaWV3U2V0ID0gdHJ1ZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIElmIGxvY2FsIHN0b3JhZ2UgY29udGFpbnMgZ2VvbG9jYXRlIGZsYWdcclxuICAgICAgICAvLyBvciwgaWYgbm8gc3RhcnQgcG9zaXRpb24sIHN0YXJ0IGdlb2xvY2F0aW9uXHJcbiAgICAgICAgaWYgKGdlb0ZsYWcgfHwgIXN0YXJ0UG9zKSB7XHJcbiAgICAgICAgICAgIHRoaXMubWFwTG9jYXRlLnN0YXJ0KCk7XHJcbiAgICAgICAgICAgIHRoaXMubWFwLnNldFpvb20oMTcpO1xyXG4gICAgICAgICAgICB0aGlzLmluaXRpYWxWaWV3U2V0ID0gdHJ1ZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICghdGhpcy5pbml0aWFsVmlld1NldCkge1xyXG4gICAgICAgICAgICBsb2dnZXIuZXJyb3IoJ0NvdWxkIG5vdCBzZXQgaW5pdGlhbCBtYXAgdmlldycpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICB9XHJcblxyXG4gICAgZ2V0Qm94ZXNJbkJvdW5kcyhib3VuZHM6IEwuTGF0TG5nQm91bmRzKTogTC5MYXRMbmdCb3VuZHNbXSB7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgIC8vIFN0YXJ0aW5nIHBvaW50IHNob3VsZCBiZSB0aGUgbm9ydGgtd2VzdCBjb3JuZXIgb2YgdGhlIG1hcCByb3VuZGVkIGJleW9uZCB0aGUgbWFwIGJvdW5kc1xyXG4gICAgICAgIC8vIExhdGl0dWRlIGlzIHJvdW5kZWQgdG8gMiBkZWNpbWFsIHBsYWNlcyBtdWx0aXBsZSBvZiAwLjAyXHJcbiAgICAgICAgLy8gTG9uZ2l0dWRlIGlzIHJvdW5kZWQgdG8gMiBkZWNpbWFsIHBsYWNlcyBtdWx0aXBsZSBvZiAwLjA0XHJcbiAgICAgICAgY29uc3Qgbm9ydGhtb3N0ID0gTWF0aC5jZWlsKGJvdW5kcy5nZXROb3J0aCgpICogNTApIC8gNTA7XHJcbiAgICAgICAgY29uc3Qgd2VzdG1tb3N0ID0gTWF0aC5mbG9vcihib3VuZHMuZ2V0V2VzdCgpICogMjUpIC8gMjU7XHJcblxyXG4gICAgICAgIC8vIHNwbGl0IG1hcCBpbnRvIGJveGVzIHN0YXJ0aW5nIGZyb20gbm9ydGgtd2VzdCBjb3JuZXJcclxuICAgICAgICAvLyBlYWNoIGJveCBzaG91bGQgYmUgMC4wMiBkZWdyZWVzIGxhdGl0dWRlIGJ5IDAuMDQgZGVncmVlcyBsb25naXR1ZGVcclxuICAgICAgICBjb25zdCBib3hlcyA9IFtdO1xyXG4gICAgICAgIGZvciAobGV0IGxhdGl0dWRlID0gbm9ydGhtb3N0OyBsYXRpdHVkZSA+IGJvdW5kcy5nZXRTb3V0aCgpOyBsYXRpdHVkZSAtPSAwLjAyKSB7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGxvbmdpdHVkZSA9IHdlc3RtbW9zdDsgbG9uZ2l0dWRlIDwgYm91bmRzLmdldEVhc3QoKTsgbG9uZ2l0dWRlICs9IDAuMDQpIHtcclxuICAgICAgICAgICAgICAgIGJveGVzLnB1c2goW2xhdGl0dWRlLCBsb25naXR1ZGVdKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gTWFwIGVhY2ggYm94IGludG8gYSBib3VuZHMgb2JqZWN0XHJcbiAgICAgICAgY29uc3QgYm94Qm91bmRzID0gYm94ZXMubWFwKGJveCA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IG5vcnRoID0gYm94WzBdO1xyXG4gICAgICAgICAgICBjb25zdCB3ZXN0ID0gYm94WzFdO1xyXG4gICAgICAgICAgICBjb25zdCBzb3V0aCA9IG5vcnRoIC0gMC4wMjtcclxuICAgICAgICAgICAgY29uc3QgZWFzdCA9IHdlc3QgKyAwLjA0O1xyXG4gICAgICAgICAgICByZXR1cm4gTC5sYXRMbmdCb3VuZHMoW3NvdXRoLCB3ZXN0XSwgW25vcnRoLCBlYXN0XSk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHJldHVybiBib3hCb3VuZHM7XHJcblxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogRmV0Y2ggYm94ZXMgdGhhdCBhcmUgdmlzaWJsZSBvbiB0aGUgbWFwXHJcbiAgICAgKi9cclxuICAgIGdldEN1cnJlbnRWaWV3Qm94ZXMoKTogTC5MYXRMbmdCb3VuZHNbXVxyXG4gICAge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmdldEJveGVzSW5Cb3VuZHModGhpcy5tYXAuZ2V0Qm91bmRzKCkpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogSGlkZSBtYXJrZXJzIHRoYXQgYXJlIG91dHNpZGUgdGhlIG1hcCBib3VuZHNcclxuICAgICAqL1xyXG4gICAgaGlkZU1hcmtlcnNPdXRzaWRlQ3VycmVudFZpZXcoKSB7XHJcbiAgICAgICAgY29uc3QgbWFwQm91bmRzID0gdGhpcy5tYXAuZ2V0Qm91bmRzKCkucGFkKDAuNSk7XHJcbiAgICAgICAgdGhpcy5tYXJrZXJMYXllci5yZW1vdmVNYXJrZXJzT3V0c2lkZUJvdW5kcyhtYXBCb3VuZHMpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogRGlzcGxheSBtYXJrZXJzIHRoYXQgYXJlIGluc2lkZSB0aGUgbWFwIGJvdW5kc1xyXG4gICAgICovXHJcbiAgICBhc3luYyBERVBfZGlzcGxheU1hcmtlcnNJbkN1cnJlbnRWaWV3KGF0dGVtcHQ6IG51bWJlciA9IDEpIHtcclxuXHJcbiAgICAgICAgLypcclxuICAgICAgICBpZiAodGhpcy5kYXRhc3RvcmUuaXNSZWFkeSgpID09PSBmYWxzZSkge1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgaWYgKGF0dGVtcHQgPiAxMCkge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcignQ291bGQgbm90IGdldCBkYXRhc3RvcmUgcmVhZHkuIEdpdmluZyB1cC4nKTtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgY29uc29sZS53YXJuKCdEYXRhc3RvcmUgaXMgbm90IHJlYWR5LiBEZWxheWluZyBkaXNwbGF5TWFya2Vyc0luQ3VycmVudFZpZXcoKScpO1xyXG4gICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHRoaXMuZGlzcGxheU1hcmtlcnNJbkN1cnJlbnRWaWV3KGF0dGVtcHQrMSksIDEwMDApO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zb2xlLmxvZygnRGlzcGxheWluZyBtYXJrZXJzIGluIGN1cnJlbnQgdmlldycpO1xyXG4gICAgICAgIGNvbnN0IG1hcEJvdW5kcyA9IHJvdW5kQm91bmRzKHRoaXMubWFwLmdldEJvdW5kcygpKTtcclxuICAgICAgICBcclxuICAgICAgICBjb25zb2xlLmxvZygnRmV0Y2hpbmcgZnJvbSBEYXRhc3RvcmUnLCBtYXBCb3VuZHMpO1xyXG4gICAgICAgIC8vIHRoaXMucmVmcmVzaFBvaW50c0Zyb21TdG9yZShtYXBCb3VuZHMpO1xyXG4gICAgICAgICovXHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSB6b29tSW5XYXJuaW5nQ29udHJvbD86IEwuQ29udHJvbDtcclxuXHJcbiAgICBzaG93Wm9vbUluV2FybmluZygpIHtcclxuICAgICAgICBpZighdGhpcy56b29tSW5XYXJuaW5nQ29udHJvbCkge1xyXG4gICAgICAgICAgICB0aGlzLnpvb21Jbldhcm5pbmdDb250cm9sID0gbmV3IEwuQ29udHJvbCh7IHBvc2l0aW9uOiAndG9wcmlnaHQnIH0pO1xyXG4gICAgICAgICAgICB0aGlzLnpvb21Jbldhcm5pbmdDb250cm9sLm9uQWRkID0gKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZGl2ID0gTC5Eb21VdGlsLmNyZWF0ZSgnZGl2JywgJ2luZm8gbGVnZW5kJyk7XHJcbiAgICAgICAgICAgICAgICBkaXYuaW5uZXJIVE1MID0gJzxoNCBzdHlsZT1cIm1hcmdpbjowXCI+QXJlYSBUb28gQmlnITwvaDQ+JztcclxuICAgICAgICAgICAgICAgIGRpdi5pbm5lckhUTUwgKz0gJzxwIHN0eWxlPVwibWFyZ2luOjBcIj5Mb2NhdGlvbiBsb2FkaW5nIGlzIHBhdXNlZCB1bnRpbCB5b3Ugem9vbSBpbi48L3A+JztcclxuICAgICAgICAgICAgICAgIGRpdi5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSAnI2ZmOTgwMCc7XHJcbiAgICAgICAgICAgICAgICBkaXYuc3R5bGUub3BhY2l0eSA9ICcwLjgnO1xyXG4gICAgICAgICAgICAgICAgZGl2LnN0eWxlLnBhZGRpbmcgPSAnMTBweCAyMHB4JztcclxuICAgICAgICAgICAgICAgIGRpdi5zdHlsZS5jb2xvciA9ICcjZmZmZmZmJztcclxuICAgICAgICAgICAgICAgIHJldHVybiBkaXY7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3Qgem9vbUluV2FybmluZ0NvbnRyb2wgPSB0aGlzLnpvb21Jbldhcm5pbmdDb250cm9sO1xyXG4gICAgICAgIHNldFRpbWVvdXQoKCkgPT4gdGhpcy5tYXAuYWRkQ29udHJvbCh6b29tSW5XYXJuaW5nQ29udHJvbCksIDEwMDApO1xyXG4gICAgfVxyXG4gICAgaGlkZVpvb21Jbldhcm5pbmcoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuem9vbUluV2FybmluZ0NvbnRyb2wpIHtcclxuICAgICAgICAgICAgdGhpcy5tYXAucmVtb3ZlQ29udHJvbCh0aGlzLnpvb21Jbldhcm5pbmdDb250cm9sKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBmZXRjaGVkQm94ZXM6IFNldDxzdHJpbmc+ID0gbmV3IFNldCgpO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogRmV0Y2ggZGF0YSBmb3IgY3VycmVudCBtYXAgdmlld1xyXG4gICAgICovXHJcbiAgICBhc3luYyBmZXRjaERhdGFGb3JDdXJyZW50VmlldygpIHtcclxuXHJcbiAgICAgICAgY29uc3QgbG9nZ2VyID0gdGhpcy5sb2dnZXIuc3ViKCdmZXRjaERhdGFGb3JDdXJyZW50VmlldycpO1xyXG5cclxuICAgICAgICAvL3RoaXMuaGlkZU1hcmtlcnNPdXRzaWRlQ3VycmVudFZpZXcoKTtcclxuICAgICAgICAvL3RoaXMuZGlzcGxheU1hcmtlcnNJbkN1cnJlbnRWaWV3KCk7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLm1hcC5nZXRab29tKCkgPCAxMSkge1xyXG4gICAgICAgICAgICBsb2dnZXIud2FybignWm9vbSBsZXZlbCB0b28gbG93LiBTa2lwcGluZy4nKTtcclxuICAgICAgICAgICAgdGhpcy5zaG93Wm9vbUluV2FybmluZygpO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBHZXQgYm94ZXMgdGhhdCBhcmUgY3VycmVudGx5IHZpc2libGVcclxuICAgICAgICBjb25zdCBib3hlcyA9IHRoaXMuZ2V0Q3VycmVudFZpZXdCb3hlcygpO1xyXG4gICAgICAgIGxvZ2dlci5kZWJ1ZygnQ3VycmVudCB2aWV3IGJveGVzJywgYm94ZXMpO1xyXG5cclxuICAgICAgICAvLyBGaWx0ZXIgb3V0IGJveGVzIHRoYXQgaGF2ZSBhbHJlYWR5IGJlZW4gZmV0Y2hlZFxyXG4gICAgICAgIGNvbnN0IHVuZmV0Y2hlZEJveGVzID0gYm94ZXMuZmlsdGVyKGJveCA9PiAhdGhpcy5mZXRjaGVkQm94ZXMuaGFzKGJveC5nZXRDZW50ZXIoKS50b1N0cmluZygpKSk7XHJcblxyXG4gICAgICAgIC8vIElmIG5vIGJveGVzIHRvIGZldGNoLCByZXR1cm5cclxuICAgICAgICBpZiAodW5mZXRjaGVkQm94ZXMubGVuZ3RoID09IDApIHtcclxuICAgICAgICAgICAgdGhpcy5oaWRlWm9vbUluV2FybmluZygpO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBEb24ndCBmZXRjaCBib3hlcyBpZiBtb3JlIHRoYW4gNTBcclxuICAgICAgICBpZiAodW5mZXRjaGVkQm94ZXMubGVuZ3RoID4gdGhpcy5NQVhfVU5GRVRDSEVEX0JPWEVTKSB7XHJcbiAgICAgICAgICAgIGxvZ2dlci53YXJuKCdUb28gbWFueSBib3hlcyB0byBmZXRjaC4gU2tpcHBpbmcuJyk7XHJcbiAgICAgICAgICAgIHRoaXMuc2hvd1pvb21Jbldhcm5pbmcoKTtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gSGlkZSB6b29tIGluIHdhcm5pbmdcclxuICAgICAgICB0aGlzLmhpZGVab29tSW5XYXJuaW5nKCk7XHJcblxyXG4gICAgICAgIC8vIFNldCB1cGRhdGUga2V5XHJcbiAgICAgICAgY29uc3QgdXBkYXRlS2V5ID0gdGhpcy5tYXAuZ2V0Q2VudGVyKCkudG9TdHJpbmcoKSArIHRoaXMubWFwLmdldFpvb20oKTtcclxuXHJcbiAgICAgICAgLy8gQ3JlYXRlIHByb2dyZXNzIGl0ZW1cclxuICAgICAgICBjb25zdCBwcm9ncmVzc0l0ZW0gPSB0aGlzLmNyZWF0ZVByb2dyZXNzKHVwZGF0ZUtleSwgdW5mZXRjaGVkQm94ZXMubGVuZ3RoLCAnRmV0Y2hpbmcgc2VjdGlvbnMuLi4nKTtcclxuICAgICAgICB0aGlzLnJlbmRlclByb2dyZXNzKCk7XHJcblxyXG4gICAgICAgIGxldCBib3hlc1Byb2Nlc3NlZCA9IDA7XHJcblxyXG4gICAgICAgIC8vIEZvciBlYWNoIGJveCwgZmV0Y2ggZGF0YVxyXG4gICAgICAgIGZvciAoY29uc3QgYm94IG9mIHVuZmV0Y2hlZEJveGVzKSB7XHJcblxyXG4gICAgICAgICAgICBpZiAodGhpcy5tYXAuZ2V0Q2VudGVyKCkudG9TdHJpbmcoKSArIHRoaXMubWFwLmdldFpvb20oKSAhPSB1cGRhdGVLZXkpIHtcclxuICAgICAgICAgICAgICAgIGxvZ2dlci5kZWJ1ZygnTWFwIG1vdmVkLiBGZXRjaCBzdG9wcGVkLicpO1xyXG4gICAgICAgICAgICAgICAgcHJvZ3Jlc3NJdGVtLnRleHQgPSAnTWFwIG1vdmVkLiBGZXRjaCBzdG9wcGVkLic7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZVByb2dyZXNzKHVwZGF0ZUtleSwgYm94ZXNQcm9jZXNzZWQsIHRydWUpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBhd2FpdCB0aGlzLmZldGNoRGF0YShib3gpO1xyXG4gICAgICAgICAgICB0aGlzLmZldGNoZWRCb3hlcy5hZGQoYm94LmdldENlbnRlcigpLnRvU3RyaW5nKCkpO1xyXG4gICAgICAgICAgICBib3hlc1Byb2Nlc3NlZCsrO1xyXG4gICAgICAgICAgICB0aGlzLnVwZGF0ZVByb2dyZXNzKHVwZGF0ZUtleSwgYm94ZXNQcm9jZXNzZWQsIGZhbHNlKTtcclxuXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLnVwZGF0ZVByb2dyZXNzKHVwZGF0ZUtleSwgYm94ZXNQcm9jZXNzZWQsIHRydWUpO1xyXG4gICAgICAgIGxvZ2dlci5kZWJ1ZygnQWxsIGJveGVzIGZldGNoZWQnKTtcclxuXHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBwcm9ncmVzc0NvbnRyb2wgPSBuZXcgTC5Db250cm9sKHsgcG9zaXRpb246ICdib3R0b21sZWZ0JyB9KTtcclxuICAgIHByaXZhdGUgcHJvZ3Jlc3NJdGVtczoge1xyXG4gICAgICAgIFtrZXk6IHN0cmluZ106IHtcclxuICAgICAgICAgICAgc3RhcnRlZDogRGF0ZSxcclxuICAgICAgICAgICAgZmluaXNoZWQ/OiBEYXRlLFxyXG4gICAgICAgICAgICB0ZXh0OiBzdHJpbmcsXHJcbiAgICAgICAgICAgIGNvbXBsZXRlOiBib29sZWFuLFxyXG4gICAgICAgICAgICBwcm9ncmVzczogbnVtYmVyLFxyXG4gICAgICAgICAgICB0b3RhbDogbnVtYmVyLFxyXG4gICAgICAgIH1cclxuICAgIH0gPSB7fTtcclxuXHJcbiAgICBwcml2YXRlIGNyZWF0ZVByb2dyZXNzKGtleTogc3RyaW5nLCB0b3RhbDogbnVtYmVyLCB0ZXh0OiBzdHJpbmcpIHtcclxuICAgICAgICAvLyBDcmVhdGUgbmV3IGl0ZW1cclxuICAgICAgICB0aGlzLnByb2dyZXNzSXRlbXNba2V5XSA9IHtcclxuICAgICAgICAgICAgc3RhcnRlZDogbmV3IERhdGUoKSxcclxuICAgICAgICAgICAgZmluaXNoZWQ6IHVuZGVmaW5lZCxcclxuICAgICAgICAgICAgY29tcGxldGU6IGZhbHNlLFxyXG4gICAgICAgICAgICBwcm9ncmVzczogMCxcclxuICAgICAgICAgICAgdG90YWwsIHRleHRcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRoaXMucHJvZ3Jlc3NJdGVtc1trZXldO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgdXBkYXRlUHJvZ3Jlc3Moa2V5OiBzdHJpbmcsIHByb2dyZXNzOiBudW1iZXIsIGNvbXBsZXRlOiBib29sZWFuKSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLnByb2dyZXNzSXRlbXNba2V5XSkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFByb2dyZXNzIGl0ZW0gd2l0aCBrZXkgJHtrZXl9IGRvZXMgbm90IGV4aXN0YCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMucHJvZ3Jlc3NJdGVtc1trZXldLmZpbmlzaGVkID0gY29tcGxldGUgPyBuZXcgRGF0ZSgpIDogdW5kZWZpbmVkO1xyXG4gICAgICAgIHRoaXMucHJvZ3Jlc3NJdGVtc1trZXldLmNvbXBsZXRlID0gY29tcGxldGU7XHJcbiAgICAgICAgdGhpcy5wcm9ncmVzc0l0ZW1zW2tleV0ucHJvZ3Jlc3MgPSBwcm9ncmVzcztcclxuICAgICAgICB0aGlzLnJlbmRlclByb2dyZXNzKCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSByZW5kZXJQcm9ncmVzcygpIHtcclxuXHJcbiAgICAgICAgLy8gRGVsZXRlIGl0ZW1zIGZpbmlzaGVkIG1vcmUgdGhhbiA1IHNlY29uZHMgYWdvXHJcbiAgICAgICAgY29uc3Qgbm93ID0gbmV3IERhdGUoKTtcclxuICAgICAgICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXModGhpcy5wcm9ncmVzc0l0ZW1zKTtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgY29uc3Qga2V5ID0ga2V5c1tpXTtcclxuICAgICAgICAgICAgaWYgKCF0aGlzLnByb2dyZXNzSXRlbXNba2V5XSkgY29udGludWU7XHJcbiAgICAgICAgICAgIGNvbnN0IGZpbmlzaGVkID0gdGhpcy5wcm9ncmVzc0l0ZW1zW2tleV0uZmluaXNoZWQ7XHJcbiAgICAgICAgICAgIGlmIChmaW5pc2hlZCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKChub3cuZ2V0VGltZSgpIC0gZmluaXNoZWQuZ2V0VGltZSgpKSA+IDUwMDApIHtcclxuICAgICAgICAgICAgICAgICAgICBkZWxldGUgdGhpcy5wcm9ncmVzc0l0ZW1zW2tleV07XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIElmIG5vIGl0ZW1zLCBoaWRlIHByb2dyZXNzXHJcbiAgICAgICAgaWYgKE9iamVjdC5rZXlzKHRoaXMucHJvZ3Jlc3NJdGVtcykubGVuZ3RoID09IDApIHtcclxuICAgICAgICAgICAgdGhpcy5oaWRlUHJvZ3Jlc3MoKTtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gUmVuZGVyIHByb2dyZXNzXHJcbiAgICAgICAgdGhpcy5wcm9ncmVzc0NvbnRyb2wub25BZGQgPSAoKSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IGRpdiA9IEwuRG9tVXRpbC5jcmVhdGUoJ2RpdicsICdpbmZvIGxlZ2VuZCcpO1xyXG4gICAgICAgICAgICBkaXYuaW5uZXJIVE1MID0gJzxoNCBzdHlsZT1cIm1hcmdpbjowXCI+TG9hZGluZy4uLjwvaDQ+JztcclxuICAgICAgICAgICAgY29uc3QgaXRlbXMgPSBPYmplY3QudmFsdWVzKHRoaXMucHJvZ3Jlc3NJdGVtcyk7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgaXRlbXMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGl0ZW0gPSBpdGVtc1tpXTtcclxuICAgICAgICAgICAgICAgIC8vIHNraXAgaXRlbSBpZiBmaW5pc2hlZCBtb3JlIHRoYW4gMTAgc2Vjb25kcyBhZ29cclxuICAgICAgICAgICAgICAgIGlmIChpdGVtLmZpbmlzaGVkICYmIChuZXcgRGF0ZSgpLmdldFRpbWUoKSAtIGl0ZW0uZmluaXNoZWQuZ2V0VGltZSgpID4gMTAwMDApKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBjb25zdCBwcm9ncmVzcyA9IGl0ZW0ucHJvZ3Jlc3MgLyBpdGVtLnRvdGFsICogMTAwO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgcHJvZ3Jlc3NUZXh0ID0gaXRlbS5jb21wbGV0ZSA/ICdDb21wbGV0ZScgOiBgJHtpdGVtLnByb2dyZXNzfSBvZiAke2l0ZW0udG90YWx9YDtcclxuICAgICAgICAgICAgICAgIGRpdi5pbm5lckhUTUwgKz0gYDxwIHN0eWxlPVwibWFyZ2luOjBcIj4ke2l0ZW0udGV4dH0gKCR7cHJvZ3Jlc3NUZXh0fSk8L3A+YDtcclxuICAgICAgICAgICAgICAgIGRpdi5pbm5lckhUTUwgKz0gYDxwcm9ncmVzcyB2YWx1ZT1cIiR7cHJvZ3Jlc3N9XCIgbWF4PVwiMTAwXCI+PC9wcm9ncmVzcz5gO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGRpdi5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSAnIzAwMDAwMCc7XHJcbiAgICAgICAgICAgIGRpdi5zdHlsZS5vcGFjaXR5ID0gJzAuOCc7XHJcbiAgICAgICAgICAgIGRpdi5zdHlsZS5wYWRkaW5nID0gJzEwcHggMjBweCc7XHJcbiAgICAgICAgICAgIGRpdi5zdHlsZS5jb2xvciA9ICcjZmZmZmZmJztcclxuICAgICAgICAgICAgcmV0dXJuIGRpdjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIEFkZCBwcm9ncmVzcyB0byBtYXBcclxuICAgICAgICB0aGlzLm1hcC5hZGRDb250cm9sKHRoaXMucHJvZ3Jlc3NDb250cm9sKTtcclxuXHJcbiAgICAgICAgLy8gSGlkZSBwcm9ncmVzcyBhZnRlciA1IHNlY29uZHMgaWYgYWxsIGNvbXBsZXRlXHJcbiAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgICAgIGlmIChPYmplY3QudmFsdWVzKHRoaXMucHJvZ3Jlc3NJdGVtcykuZXZlcnkoaXRlbSA9PiBpdGVtLmNvbXBsZXRlKSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5oaWRlUHJvZ3Jlc3MoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sIDUwMDApO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgaGlkZVByb2dyZXNzKCkge1xyXG4gICAgICAgIHRoaXMubWFwLnJlbW92ZUNvbnRyb2wodGhpcy5wcm9ncmVzc0NvbnRyb2wpO1xyXG4gICAgfVxyXG5cclxuICAgIGFzeW5jIGZldGNoRGF0YShcclxuICAgICAgICBib3VuZHM6IEwuTGF0TG5nQm91bmRzLCBwYWdlOiBudW1iZXIgPSAxXHJcbiAgICApIDogUHJvbWlzZTx2b2lkPlxyXG4gICAge1xyXG4gICAgICAgIGNvbnN0IGxvZ2dlciA9IHRoaXMubG9nZ2VyLnN1YignZmV0Y2hEYXRhJyk7XHJcblxyXG4gICAgICAgIGxvZ2dlci5kZWJ1ZygnRmV0Y2hpbmcgQm94JywgYm91bmRzLmdldENlbnRlcigpLnRvU3RyaW5nKCksIHBhZ2UpO1xyXG5cclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgY29uc3QgZGF0YSA9IGF3YWl0IHRoaXMuYXBpLmZldGNoUGFnZShib3VuZHMsIHBhZ2UsICgpID0+IHRoaXMubWFwLmdldEJvdW5kcygpLmludGVyc2VjdHMoYm91bmRzKSk7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICB0aGlzLnByb2Nlc3NGZXRjaFJlc3VsdChkYXRhLCBib3VuZHMpO1xyXG5cclxuICAgICAgICAgICAgaWYgKGRhdGEubmV4dCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuZmV0Y2hEYXRhKGJvdW5kcywgZGF0YS5uZXh0KTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcmV0dXJuO1xyXG5cclxuICAgICAgICB9IGNhdGNoIChlcnJvcjogYW55KSB7XHJcbiAgICAgICAgICAgIGlmIChlcnJvci5tZXNzYWdlID09ICdQYWdlIGFscmVhZHkgbG9hZGVkIHRoaXMgc2Vzc2lvbi4nKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY29uc29sZS5lcnJvcihlcnJvcilcclxuICAgICAgICB9XHJcblxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogUHJvY2VzcyBSZXN1bHRzIEZldGNoZWQgZnJvbSBBUElcclxuICAgICAqIFN0b3JlcyBwbGFjZXMgaW4gcGxhY2Ugc3RvcmVcclxuICAgICAqIFNlbmRzIHBvaW50cyB0byBtYXJrZXIgbGF5ZXJcclxuICAgICAqIEBwYXJhbSByZXN1bHQgXHJcbiAgICAgKiBAcGFyYW0gYm91bmRzIFxyXG4gICAgICovXHJcbiAgICBwcm9jZXNzRmV0Y2hSZXN1bHQocmVzdWx0OiBOYm5QbGFjZUFwaVJlc3BvbnNlLCBib3VuZHM6IEwuTGF0TG5nQm91bmRzKSB7XHJcblxyXG4gICAgICAgIGNvbnN0IGxvZ2dlciA9IHRoaXMubG9nZ2VyLnN1YigncHJvY2Vzc0ZldGNoUmVzdWx0Jyk7XHJcblxyXG4gICAgICAgIGxvZ2dlci5kZWJ1ZygnUHJvY2Vzc2luZyBGZXRjaCBSZXN1bHQnLCByZXN1bHQsIGJvdW5kcyk7XHJcblxyXG4gICAgICAgIC8vIFN0b3JlIHBsYWNlc1xyXG4gICAgICAgIHRoaXMucGxhY2VTdG9yZS5zdG9yZVBsYWNlcyhyZXN1bHQucGxhY2VzKTtcclxuXHJcbiAgICAgICAgLy8gQ3JlYXRlIHRlbXAgc3RvcmFnZSBmb3IgcG9pbnRzXHJcbiAgICAgICAgY29uc3QgcG9pbnRzOiBNYXA8c3RyaW5nLCBQb2ludEFuZExvY2lkcz4gPSBuZXcgTWFwKCk7XHJcblxyXG4gICAgICAgIC8vIEFkZCBwbGFjZSBsb2NpZHMgdG8gcG9pbnRzXHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCByZXN1bHQucGxhY2VzLmxlbmd0aDsgaSsrKSB7XHJcblxyXG4gICAgICAgICAgICBjb25zdCBwbGFjZSA9IHJlc3VsdC5wbGFjZXNbaV07XHJcblxyXG4gICAgICAgICAgICBpZiAoIXRoaXMubW9kZUhhbmRsZXIuZmlsdGVyKHBsYWNlKSkge1xyXG4gICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGNvbnN0IGxhdExuZyA9IGAke3BsYWNlLmxhdGl0dWRlfSwke3BsYWNlLmxvbmdpdHVkZX1gO1xyXG5cclxuICAgICAgICAgICAgY29uc3QgcGxhY2VDb2xvdXIgPSB0aGlzLm1vZGVIYW5kbGVyLnBsYWNlQ29sb3VyKHBsYWNlKTtcclxuXHJcbiAgICAgICAgICAgIC8vIENyZWF0ZSBwb2ludCBpZiBub3QgYWxyZWFkeSB0aGVyZVxyXG4gICAgICAgICAgICBjb25zdCBleGlzdGluZ1BvaW50ID0gcG9pbnRzLmdldChsYXRMbmcpO1xyXG4gICAgICAgICAgICBpZiAoIWV4aXN0aW5nUG9pbnQpIHtcclxuICAgICAgICAgICAgICAgIHBvaW50cy5zZXQobGF0TG5nLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGF0OiBwbGFjZS5sYXRpdHVkZSxcclxuICAgICAgICAgICAgICAgICAgICBsbmc6IHBsYWNlLmxvbmdpdHVkZSxcclxuICAgICAgICAgICAgICAgICAgICBjb2w6IFsgcGxhY2VDb2xvdXIgXSxcclxuICAgICAgICAgICAgICAgICAgICBhZGQ6IFsgcGxhY2UuYWRkcmVzczEgXSxcclxuICAgICAgICAgICAgICAgICAgICBpZHM6IFsgcGxhY2UubG9jaWQgXSxcclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgLy8gQWRkIGxvY2lkIHRvIHBvaW50IGlmIG5vdCBhbHJlYWR5IHRoZXJlXHJcbiAgICAgICAgICAgICAgICBpZiAoIWV4aXN0aW5nUG9pbnQuaWRzLmluY2x1ZGVzKHBsYWNlLmxvY2lkKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGV4aXN0aW5nUG9pbnQuaWRzLnB1c2gocGxhY2UubG9jaWQpO1xyXG4gICAgICAgICAgICAgICAgICAgIGV4aXN0aW5nUG9pbnQuYWRkLnB1c2gocGxhY2UuYWRkcmVzczEpO1xyXG4gICAgICAgICAgICAgICAgICAgIGV4aXN0aW5nUG9pbnQuY29sLnB1c2gocGxhY2VDb2xvdXIpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gU2VuZCBwb2ludHMgdG8gbWFya2VyIGxheWVyXHJcbiAgICAgICAgbG9nZ2VyLmRlYnVnKCdBZGRpbmcgcG9pbnRzIHRvIG1hcmtlciBsYXllcicsIHBvaW50cyk7XHJcbiAgICAgICAgdGhpcy5tYXJrZXJMYXllci5hZGRQb2ludHMocG9pbnRzKTtcclxuXHJcbiAgICB9XHJcblxyXG4gICAgYXN5bmMgREVQUl9yZWZyZXNoUG9pbnRzRnJvbVN0b3JlKGJvdW5kcz86IEwuTGF0TG5nQm91bmRzKSB7XHJcblxyXG4gICAgICAgIGlmICghdGhpcy5tYXJrZXJMYXllcikge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ01hcmtlciBMYXllciBub3Qgc2V0Jyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBJZiBib3VuZHMgYXJlIG5vdCBwYXNzZWQsIHVzZSBtYXAgYm91bmRzXHJcbiAgICAgICAgaWYgKCFib3VuZHMpIHtcclxuICAgICAgICAgICAgY29uc29sZS5sb2coJ0JvdW5kcyBub3QgcGFzc2VkLiBVc2luZyBtYXAgYm91bmRzLicpO1xyXG4gICAgICAgICAgICBib3VuZHMgPSB0aGlzLm1hcC5nZXRCb3VuZHMoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGJvdW5kcyA9IHJvdW5kQm91bmRzKGJvdW5kcyk7XHJcbiAgICAgICAgLy90aGlzLm1hcmtlckxheWVyLnJlZnJlc2hNYXJrZXJzSW5zaWRlQm91bmRzKGJvdW5kcywgdGhpcy5tYXJrZXJGaWx0ZXIpO1xyXG5cclxuICAgICAgICAvKlxyXG4gICAgICAgIC8vIEdldCB0aGUgYm94ZXNcclxuICAgICAgICBjb25zb2xlLmxvZygnUmVmcmVzaGluZyBwb2ludHMgd2l0aGluIGJvdW5kcycsIGJvdW5kcy50b0JCb3hTdHJpbmcoKSk7XHJcbiAgICAgICAgY29uc3QgcG9pbnRzID0gYXdhaXQgdGhpcy5kYXRhc3RvcmUuZ2V0UG9pbnRzV2l0aGluQm91bmRzKGJvdW5kcyk7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgIC8vIGFkZCBwb2ludHMgdG8gbWFwIHRoYXQgZG9uJ3QgYWxyZWFkeSBleGlzdCBpbiBsYXllclxyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcG9pbnRzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHBvaW50ID0gcG9pbnRzW2ldO1xyXG5cclxuICAgICAgICAgICAgY29uc3QgbWFya2VyID0gTC5jaXJjbGVNYXJrZXIoW3BvaW50LmxhdGl0dWRlLCBwb2ludC5sb25naXR1ZGVdLCB7XHJcbiAgICAgICAgICAgICAgICByYWRpdXM6IDUsXHJcbiAgICAgICAgICAgICAgICAvL2ZpbGxDb2xvcjogdGhpcy5nZXRQbGFjZUNvbG91cihwbGFjZSksXHJcbiAgICAgICAgICAgICAgICAvL2NvbG9yOiBcIiMwMDAwMDBcIixcclxuICAgICAgICAgICAgICAgIHdlaWdodDogMSxcclxuICAgICAgICAgICAgICAgIG9wYWNpdHk6IDEsXHJcbiAgICAgICAgICAgICAgICBmaWxsT3BhY2l0eTogMC44LFxyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIC8vIEFkZCBwb3B1cFxyXG4gICAgICAgICAgICBtYXJrZXIuYmluZFBvcHVwKHBvaW50LmxvY2lkcy5qb2luKCc8YnIgLz4nKSk7XHJcbiAgICAgICAgICAgIG1hcmtlci5vbigncG9wdXBvcGVuJywgKGV2ZW50KSA9PiB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnJlbmRlclBvcHVwQ29udGVudChwb2ludClcclxuICAgICAgICAgICAgICAgICAgICAudGhlbihjb250ZW50ID0+IGV2ZW50LnBvcHVwLnNldENvbnRlbnQoY29udGVudCkpO1xyXG4gICAgICAgICAgICB9KVxyXG5cclxuICAgICAgICAgICAgdGhpcy5tYXJrZXJMYXllci5hZGRMYXllcihtYXJrZXIpO1xyXG5cclxuICAgICAgICB9XHJcbiAgICAgICAgKi9cclxuXHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBjb250cm9sczoge1xyXG4gICAgICAgIFtrZXk6IHN0cmluZ106IElDb250cm9sO1xyXG4gICAgfSA9IHt9O1xyXG5cclxuICAgIGFkZENvbnRyb2woa2V5OiBzdHJpbmcsIGNvbnRyb2w6IElDb250cm9sKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuY29udHJvbHNba2V5XSkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYENvbnRyb2wgd2l0aCBrZXkgJHtrZXl9IGFscmVhZHkgZXhpc3RzYCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLmNvbnRyb2xzW2tleV0gPSBjb250cm9sO1xyXG5cclxuICAgICAgICB0aGlzLm1hcC5hZGRDb250cm9sKGNvbnRyb2wuZ2V0Q29udHJvbCgpKVxyXG5cclxuICAgICAgICBjb25zb2xlLmxvZygnQWRkZWQgY29udHJvbCcsIGtleSk7XHJcbiAgICB9XHJcblxyXG4gICAgc2V0TW9kZUhhbmRsZXIobW9kZUhhbmRsZXI6IElNb2RlKSB7XHJcbiAgICAgICAgdGhpcy5tb2RlSGFuZGxlciA9IG1vZGVIYW5kbGVyO1xyXG5cclxuICAgICAgICB0aGlzLm1hcmtlckxheWVyPy5yZW1vdmVBbGxNYXJrZXJzKCk7XHJcbiAgICAgICAgY29uc29sZS5sb2coJ0N1cnJlbnQgRmV0Y2hlZCBCb3hlcycsIHRoaXMuZmV0Y2hlZEJveGVzKTtcclxuICAgICAgICB0aGlzLmZldGNoZWRCb3hlcy5jbGVhcigpO1xyXG4gICAgICAgIGNvbnNvbGUubG9nKCdGZXRjaGVkIEJveGVzIENsZWFyZWQnLCB0aGlzLmZldGNoZWRCb3hlcyk7XHJcbiAgICAgICAgdGhpcy5tYXJrZXJMYXllcj8uc2V0TW9kZUhhbmRsZXIobW9kZUhhbmRsZXIsIHRoaXMucGxhY2VTdG9yZSk7XHJcbiAgICAgICAgdGhpcy5mZXRjaERhdGFGb3JDdXJyZW50VmlldygpO1xyXG4gICAgfVxyXG5cclxufSIsImltcG9ydCAqIGFzIEwgZnJvbSAnbGVhZmxldCc7XHJcbmltcG9ydCBJQ29udHJvbCBmcm9tIFwiLi4vaW50ZXJmYWNlcy9jb250cm9sLmludGVyZmFjZVwiO1xyXG5pbXBvcnQgTmJuVGVjaE1hcCBmcm9tIFwiLi4vbmJuX3RlY2hfbWFwLmNsYXNzXCI7XHJcbmltcG9ydCB7IENvbnRyb2xFdmVudCB9IGZyb20gXCIuLi90eXBlc1wiO1xyXG5cclxuXHJcbmV4cG9ydCBkZWZhdWx0IGFic3RyYWN0IGNsYXNzIEFDb250cm9sIGltcGxlbWVudHMgSUNvbnRyb2wge1xyXG5cclxuICAgIC8vcHJvdGVjdGVkIG1hcDogTmJuVGVjaE1hcDtcclxuICAgIHByb3RlY3RlZCBjb250cm9sOiBMLkNvbnRyb2w7XHJcbiAgICAvL3Byb3RlY3RlZCBrZXk6IHN0cmluZztcclxuXHJcblxyXG4gICAgcHJvdGVjdGVkIGV2ZW50SGFuZGxlcnM6IHtcclxuICAgICAgICBbZXZlbnROYW1lOiBzdHJpbmddOiAoKGU6IENvbnRyb2xFdmVudCkgPT4gdm9pZClbXVxyXG4gICAgfSA9IHt9O1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKC8qa2V5OiBzdHJpbmcvKiwgbmJuVGVjaE1hcDogTmJuVGVjaE1hcCovKSB7XHJcbiAgICAgICAgLy90aGlzLmtleSA9IGtleTtcclxuICAgICAgICAvL3RoaXMubWFwID0gbmJuVGVjaE1hcDtcclxuICAgICAgICB0aGlzLmNvbnRyb2wgPSBuZXcgTC5Db250cm9sKCk7XHJcbiAgICB9XHJcblxyXG4gICAgb24oZXZlbnROYW1lOiBzdHJpbmcsIGNhbGxiYWNrOiAoZTogQ29udHJvbEV2ZW50KSA9PiB2b2lkKSA6IHZvaWQge1xyXG4gICAgICAgIGlmICghdGhpcy5ldmVudEhhbmRsZXJzW2V2ZW50TmFtZV0pIHtcclxuICAgICAgICAgICAgdGhpcy5ldmVudEhhbmRsZXJzW2V2ZW50TmFtZV0gPSBbXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5ldmVudEhhbmRsZXJzW2V2ZW50TmFtZV0ucHVzaChjYWxsYmFjayk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJvdGVjdGVkIGVtaXQoZXZlbnROYW1lOiBzdHJpbmcsIGRhdGE6IGFueSkgOiB2b2lkIHtcclxuICAgICAgICBjb25zb2xlLmRlYnVnKGBFbWl0dGluZyBldmVudDogJHtldmVudE5hbWV9YCwge1xyXG4gICAgICAgICAgICBkYXRhOiBkYXRhLFxyXG4gICAgICAgICAgICBoYW5kbGVyczogdGhpcy5ldmVudEhhbmRsZXJzW2V2ZW50TmFtZV1cclxuICAgICAgICB9KTtcclxuICAgICAgICBpZiAodGhpcy5ldmVudEhhbmRsZXJzW2V2ZW50TmFtZV0pIHtcclxuICAgICAgICAgICAgdGhpcy5ldmVudEhhbmRsZXJzW2V2ZW50TmFtZV0uZm9yRWFjaChjYWxsYmFjayA9PiBjYWxsYmFjayh7XHJcbiAgICAgICAgICAgICAgICBuYW1lOiBldmVudE5hbWUsXHJcbiAgICAgICAgICAgICAgICBzdGF0ZTogdGhpcy5nZXRTdGF0ZSgpLFxyXG4gICAgICAgICAgICAgICAgZGF0YTogZGF0YVxyXG4gICAgICAgICAgICB9KSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGFic3RyYWN0IGdldFN0YXRlKCkgOiBhbnk7XHJcblxyXG4gICAgcHVibGljIGdldENvbnRyb2woKSA6IEwuQ29udHJvbCB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuY29udHJvbDtcclxuICAgIH1cclxuXHJcbn0iLCJpbXBvcnQgKiBhcyBMIGZyb20gJ2xlYWZsZXQnO1xyXG4vL2ltcG9ydCBOYm5UZWNoTWFwIGZyb20gXCIuLi9uYm5fdGVjaF9tYXAuY2xhc3NcIjtcclxuaW1wb3J0IEFDb250cm9sIGZyb20gXCIuL2NvbnRyb2wuYWJzdHJhY3RcIjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIENvbnRyb0Rpc3BsYXlNb2RlIGV4dGVuZHMgQUNvbnRyb2wge1xyXG5cclxuICAgIHByaXZhdGUgZGlzcGxheU1vZGUgPSAnYWxsJztcclxuICAgIHByaXZhdGUgZWxDb250cm9sRGl2OiBIVE1MRGl2RWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgcHJpdmF0ZSBlbERyb3Bkb3duOiBIVE1MU2VsZWN0RWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NlbGVjdCcpO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yICgpIHtcclxuICAgICAgICBzdXBlcigpO1xyXG5cclxuICAgICAgICB0aGlzLmdlbmVyYXRlQ29udHJvbERpdigpO1xyXG4gICAgICAgIHRoaXMuY29udHJvbC5vbkFkZCA9IChtYXA6IEwuTWFwKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMuZ2VuZXJhdGVEcm9wZG93bigpO1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5lbENvbnRyb2xEaXY7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvL3RoaXMuY29udHJvbC5vbkFkZCA9ICgpID0+IHRoaXMuYWRkQ29udHJvbERpdigpO1xyXG4gICAgICAgIC8vdGhpcy5zaG93KCk7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0U3RhdGUoKSA6IHN0cmluZyB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZGlzcGxheU1vZGU7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIHByaXZhdGUgYWxsTGFiZWw6IGFueSA9IG51bGw7XHJcbiAgICBwcml2YXRlIGFsbFJhZGlvOiBhbnkgPSBudWxsO1xyXG4gICAgcHJpdmF0ZSBhbGxUZXh0OiBhbnkgPSBudWxsO1xyXG4gICAgcHJpdmF0ZSB1cGdyYWRlTGFiZWw6IGFueSA9IG51bGw7XHJcbiAgICBwcml2YXRlIHVwZ3JhZGVSYWRpbzogYW55ID0gbnVsbDtcclxuICAgIHByaXZhdGUgdXBncmFkZVRleHQ6IGFueSA9IG51bGw7XHJcbiAgICBwcml2YXRlIGVlTGFiZWw6IGFueSA9IG51bGw7XHJcbiAgICBwcml2YXRlIGVlUmFkaW86IGFueSA9IG51bGw7XHJcbiAgICBwcml2YXRlIGVlVGV4dDogYW55ID0gbnVsbDtcclxuICAgIFxyXG4gICAgY2hhbmdlTW9kZShtb2RlOiBzdHJpbmcpIHtcclxuICAgICAgICB0aGlzLmRpc3BsYXlNb2RlID0gbW9kZTtcclxuICAgICAgICB0aGlzLmVtaXQoJ2NoYW5nZScsIG1vZGUpO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgZ2VuZXJhdGVDb250cm9sRGl2KCkgOiB2b2lkIHtcclxuICAgICAgICBpZih0aGlzLmVsQ29udHJvbERpdikge1xyXG4gICAgICAgICAgICBjb25zb2xlLndhcm4oJ0NvbnRyb2xEaXYgYWxyZWFkeSBleGlzdHMnKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuZWxDb250cm9sRGl2LmNsYXNzTGlzdC5hZGQoJ2luZm8nLCAnbGVnZW5kJyk7XHJcbiAgICAgICAgdGhpcy5lbENvbnRyb2xEaXYuc3R5bGUuYmFja2dyb3VuZENvbG9yID0gXCIjZmZmZmZmXCI7XHJcbiAgICAgICAgdGhpcy5lbENvbnRyb2xEaXYuc3R5bGUub3BhY2l0eSA9IFwiMC44XCI7XHJcbiAgICAgICAgdGhpcy5lbENvbnRyb2xEaXYuc3R5bGUucGFkZGluZyA9IFwiNXB4XCI7XHJcbiAgICAgICAgdGhpcy5lbENvbnRyb2xEaXYuc3R5bGUuYm9yZGVyUmFkaXVzID0gXCI1cHhcIjtcclxuXHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBnZW5lcmF0ZURyb3Bkb3duKCkgOiB2b2lkIHtcclxuICAgICAgICBpZiAodGhpcy5lbERyb3Bkb3duKSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUud2FybignRHJvcGRvd24gYWxyZWFkeSBleGlzdHMnKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IGRyb3Bkb3duID0gdGhpcy5lbERyb3Bkb3duO1xyXG4gICAgICAgIGRyb3Bkb3duLmNsYXNzTGlzdC5hZGQoJ2NvbnRyb2wtc2VsZWN0Jyk7XHJcblxyXG4gICAgICAgIGNvbnN0IGFsbE9wdGlvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ29wdGlvbicpO1xyXG4gICAgICAgIGFsbE9wdGlvbi52YWx1ZSA9ICdhbGwnO1xyXG4gICAgICAgIGFsbE9wdGlvbi5pbm5lclRleHQgPSAnU2hvdyBBbGwgTG9jYXRpb25zJztcclxuICAgICAgICBkcm9wZG93bi5hcHBlbmRDaGlsZChhbGxPcHRpb24pO1xyXG5cclxuICAgICAgICBcclxuICAgICAgICBjb25zdCB1cGdyYWRlT3B0aW9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnb3B0aW9uJyk7XHJcbiAgICAgICAgdXBncmFkZU9wdGlvbi52YWx1ZSA9ICd1cGdyYWRlJztcclxuICAgICAgICB1cGdyYWRlT3B0aW9uLmlubmVyVGV4dCA9ICdUZWNoIFVwZ3JhZGVzJztcclxuICAgICAgICBkcm9wZG93bi5hcHBlbmRDaGlsZCh1cGdyYWRlT3B0aW9uKTtcclxuICAgICAgICBcclxuICAgICAgICAvKlxyXG4gICAgICAgIGNvbnN0IGVlT3B0aW9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnb3B0aW9uJyk7XHJcbiAgICAgICAgZWVPcHRpb24udmFsdWUgPSAnZWUnO1xyXG4gICAgICAgIGVlT3B0aW9uLmlubmVyVGV4dCA9ICdFbnRlcnByaXNlIEV0aGVybmV0JztcclxuICAgICAgICBkcm9wZG93bi5hcHBlbmRDaGlsZChlZU9wdGlvbik7XHJcbiAgICAgICAgKi9cclxuXHJcbiAgICAgICAgZHJvcGRvd24uYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgKGUpID0+IHRoaXMuY2hhbmdlTW9kZSgoZS50YXJnZXQgYXMgSFRNTFNlbGVjdEVsZW1lbnQpLnZhbHVlKSk7XHJcblxyXG4gICAgICAgIHRoaXMuZWxEcm9wZG93biA9IGRyb3Bkb3duO1xyXG4gICAgICAgIHRoaXMuZWxDb250cm9sRGl2LmFwcGVuZENoaWxkKGRyb3Bkb3duKTtcclxuXHJcbiAgICB9XHJcblxyXG4gICAgLyphZGRDb250cm9sRGl2KCkge1xyXG5cclxuICAgICAgICB0aGlzLmFsbExhYmVsID0gTC5Eb21VdGlsLmNyZWF0ZSgnbGFiZWwnLCAnY29udHJvbC1sYWJlbCcsIHRoaXMuY29udHJvbERpdik7XHJcbiAgICAgICAgdGhpcy5hbGxSYWRpbyA9IEwuRG9tVXRpbC5jcmVhdGUoJ2lucHV0JywgJ2NvbnRyb2wtaW5wdXQnLCB0aGlzLmFsbExhYmVsKTtcclxuICAgICAgICB0aGlzLmFsbFJhZGlvLnR5cGUgPSAncmFkaW8nO1xyXG4gICAgICAgIHRoaXMuYWxsUmFkaW8ubmFtZSA9ICdkaXNwbGF5LW1vZGUnO1xyXG4gICAgICAgIHRoaXMuYWxsUmFkaW8udmFsdWUgPSAnYWxsJztcclxuICAgICAgICB0aGlzLmFsbFJhZGlvLmNoZWNrZWQgPSB0cnVlO1xyXG4gICAgICAgIEwuRG9tRXZlbnQub24odGhpcy5hbGxSYWRpbywgJ2NoYW5nZScsIChlKSA9PiB0aGlzLmNoYW5nZU1vZGUoJ2FsbCcpKTtcclxuICAgICAgICB0aGlzLmFsbFRleHQgPSBMLkRvbVV0aWwuY3JlYXRlKCdzcGFuJywgJ2NvbnRyb2wtdGV4dCcsIHRoaXMuYWxsTGFiZWwpO1xyXG4gICAgICAgIHRoaXMuYWxsVGV4dC5pbm5lclRleHQgPSAnQWxsJztcclxuXHJcbiAgICAgICAgdGhpcy51cGdyYWRlTGFiZWwgPSBMLkRvbVV0aWwuY3JlYXRlKCdsYWJlbCcsICdjb250cm9sLWxhYmVsJywgdGhpcy5jb250cm9sRGl2KTtcclxuICAgICAgICB0aGlzLnVwZ3JhZGVSYWRpbyA9IEwuRG9tVXRpbC5jcmVhdGUoJ2lucHV0JywgJ2NvbnRyb2wtaW5wdXQnLCB0aGlzLnVwZ3JhZGVMYWJlbCk7XHJcbiAgICAgICAgdGhpcy51cGdyYWRlUmFkaW8udHlwZSA9ICdyYWRpbyc7XHJcbiAgICAgICAgdGhpcy51cGdyYWRlUmFkaW8ubmFtZSA9ICdkaXNwbGF5LW1vZGUnO1xyXG4gICAgICAgIHRoaXMudXBncmFkZVJhZGlvLnZhbHVlID0gJ3VwZ3JhZGUnO1xyXG4gICAgICAgIEwuRG9tRXZlbnQub24odGhpcy51cGdyYWRlUmFkaW8sICdjaGFuZ2UnLCAoKSA9PiB0aGlzLmNoYW5nZU1vZGUoJ3VwZ3JhZGUnKSk7XHJcbiAgICAgICAgdGhpcy51cGdyYWRlVGV4dCA9IEwuRG9tVXRpbC5jcmVhdGUoJ3NwYW4nLCAnY29udHJvbC10ZXh0JywgdGhpcy51cGdyYWRlTGFiZWwpO1xyXG4gICAgICAgIHRoaXMudXBncmFkZVRleHQuaW5uZXJUZXh0ID0gJ1RlY2ggVXBncmFkZSc7XHJcblxyXG4gICAgICAgIHRoaXMuZWVMYWJlbCA9IEwuRG9tVXRpbC5jcmVhdGUoJ2xhYmVsJywgJ2NvbnRyb2wtbGFiZWwnLCB0aGlzLmNvbnRyb2xEaXYpO1xyXG4gICAgICAgIHRoaXMuZWVSYWRpbyA9IEwuRG9tVXRpbC5jcmVhdGUoJ2lucHV0JywgJ2NvbnRyb2wtaW5wdXQnLCB0aGlzLmVlTGFiZWwpO1xyXG4gICAgICAgIHRoaXMuZWVSYWRpby50eXBlID0gJ3JhZGlvJztcclxuICAgICAgICB0aGlzLmVlUmFkaW8ubmFtZSA9ICdkaXNwbGF5LW1vZGUnO1xyXG4gICAgICAgIHRoaXMuZWVSYWRpby52YWx1ZSA9ICdlZSc7XHJcbiAgICAgICAgTC5Eb21FdmVudC5vbih0aGlzLmVlUmFkaW8sICdjaGFuZ2UnLCAoKSA9PiB0aGlzLmNoYW5nZU1vZGUoJ2VlJykpO1xyXG4gICAgICAgIHRoaXMuZWVUZXh0ID0gTC5Eb21VdGlsLmNyZWF0ZSgnc3BhbicsICdjb250cm9sLXRleHQnLCB0aGlzLmVlTGFiZWwpO1xyXG4gICAgICAgIHRoaXMuZWVUZXh0LmlubmVyVGV4dCA9ICdFRSc7XHJcblxyXG4gICAgfSovXHJcblxyXG59IiwiaW1wb3J0IElNb2RlIGZyb20gXCIuLi9pbnRlcmZhY2VzL21vZGUuaW50ZXJmYWNlXCI7XHJcbmltcG9ydCB7IExlZ2VuZEl0ZW0sIE5iblBsYWNlLCBQb2ludEFuZFBsYWNlcyB9IGZyb20gXCIuLi90eXBlc1wiO1xyXG5pbXBvcnQgKiBhcyBMIGZyb20gXCJsZWFmbGV0XCI7XHJcblxyXG5pbXBvcnQge1xyXG4gICAgaXNQbGFjZUZUVFAsXHJcbiAgICBpc1BsYWNlRlRUQyxcclxuICAgIGlzUGxhY2VGVFRQQXZhaWwsXHJcbiAgICBpc1BsYWNlRlRUUFNvb24sXHJcbiAgICBpc1BsYWNlRlRUUEZhcixcclxuICAgIGlzRnd0b0ZUVEMsXHJcbiAgICBpc0Z3dG9GVFROLFxyXG4gICAgaXNTYXRUb0ZXLFxyXG4gICAgaXNEZWJ1Z01vZGVcclxufSBmcm9tIFwiLi4vdXRpbHNcIjtcclxuXHJcbmNvbnN0IGNvbG91ckZUVFAgXHRcdD0gJyMxRDcwNDQnO1xyXG5jb25zdCBjb2xvdXJGVFRQQXZhaWwgICA9ICcjNzVBRDZGJztcclxuY29uc3QgY29sb3VyRlRUUFNvb24gICAgPSAnI0M4RTNDNSc7XHJcbmNvbnN0IGNvbG91ckhGQyBcdFx0PSAnI0ZGQkUwMCc7XHJcbmNvbnN0IGNvbG91ckZUVEMgXHRcdD0gJyNGRjdFMDEnO1xyXG5jb25zdCBjb2xvdXJGVFRDQXZhaWwgICA9ICcjRkY3RTAxJztcclxuY29uc3QgY29sb3VyRlRUTkIgXHRcdD0gJyNFMzA3MUQnO1xyXG5jb25zdCBjb2xvdXJGVyBcdFx0ICAgID0gJyMwMkI5RTMnO1xyXG5jb25zdCBjb2xvdXJGV0F2YWlsIFx0PSAnIzAyMkJFMyc7XHJcbmNvbnN0IGNvbG91clNhdCBcdCAgICA9ICcjNkIwMkUzJztcclxuY29uc3QgY29sb3VyVW5rbm93biAgICAgID0gJyM4ODg4ODgnO1xyXG5cclxuZnVuY3Rpb24gZ2V0VGVjaENvbG91cih0ZWNoVHlwZTogc3RyaW5nKSB7XHJcbiAgICBzd2l0Y2godGVjaFR5cGUpIHtcclxuICAgICAgICBjYXNlICdGVFRQJzogcmV0dXJuIGNvbG91ckZUVFA7XHJcbiAgICAgICAgY2FzZSAnRlRUQyc6IHJldHVybiBjb2xvdXJGVFRDO1xyXG4gICAgICAgIGNhc2UgJ0ZUVE4nOlxyXG4gICAgICAgIGNhc2UgJ0ZUVEInOiByZXR1cm4gY29sb3VyRlRUTkI7XHJcbiAgICAgICAgY2FzZSAnSEZDJzogcmV0dXJuIGNvbG91ckhGQztcclxuICAgICAgICBjYXNlICdXSVJFTEVTUyc6IHJldHVybiBjb2xvdXJGVztcclxuICAgICAgICBjYXNlICdTQVRFTExJVEUnOiByZXR1cm4gY29sb3VyU2F0O1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGNvbG91clVua25vd247XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEFsbE1vZGUgaW1wbGVtZW50cyBJTW9kZSB7XHJcblxyXG4gICAgZmlsdGVyKHBsYWNlOiBOYm5QbGFjZSkgOiBib29sZWFuIHtcclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxuXHJcbiAgICBwb2ludENvbG91cihwb2ludDogUG9pbnRBbmRQbGFjZXMpIDogc3RyaW5nIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5wbGFjZUNvbG91cihwb2ludC5wbGFjZXNbMF0pO1xyXG4gICAgfVxyXG5cclxuICAgIHBsYWNlQ29sb3VyKHBsYWNlOiBOYm5QbGFjZSkgOiBzdHJpbmcge1xyXG4gICAgICAgIFxyXG4gICAgICAgIGlmIChpc1BsYWNlRlRUUChwbGFjZSkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGNvbG91ckZUVFA7XHJcbiAgICAgICAgfVxyXG4gICAgXHJcbiAgICAgICAgaWYgKGlzUGxhY2VGVFRQQXZhaWwocGxhY2UpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBjb2xvdXJGVFRQQXZhaWw7XHJcbiAgICAgICAgfVxyXG4gICAgXHJcbiAgICAgICAgaWYgKGlzUGxhY2VGVFRQU29vbihwbGFjZSkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGNvbG91ckZUVFBTb29uO1xyXG4gICAgICAgIH1cclxuICAgIFxyXG4gICAgICAgIGlmIChpc1BsYWNlRlRUUEZhcihwbGFjZSkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGdldFRlY2hDb2xvdXIocGxhY2UudGVjaFR5cGUpO1xyXG4gICAgICAgIH1cclxuICAgIFxyXG4gICAgICAgIGlmIChpc1BsYWNlRlRUQyhwbGFjZSkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGNvbG91ckZUVEM7XHJcbiAgICAgICAgfVxyXG4gICAgXHJcbiAgICAgICAgaWYgKGlzRnd0b0ZUVEMocGxhY2UpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBjb2xvdXJGVFRDQXZhaWw7XHJcbiAgICAgICAgfVxyXG4gICAgXHJcbiAgICAgICAgaWYgKGlzRnd0b0ZUVE4ocGxhY2UpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBjb2xvdXJGVFROQjtcclxuICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICAgICAgaWYgKGlzU2F0VG9GVyhwbGFjZSkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGNvbG91ckZXQXZhaWw7XHJcbiAgICAgICAgfVxyXG4gICAgXHJcbiAgICAgICAgaWYgKHBsYWNlLmFsdFJlYXNvbkNvZGUgJiYgcGxhY2UuYWx0UmVhc29uQ29kZSAhPSAnTlVMTF9OQScpIHtcclxuICAgICAgICAgICAgY29uc29sZS5sb2cocGxhY2UpO1xyXG4gICAgICAgIH1cclxuICAgIFxyXG4gICAgICAgIHJldHVybiBnZXRUZWNoQ29sb3VyKHBsYWNlLnRlY2hUeXBlKTtcclxuXHJcbiAgICB9XHJcblxyXG4gICAgcmVuZGVyUG9wdXBDb250ZW50KHBsYWNlOiBOYm5QbGFjZSkgOiBIVE1MRWxlbWVudCB7XHJcbiAgICAgICAgXHJcbiAgICAgICAgY29uc3QgY29udGVudCA9IEwuRG9tVXRpbC5jcmVhdGUoJ2RpdicpO1xyXG5cclxuICAgICAgICBjb250ZW50LmlubmVySFRNTCA9ICc8Yj4nK3BsYWNlLmxvY2lkKyc8L2I+PC9icj4nXHJcbiAgICAgICAgICAgICsgcGxhY2UuYWRkcmVzczEgKyAnPC9icj4nXHJcbiAgICAgICAgICAgICsgcGxhY2UuYWRkcmVzczIgKyAnPC9icj4nXHJcbiAgICAgICAgICAgICsgJzxiciAvPic7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgIGNvbnRlbnQuaW5uZXJIVE1MICs9ICc8Yj5UZWNobm9sb2d5IFBsYW48L2I+PC9icj4nO1xyXG5cclxuICAgICAgICAvKiogVGVjaG5vbG9neSBQbGFuIEZpbmFsIFN0YXRlICovXHJcbiAgICAgICAgaWYgKHBsYWNlLnRlY2hUeXBlID09ICdGVFRQJ1xyXG4gICAgICAgICAgICB8fCAhcGxhY2UuYWx0UmVhc29uQ29kZVxyXG4gICAgICAgICAgICB8fCBwbGFjZS5hbHRSZWFzb25Db2RlID09ICdOVUxMX05BJ1xyXG4gICAgICAgICkge1xyXG4gICAgICAgICAgICBjb250ZW50LmlubmVySFRNTCArPSAnVGVjaG5vbG9neTogJyArIHBsYWNlLnRlY2hUeXBlICsgJzxiciAvPic7XHJcbiAgICAgICAgICAgIGlmIChwbGFjZS50ZWNoVHlwZSAhPSAnRlRUUCcpIHtcclxuICAgICAgICAgICAgICAgIGNvbnRlbnQuaW5uZXJIVE1MICs9ICdObyB0ZWNoIHVwZ3JhZGUgcGxhbm5lZDxiciAvPic7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IFxyXG4gICAgICAgIFxyXG4gICAgICAgIGVsc2UgaWYgKHBsYWNlLmFsdFJlYXNvbkNvZGUgJiYgcGxhY2UuYWx0UmVhc29uQ29kZS5tYXRjaCgvXkZUVFAvKSkge1xyXG4gICAgICAgICAgICBjb250ZW50LmlubmVySFRNTCArPSAnQ3VycmVudDogJyArIHBsYWNlLnRlY2hUeXBlICsgJzxiciAvPic7XHJcbiAgICAgICAgICAgIGNvbnRlbnQuaW5uZXJIVE1MICs9ICdDaGFuZ2U6ICcgKyBwbGFjZS5hbHRSZWFzb25Db2RlICsgJzxiciAvPic7XHJcbiAgICAgICAgICAgIGNvbnRlbnQuaW5uZXJIVE1MICs9ICdTdGF0dXM6ICcgKyBwbGFjZS50ZWNoQ2hhbmdlU3RhdHVzICsgJzxiciAvPic7XHJcbiAgICAgICAgICAgIGNvbnRlbnQuaW5uZXJIVE1MICs9ICdQcm9ncmFtOiAnICsgcGxhY2UucHJvZ3JhbVR5cGUgKyAnPGJyIC8+JztcclxuICAgICAgICAgICAgY29udGVudC5pbm5lckhUTUwgKz0gJ1RhcmdldCBRdHI6ICcgKyBwbGFjZS50YXJnZXRFbGlnaWJpbGl0eVF1YXJ0ZXIgKyAnPGJyIC8+JztcclxuICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGNvbnRlbnQuaW5uZXJIVE1MICs9ICdDdXJyZW50OiAnICsgcGxhY2UudGVjaFR5cGUgKyAnPGJyIC8+JztcclxuICAgICAgICAgICAgY29udGVudC5pbm5lckhUTUwgKz0gJ0NoYW5nZTogJyArIHBsYWNlLmFsdFJlYXNvbkNvZGUgKyAnPGJyIC8+JztcclxuICAgICAgICAgICAgY29udGVudC5pbm5lckhUTUwgKz0gJ1N0YXR1czogJyArIHBsYWNlLnRlY2hDaGFuZ2VTdGF0dXMgKyAnPGJyIC8+JztcclxuICAgICAgICAgICAgY29udGVudC5pbm5lckhUTUwgKz0gJ1Byb2dyYW06ICcgKyBwbGFjZS5wcm9ncmFtVHlwZSArICc8YnIgLz4nO1xyXG4gICAgICAgICAgICBjb250ZW50LmlubmVySFRNTCArPSAnVGFyZ2V0IFF0cjogJyArIHBsYWNlLnRhcmdldEVsaWdpYmlsaXR5UXVhcnRlciArICc8YnIgLz4nO1xyXG4gICAgICAgIH1cclxuXHJcblxyXG4gICAgICAgIGNvbnRlbnQuaW5uZXJIVE1MICs9ICc8YnIgLz4nOyBcclxuICAgICAgICBcclxuICAgICAgICBpZiAocGxhY2UuZWUpIHtcclxuICAgICAgICAgICAgY29udGVudC5pbm5lckhUTUwgICs9ICc8Yj5FbnRlcnByaXNlIEV0aGVybmV0PC9iPjwvYnI+JztcclxuICAgICAgICAgICAgY29udGVudC5pbm5lckhUTUwgICs9ICdQcmljZSBab25lOiAnICsgKCBwbGFjZS5jYmRwcmljaW5nID8gJ0NCRCcgOiAnWm9uZSAxLzIvMycgKSArICc8YnIgLz4nXHJcbiAgICAgICAgICAgIGNvbnRlbnQuaW5uZXJIVE1MICArPSAnQnVpbGQgQ29zdDogJyArICggcGxhY2UuemVyb0J1aWxkQ29zdCA/ICckMCcgOiAnUE9BJyApICsgJzxiciAvPidcclxuICAgICAgICAgICAgY29udGVudC5pbm5lckhUTUwgICs9ICc8YnIgLz4nO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKGlzRGVidWdNb2RlKCkpIHtcclxuICAgICAgICAgICAgY29uc3QgaHIgPSBMLkRvbVV0aWwuY3JlYXRlKCdocicpO1xyXG4gICAgICAgICAgICBjb25zdCBwcmUgPSBMLkRvbVV0aWwuY3JlYXRlKCdwcmUnKTtcclxuICAgICAgICAgICAgcHJlLmlubmVySFRNTCA9IEpTT04uc3RyaW5naWZ5KHBsYWNlLCBudWxsLCAyKTtcclxuICAgICAgICAgICAgY29udGVudC5hcHBlbmRDaGlsZChocik7XHJcbiAgICAgICAgICAgIGNvbnRlbnQuYXBwZW5kQ2hpbGQocHJlKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBjb250ZW50O1xyXG4gICAgfVxyXG5cclxuICAgIHJlbmRlclRvb2x0aXAocGxhY2VzOiBOYm5QbGFjZVtdKSA6IHN0cmluZyB7XHJcbiAgICAgICAgbGV0IGxhYmVsID0gcGxhY2VzWzBdLmFkZHJlc3MxO1xyXG5cclxuICAgICAgICBpZiAocGxhY2VzLmxlbmd0aCA+IDEpIHtcclxuICAgICAgICAgICAgbGFiZWwgKz0gJyAoICsgJyArIChwbGFjZXMubGVuZ3RoIC0gMSkgKyAnIG1vcmUpJztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBsYWJlbDtcclxuXHJcbiAgICB9XHJcblxyXG4gICAgZ2V0TGVnZW5kSXRlbXMoKTogTGVnZW5kSXRlbVtdIHtcclxuICAgICAgICByZXR1cm4gW1xyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBsYWJlbDogJ0ZUVFAnLFxyXG4gICAgICAgICAgICAgICAgY29sb3VyOiBjb2xvdXJGVFRQLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBsYWJlbDogJ0ZUVFAgVXBncmFkZScsXHJcbiAgICAgICAgICAgICAgICBjb2xvdXI6IGNvbG91ckZUVFBBdmFpbCxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgbGFiZWw6ICdGVFRQIFVwZ3JhZGUgU29vbicsXHJcbiAgICAgICAgICAgICAgICBjb2xvdXI6IGNvbG91ckZUVFBTb29uLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBsYWJlbDogJ0hGQycsXHJcbiAgICAgICAgICAgICAgICBjb2xvdXI6IGNvbG91ckhGQyxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgbGFiZWw6ICdGVFRDJyxcclxuICAgICAgICAgICAgICAgIGNvbG91cjogY29sb3VyRlRUQyxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgbGFiZWw6ICdGVFROL0ZUVEInLFxyXG4gICAgICAgICAgICAgICAgY29sb3VyOiBjb2xvdXJGVFROQixcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgbGFiZWw6ICdGVycsXHJcbiAgICAgICAgICAgICAgICBjb2xvdXI6IGNvbG91ckZXLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBsYWJlbDogJ0ZXIFVwZ3JhZGUnLFxyXG4gICAgICAgICAgICAgICAgY29sb3VyOiBjb2xvdXJGV0F2YWlsLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBsYWJlbDogJ1NhdGVsbGl0ZScsXHJcbiAgICAgICAgICAgICAgICBjb2xvdXI6IGNvbG91clNhdCxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgbGFiZWw6ICdVbmtub3duJyxcclxuICAgICAgICAgICAgICAgIGNvbG91cjogY29sb3VyVW5rbm93bixcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIF07XHJcbiAgICB9XHJcblxyXG59IiwiaW1wb3J0IElNb2RlIGZyb20gXCIuLi9pbnRlcmZhY2VzL21vZGUuaW50ZXJmYWNlXCI7XHJcbmltcG9ydCB7IExlZ2VuZEl0ZW0gfSBmcm9tIFwiLi4vdHlwZXNcIjtcclxuaW1wb3J0IEFDb250cm9sIGZyb20gXCIuL2NvbnRyb2wuYWJzdHJhY3RcIjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIENvbnRyb2xMZWdlbmQgZXh0ZW5kcyBBQ29udHJvbCB7XHJcblxyXG4gICAgcHJpdmF0ZSBlbENvbnRyb2xEaXY6IEhUTUxEaXZFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICBcclxuICAgIGNvbnN0cnVjdG9yICgpIHtcclxuICAgICAgICBzdXBlcigpO1xyXG5cclxuICAgICAgICB0aGlzLmNvbnRyb2wuc2V0UG9zaXRpb24oJ2JvdHRvbXJpZ2h0Jyk7XHJcblxyXG4gICAgICAgIHRoaXMuZWxDb250cm9sRGl2LmNsYXNzTGlzdC5hZGQoJ2luZm8nLCAnbGVnZW5kJyk7XHJcbiAgICAgICAgdGhpcy5lbENvbnRyb2xEaXYuc3R5bGUuYmFja2dyb3VuZENvbG9yID0gXCIjZmZmZmZmXCI7XHJcbiAgICAgICAgdGhpcy5lbENvbnRyb2xEaXYuc3R5bGUub3BhY2l0eSA9IFwiMC44XCI7XHJcbiAgICAgICAgdGhpcy5lbENvbnRyb2xEaXYuc3R5bGUucGFkZGluZyA9IFwiNXB4XCI7XHJcbiAgICAgICAgdGhpcy5lbENvbnRyb2xEaXYuc3R5bGUuYm9yZGVyUmFkaXVzID0gXCI1cHhcIjtcclxuXHJcbiAgICAgICAgdGhpcy5jb250cm9sLm9uQWRkID0gKG1hcDogTC5NYXApID0+IHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZWxDb250cm9sRGl2O1xyXG4gICAgICAgIH1cclxuICAgICAgICBcclxuICAgIH1cclxuXHJcbiAgICBnZXRTdGF0ZSgpIHtcclxuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xyXG4gICAgfVxyXG5cclxuICAgIHVwZGF0ZUxlZ2VuZChpdGVtczogTGVnZW5kSXRlbVtdKSB7XHJcblxyXG4gICAgICAgIGxldCBodG1sID0gJyc7XHJcbiAgICAgICAgaXRlbXMuZm9yRWFjaChpdGVtID0+IHtcclxuICAgICAgICAgICAgaHRtbCArPSAnPHN2ZyBoZWlnaHQ9XCIxMFwiIHdpZHRoPVwiMTBcIj48Y2lyY2xlIGN4PVwiNVwiIGN5PVwiNVwiIHI9XCI1XCIgZmlsbD1cIicrIGl0ZW0uY29sb3VyICsnXCIgc3Ryb2tlPVwiIzAwMDAwMFwiIHN0cm9rZS13aWR0aD1cIjFcIiBvcGFjaXR5PVwiMVwiIGZpbGwtb3BhY2l0eT1cIjAuOFwiIC8+PC9zdmc+ICcgKyBpdGVtLmxhYmVsO1xyXG4gICAgICAgICAgICBpZiAoaXRlbS5jb3VudCkge1xyXG4gICAgICAgICAgICAgICAgaHRtbCArPSAnICgnICsgaXRlbS5jb3VudCArICcpJztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBodG1sICs9ICc8YnI+JztcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgdGhpcy5lbENvbnRyb2xEaXYuaW5uZXJIVE1MID0gaHRtbDtcclxuXHJcbiAgICB9XHJcblxyXG5cclxuXHJcblxyXG4gICAgLypcclxuXHJcbiAgICBnZXRMZWdlbmRIVE1MKCkge1xyXG5cclxuICAgICAgICBpZiAodGhpcy5uYm5UZWNoTWFwLmNvbnRyb2xzLmRpc3BsYXlNb2RlPy5kaXNwbGF5TW9kZSA9PSAnZWUnKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAnPHN2ZyBoZWlnaHQ9XCIxMFwiIHdpZHRoPVwiMTBcIj48Y2lyY2xlIGN4PVwiNVwiIGN5PVwiNVwiIHI9XCI1XCIgZmlsbD1cIicrY29sb3VyRUVfQ0JEX1pCQysnXCIgc3Ryb2tlPVwiIzAwMDAwMFwiIHN0cm9rZS13aWR0aD1cIjFcIiBvcGFjaXR5PVwiMVwiIGZpbGwtb3BhY2l0eT1cIjAuOFwiIC8+PC9zdmc+IFpvbmUgQ0JEICgkMCBCdWlsZCk8YnI+J1xyXG4gICAgICAgICAgICArICc8c3ZnIGhlaWdodD1cIjEwXCIgd2lkdGg9XCIxMFwiPjxjaXJjbGUgY3g9XCI1XCIgY3k9XCI1XCIgcj1cIjVcIiBmaWxsPVwiJytjb2xvdXJFRV9DQkRfQkMrJ1wiIHN0cm9rZT1cIiMwMDAwMDBcIiBzdHJva2Utd2lkdGg9XCIxXCIgb3BhY2l0eT1cIjFcIiBmaWxsLW9wYWNpdHk9XCIwLjhcIiAvPjwvc3ZnPiBab25lIENCRCAoQnVpbGQgUE9BKTxicj4nXHJcbiAgICAgICAgICAgICsgJzxzdmcgaGVpZ2h0PVwiMTBcIiB3aWR0aD1cIjEwXCI+PGNpcmNsZSBjeD1cIjVcIiBjeT1cIjVcIiByPVwiNVwiIGZpbGw9XCInK2NvbG91ckVFX1oxMjNfWkJDKydcIiBzdHJva2U9XCIjMDAwMDAwXCIgc3Ryb2tlLXdpZHRoPVwiMVwiIG9wYWNpdHk9XCIxXCIgZmlsbC1vcGFjaXR5PVwiMC44XCIgLz48L3N2Zz4gWm9uZSAxLzIvMyAoJDAgQnVpbGQpPGJyPidcclxuICAgICAgICAgICAgKyAnPHN2ZyBoZWlnaHQ9XCIxMFwiIHdpZHRoPVwiMTBcIj48Y2lyY2xlIGN4PVwiNVwiIGN5PVwiNVwiIHI9XCI1XCIgZmlsbD1cIicrY29sb3VyRUVfWjEyM19CQysnXCIgc3Ryb2tlPVwiIzAwMDAwMFwiIHN0cm9rZS13aWR0aD1cIjFcIiBvcGFjaXR5PVwiMVwiIGZpbGwtb3BhY2l0eT1cIjAuOFwiIC8+PC9zdmc+IFpvbmUgMS8yLzMgKEJ1aWxkIFBPQSk8YnI+J1xyXG4gICAgICAgICAgICArICc8c3ZnIGhlaWdodD1cIjEwXCIgd2lkdGg9XCIxMFwiPjxjaXJjbGUgY3g9XCI1XCIgY3k9XCI1XCIgcj1cIjVcIiBmaWxsPVwiJytjb2xvdXJVbmtub3duKydcIiBzdHJva2U9XCIjMDAwMDAwXCIgc3Ryb2tlLXdpZHRoPVwiMVwiIG9wYWNpdHk9XCIxXCIgZmlsbC1vcGFjaXR5PVwiMC44XCIgLz48L3N2Zz4gVW5rbm93bic7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodGhpcy5uYm5UZWNoTWFwLmNvbnRyb2xzLmRpc3BsYXlNb2RlPy5kaXNwbGF5TW9kZSA9PSAndXBncmFkZScpIHtcclxuICAgICAgICAgICAgcmV0dXJuICc8c3ZnIGhlaWdodD1cIjEwXCIgd2lkdGg9XCIxMFwiPjxjaXJjbGUgY3g9XCI1XCIgY3k9XCI1XCIgcj1cIjVcIiBmaWxsPVwiJysgQ09MX1RFQ0hfQ09NUExFVEUgKydcIiBzdHJva2U9XCIjMDAwMDAwXCIgc3Ryb2tlLXdpZHRoPVwiMVwiIG9wYWNpdHk9XCIxXCIgZmlsbC1vcGFjaXR5PVwiMC44XCIgLz48L3N2Zz4gQ29tcGxldGVkPGJyPidcclxuICAgICAgICAgICAgKyAnPHN2ZyBoZWlnaHQ9XCIxMFwiIHdpZHRoPVwiMTBcIj48Y2lyY2xlIGN4PVwiNVwiIGN5PVwiNVwiIHI9XCI1XCIgZmlsbD1cIicrIENPTF9URUNIX0FWQUlMICsnXCIgc3Ryb2tlPVwiIzAwMDAwMFwiIHN0cm9rZS13aWR0aD1cIjFcIiBvcGFjaXR5PVwiMVwiIGZpbGwtb3BhY2l0eT1cIjAuOFwiIC8+PC9zdmc+IEF2YWlsYWJsZTxicj4nXHJcbiAgICAgICAgICAgICsgJzxzdmcgaGVpZ2h0PVwiMTBcIiB3aWR0aD1cIjEwXCI+PGNpcmNsZSBjeD1cIjVcIiBjeT1cIjVcIiByPVwiNVwiIGZpbGw9XCInKyBDT0xfVEVDSF9CVUlMREZJTkFMSVNFRCArJ1wiIHN0cm9rZT1cIiMwMDAwMDBcIiBzdHJva2Utd2lkdGg9XCIxXCIgb3BhY2l0eT1cIjFcIiBmaWxsLW9wYWNpdHk9XCIwLjhcIiAvPjwvc3ZnPiBCdWlsZCBGaW5hbGlzZWQ8YnI+J1xyXG4gICAgICAgICAgICArICc8c3ZnIGhlaWdodD1cIjEwXCIgd2lkdGg9XCIxMFwiPjxjaXJjbGUgY3g9XCI1XCIgY3k9XCI1XCIgcj1cIjVcIiBmaWxsPVwiJysgQ09MX1RFQ0hfREVTSUdOICsnXCIgc3Ryb2tlPVwiIzAwMDAwMFwiIHN0cm9rZS13aWR0aD1cIjFcIiBvcGFjaXR5PVwiMVwiIGZpbGwtb3BhY2l0eT1cIjAuOFwiIC8+PC9zdmc+IEluIERlc2lnbjxicj4nXHJcbiAgICAgICAgICAgICsgJzxzdmcgaGVpZ2h0PVwiMTBcIiB3aWR0aD1cIjEwXCI+PGNpcmNsZSBjeD1cIjVcIiBjeT1cIjVcIiByPVwiNVwiIGZpbGw9XCInKyBDT0xfVEVDSF9DT01NSVRURUQgKydcIiBzdHJva2U9XCIjMDAwMDAwXCIgc3Ryb2tlLXdpZHRoPVwiMVwiIG9wYWNpdHk9XCIxXCIgZmlsbC1vcGFjaXR5PVwiMC44XCIgLz48L3N2Zz4gQ29tbWl0dGVkPGJyPidcclxuICAgICAgICAgICAgKyAnPGI+TXVsdGkgRHdlbGxpbmcgVW5pdHM8L2I+PGJyPidcclxuICAgICAgICAgICAgKyAnPHN2ZyBoZWlnaHQ9XCIxMFwiIHdpZHRoPVwiMTBcIj48Y2lyY2xlIGN4PVwiNVwiIGN5PVwiNVwiIHI9XCI1XCIgZmlsbD1cIicrIENPTF9URUNIX01EVV9JTkJVSUxEICsnXCIgc3Ryb2tlPVwiIzAwMDAwMFwiIHN0cm9rZS13aWR0aD1cIjFcIiBvcGFjaXR5PVwiMVwiIGZpbGwtb3BhY2l0eT1cIjAuOFwiIC8+PC9zdmc+IEluIEJ1aWxkPGJyPidcclxuICAgICAgICAgICAgKyAnPHN2ZyBoZWlnaHQ9XCIxMFwiIHdpZHRoPVwiMTBcIj48Y2lyY2xlIGN4PVwiNVwiIGN5PVwiNVwiIHI9XCI1XCIgZmlsbD1cIicrIENPTF9URUNIX01EVV9FTElHSUJMRSArJ1wiIHN0cm9rZT1cIiMwMDAwMDBcIiBzdHJva2Utd2lkdGg9XCIxXCIgb3BhY2l0eT1cIjFcIiBmaWxsLW9wYWNpdHk9XCIwLjhcIiAvPjwvc3ZnPiBFbGxpZ2libGU8YnI+J1xyXG4gICAgICAgICAgICArICc8c3ZnIGhlaWdodD1cIjEwXCIgd2lkdGg9XCIxMFwiPjxjaXJjbGUgY3g9XCI1XCIgY3k9XCI1XCIgcj1cIjVcIiBmaWxsPVwiJytjb2xvdXJVbmtub3duKydcIiBzdHJva2U9XCIjMDAwMDAwXCIgc3Ryb2tlLXdpZHRoPVwiMVwiIG9wYWNpdHk9XCIxXCIgZmlsbC1vcGFjaXR5PVwiMC44XCIgLz48L3N2Zz4gVW5rbm93bic7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gJzxzdmcgaGVpZ2h0PVwiMTBcIiB3aWR0aD1cIjEwXCI+PGNpcmNsZSBjeD1cIjVcIiBjeT1cIjVcIiByPVwiNVwiIGZpbGw9XCInK2NvbG91ckZUVFArJ1wiIHN0cm9rZT1cIiMwMDAwMDBcIiBzdHJva2Utd2lkdGg9XCIxXCIgb3BhY2l0eT1cIjFcIiBmaWxsLW9wYWNpdHk9XCIwLjhcIiAvPjwvc3ZnPiBGVFRQPGJyPicgKyBcclxuICAgICAgICAgICAgJzxzdmcgaGVpZ2h0PVwiMTBcIiB3aWR0aD1cIjEwXCI+PGNpcmNsZSBjeD1cIjVcIiBjeT1cIjVcIiByPVwiNVwiIGZpbGw9XCInK2NvbG91ckZUVFBBdmFpbCsnXCIgc3Ryb2tlPVwiIzAwMDAwMFwiIHN0cm9rZS13aWR0aD1cIjFcIiBvcGFjaXR5PVwiMVwiIGZpbGwtb3BhY2l0eT1cIjAuOFwiIC8+PC9zdmc+IEZUVFAgVXBncmFkZTxicj4nICtcclxuICAgICAgICAgICAgJzxzdmcgaGVpZ2h0PVwiMTBcIiB3aWR0aD1cIjEwXCI+PGNpcmNsZSBjeD1cIjVcIiBjeT1cIjVcIiByPVwiNVwiIGZpbGw9XCInK2NvbG91ckZUVFBTb29uKydcIiBzdHJva2U9XCIjMDAwMDAwXCIgc3Ryb2tlLXdpZHRoPVwiMVwiIG9wYWNpdHk9XCIxXCIgZmlsbC1vcGFjaXR5PVwiMC44XCIgLz48L3N2Zz4gRlRUUCBVcGdyYWRlIFNvb248YnI+JyArXHJcbiAgICAgICAgICAgICc8c3ZnIGhlaWdodD1cIjEwXCIgd2lkdGg9XCIxMFwiPjxjaXJjbGUgY3g9XCI1XCIgY3k9XCI1XCIgcj1cIjVcIiBmaWxsPVwiJytjb2xvdXJIRkMrJ1wiIHN0cm9rZT1cIiMwMDAwMDBcIiBzdHJva2Utd2lkdGg9XCIxXCIgb3BhY2l0eT1cIjFcIiBmaWxsLW9wYWNpdHk9XCIwLjhcIiAvPjwvc3ZnPiBIRkM8YnI+JyArIFxyXG4gICAgICAgICAgICAnPHN2ZyBoZWlnaHQ9XCIxMFwiIHdpZHRoPVwiMTBcIj48Y2lyY2xlIGN4PVwiNVwiIGN5PVwiNVwiIHI9XCI1XCIgZmlsbD1cIicrY29sb3VyRlRUQysnXCIgc3Ryb2tlPVwiIzAwMDAwMFwiIHN0cm9rZS13aWR0aD1cIjFcIiBvcGFjaXR5PVwiMVwiIGZpbGwtb3BhY2l0eT1cIjAuOFwiIC8+PC9zdmc+IEZUVEM8YnI+JyArXHJcbiAgICAgICAgICAgICc8c3ZnIGhlaWdodD1cIjEwXCIgd2lkdGg9XCIxMFwiPjxjaXJjbGUgY3g9XCI1XCIgY3k9XCI1XCIgcj1cIjVcIiBmaWxsPVwiJytjb2xvdXJGVFROQisnXCIgc3Ryb2tlPVwiIzAwMDAwMFwiIHN0cm9rZS13aWR0aD1cIjFcIiBvcGFjaXR5PVwiMVwiIGZpbGwtb3BhY2l0eT1cIjAuOFwiIC8+PC9zdmc+IEZUVE4vRlRUQjxicj4nICtcclxuICAgICAgICAgICAgJzxzdmcgaGVpZ2h0PVwiMTBcIiB3aWR0aD1cIjEwXCI+PGNpcmNsZSBjeD1cIjVcIiBjeT1cIjVcIiByPVwiNVwiIGZpbGw9XCInK2NvbG91ckZXKydcIiBzdHJva2U9XCIjMDAwMDAwXCIgc3Ryb2tlLXdpZHRoPVwiMVwiIG9wYWNpdHk9XCIxXCIgZmlsbC1vcGFjaXR5PVwiMC44XCIgLz48L3N2Zz4gRlc8YnI+JyArXHJcbiAgICAgICAgICAgICc8c3ZnIGhlaWdodD1cIjEwXCIgd2lkdGg9XCIxMFwiPjxjaXJjbGUgY3g9XCI1XCIgY3k9XCI1XCIgcj1cIjVcIiBmaWxsPVwiJytjb2xvdXJGV0F2YWlsKydcIiBzdHJva2U9XCIjMDAwMDAwXCIgc3Ryb2tlLXdpZHRoPVwiMVwiIG9wYWNpdHk9XCIxXCIgZmlsbC1vcGFjaXR5PVwiMC44XCIgLz48L3N2Zz4gRlcgVXBncmFkZTxicj4nICtcclxuICAgICAgICAgICAgJzxzdmcgaGVpZ2h0PVwiMTBcIiB3aWR0aD1cIjEwXCI+PGNpcmNsZSBjeD1cIjVcIiBjeT1cIjVcIiByPVwiNVwiIGZpbGw9XCInK2NvbG91clNhdCsnXCIgc3Ryb2tlPVwiIzAwMDAwMFwiIHN0cm9rZS13aWR0aD1cIjFcIiBvcGFjaXR5PVwiMVwiIGZpbGwtb3BhY2l0eT1cIjAuOFwiIC8+PC9zdmc+IFNhdGVsbGl0ZTxicj4nICtcclxuICAgICAgICAgICAgJzxzdmcgaGVpZ2h0PVwiMTBcIiB3aWR0aD1cIjEwXCI+PGNpcmNsZSBjeD1cIjVcIiBjeT1cIjVcIiByPVwiNVwiIGZpbGw9XCInK2NvbG91clVua25vd24rJ1wiIHN0cm9rZT1cIiMwMDAwMDBcIiBzdHJva2Utd2lkdGg9XCIxXCIgb3BhY2l0eT1cIjFcIiBmaWxsLW9wYWNpdHk9XCIwLjhcIiAvPjwvc3ZnPiBVbmtub3duJztcclxuICAgIH1cclxuXHJcbiAgICBhZGRDb250cm9sRGl2KG1hcCkge1xyXG5cclxuICAgICAgICBpZiAoIXRoaXMuY29udHJvbERpdikge1xyXG4gICAgICAgICAgICB0aGlzLmNvbnRyb2xEaXYgPSBMLkRvbVV0aWwuY3JlYXRlKCdkaXYnLCAnaW5mbyBsZWdlbmQnKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuY29udHJvbERpdi5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSBcIiNmZmZmZmZcIjtcclxuICAgICAgICB0aGlzLmNvbnRyb2xEaXYuc3R5bGUub3BhY2l0eSA9IFwiMC44XCI7XHJcbiAgICAgICAgdGhpcy5jb250cm9sRGl2LnN0eWxlLnBhZGRpbmcgPSBcIjVweFwiO1xyXG4gICAgICAgIHRoaXMuY29udHJvbERpdi5zdHlsZS5ib3JkZXJSYWRpdXMgPSBcIjVweFwiO1xyXG4gICAgICAgIHRoaXMuY29udHJvbERpdi5zdHlsZS53aWR0aCA9IFwiMTUwcHhcIjtcclxuXHJcbiAgICAgICAgdGhpcy5jb250cm9sRGl2LmlubmVySFRNTCA9IHRoaXMuZ2V0TGVnZW5kSFRNTCgpO1xyXG5cclxuICAgICAgICByZXR1cm4gdGhpcy5jb250cm9sRGl2O1xyXG4gICAgfVxyXG5cclxuICAgIHJlZnJlc2goKSB7XHJcbiAgICAgICAgdGhpcy5jb250cm9sRGl2LmlubmVySFRNTCA9IHRoaXMuZ2V0TGVnZW5kSFRNTCgpO1xyXG4gICAgfVxyXG5cclxuICAgIHNob3coKSB7XHJcbiAgICAgICAgdGhpcy5jb250cm9sLmFkZFRvKHRoaXMubmJuVGVjaE1hcC5tYXApO1xyXG4gICAgfVxyXG5cclxuICAgIHJlbW92ZSgpIHtcclxuICAgICAgICB0aGlzLmNvbnRyb2wucmVtb3ZlKCk7XHJcbiAgICB9XHJcblxyXG4gICAgKi9cclxufSIsImltcG9ydCBJUGxhY2VTdG9yZSBmcm9tICcuLi9pbnRlcmZhY2VzL3BsYWNlc3RvcmUuaW50ZXJmYWNlJztcclxuaW1wb3J0IHsgTmJuUGxhY2UgfSBmcm9tIFwiLi4vdHlwZXNcIjtcclxuaW1wb3J0IHsgREJTY2hlbWEsIElEQlBEYXRhYmFzZSwgb3BlbkRCIH0gZnJvbSAnaWRiJztcclxuaW1wb3J0IHsgTG9nZ2VyIH0gZnJvbSAnLi4vdXRpbHMnO1xyXG5cclxuZXhwb3J0IGludGVyZmFjZSBOQk5UZWNoTWFwREIgZXh0ZW5kcyBEQlNjaGVtYSB7XHJcbiAgICBuYm5QbGFjZVN0b3JlOiB7XHJcbiAgICAgICAga2V5OiBzdHJpbmc7XHJcbiAgICAgICAgdmFsdWU6IE5iblBsYWNlO1xyXG4gICAgICAgIGluZGV4ZXM6IHtcclxuICAgICAgICAgICAgLy9sb2NpZDogc3RyaW5nO1xyXG4gICAgICAgICAgICAvL2xhdGxuZzogW251bWJlciwgbnVtYmVyXTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgSW5kZXhEQlBsYWNlU3RvcmUgaW1wbGVtZW50cyBJUGxhY2VTdG9yZSB7XHJcblxyXG4gICAgcHJpdmF0ZSBEQl9OQU1FID0gJ25zbS1wbGFjZXN0b3JlJztcclxuXHJcbiAgICBwcml2YXRlIGxvZ2dlciA9IG5ldyBMb2dnZXIoJ0luZGV4REJQbGFjZVN0b3JlJyk7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBUaGUgZGF0YWJhc2UuXHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgZGI/OiBJREJQRGF0YWJhc2U8TkJOVGVjaE1hcERCPjtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFNldHVwIGRhdGFiYXNlLlxyXG4gICAgICovXHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICBcclxuICAgICAgICB0aGlzLmxvZ2dlci5pbmZvKCdTZXR0aW5nIHVwIGRhdGFiYXNlLi4uJyk7XHJcblxyXG4gICAgICAgIG9wZW5EQjxOQk5UZWNoTWFwREI+KHRoaXMuREJfTkFNRSwgMSwge1xyXG5cclxuICAgICAgICAgICAgdXBncmFkZShkYiwgb2xkVmVyc2lvbiwgbmV3VmVyc2lvbiwgdHJhbnNhY3Rpb24sIGV2ZW50KSB7XHJcblxyXG4gICAgICAgICAgICAgICAgY29uc3Qgb2JqZWN0U3RvcmVOYW1lcyA9IGRiLm9iamVjdFN0b3JlTmFtZXM7XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gQ3JlYXRlIG5ibiBwbGFjZSBzdG9yZSBpZiBpdCBkb2Vzbid0IGV4aXN0XHJcbiAgICAgICAgICAgICAgICBpZiAoIW9iamVjdFN0b3JlTmFtZXMuY29udGFpbnMoJ25iblBsYWNlU3RvcmUnKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGRiLmNyZWF0ZU9iamVjdFN0b3JlKCduYm5QbGFjZVN0b3JlJywgeyBrZXlQYXRoOiAnbG9jaWQnIH0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgfSxcclxuXHJcbiAgICAgICAgICAgIGJsb2NrZWQ6IChjdXJyZW50VmVyc2lvbiwgYmxvY2tlZFZlcnNpb24sIGV2ZW50KSA9PiB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmxvZ2dlci53YXJuKCdEYXRhYmFzZSBibG9ja2VkIScsIHtcclxuICAgICAgICAgICAgICAgICAgICBjdXJyZW50VmVyc2lvbiwgYmxvY2tlZFZlcnNpb24sIGV2ZW50LFxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0sXHJcblxyXG4gICAgICAgICAgICBibG9ja2luZzogKGN1cnJlbnRWZXJzaW9uLCBibG9ja2VkVmVyc2lvbiwgZXZlbnQpID0+IHtcclxuICAgICAgICAgICAgICAgIHRoaXMubG9nZ2VyLndhcm4oJ0RhdGFiYXNlIGJsb2NraW5nIScsIHtcclxuICAgICAgICAgICAgICAgICAgICBjdXJyZW50VmVyc2lvbiwgYmxvY2tlZFZlcnNpb24sIGV2ZW50XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfSxcclxuXHJcbiAgICAgICAgICAgIHRlcm1pbmF0ZWQ6ICgpID0+IHtcclxuICAgICAgICAgICAgICAgIHRoaXMubG9nZ2VyLndhcm4oJ0RhdGFiYXNlIHRlcm1pbmF0ZWQhJyk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgfSlcclxuICAgICAgICBcclxuICAgICAgICAudGhlbigoZGIpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5kYiA9IGRiO1xyXG4gICAgICAgICAgICB0aGlzLmxvZ2dlci5pbmZvKCdEYXRhYmFzZSByZWFkeSEnKTtcclxuICAgICAgICB9KVxyXG4gICAgICAgIFxyXG4gICAgICAgIC5jYXRjaCgoZXJyKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMubG9nZ2VyLmVycm9yKCdGYWlsZWQgdG8gb3BlbiBkYXRhYmFzZTogJywgZXJyKTtcclxuICAgICAgICB9KVxyXG5cclxuICAgICAgICAuZmluYWxseSgoKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMubG9nZ2VyLmluZm8oJ0RhdGFiYXNlIHNldHVwIGNvbXBsZXRlLicpO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIENoZWNrIGlmIHRoZSBkYXRhYmFzZSBpcyByZWFkeS5cclxuICAgICAqIEByZXR1cm5zIFxyXG4gICAgICovXHJcbiAgICBpc1JlYWR5KCkgOiBib29sZWFuIHtcclxuICAgICAgICByZXR1cm4gISF0aGlzLmRiO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogV2FpdCB1bnRpbCB0aGUgZGF0YWJhc2UgaXMgcmVhZHkuXHJcbiAgICAgKiBAcGFyYW0gdGltZW91dFNlY29uZHMgXHJcbiAgICAgKiBAcmV0dXJucyBcclxuICAgICAqL1xyXG4gICAgYXN5bmMgd2FpdFVudGlsUmVhZHkodGltZW91dFNlY29uZHM6IG51bWJlcikgOiBQcm9taXNlPHZvaWQ+IHtcclxuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCBzdGFydFRpbWUgPSBEYXRlLm5vdygpO1xyXG4gICAgICAgICAgICBjb25zdCBpbnRlcnZhbCA9IHNldEludGVydmFsKCgpID0+IHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHRpbWVFbGFwc2VkID0gRGF0ZS5ub3coKSAtIHN0YXJ0VGltZTtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLmlzUmVhZHkoKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNsZWFySW50ZXJ2YWwoaW50ZXJ2YWwpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmUoKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodGltZUVsYXBzZWQgPiB0aW1lb3V0U2Vjb25kcyAqIDEwMDApIHtcclxuICAgICAgICAgICAgICAgICAgICBjbGVhckludGVydmFsKGludGVydmFsKTtcclxuICAgICAgICAgICAgICAgICAgICByZWplY3QobmV3IEVycm9yKGBEYXRhYmFzZSBub3QgcmVhZHkgYWZ0ZXIgJHt0aW1lb3V0U2Vjb25kc30gc2Vjb25kcy5gKSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0sIDEwMCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBTdG9yZSBhIHNpbmdsZSBwbGFjZS5cclxuICAgICAqIEBwYXJhbSBwbGFjZSBcclxuICAgICAqL1xyXG4gICAgYXN5bmMgc3RvcmVQbGFjZShwbGFjZTogTmJuUGxhY2UpOiBQcm9taXNlPHZvaWQ+IHtcclxuICAgICAgICBjb25zdCBkYiA9IGF3YWl0IHRoaXMuZ2V0RGIoKTtcclxuICAgICAgICBhd2FpdCBkYi5wdXQoJ25iblBsYWNlU3RvcmUnLCBwbGFjZSk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBTdG9yZSBhIGJhdGNoIG9mIHBsYWNlcy5cclxuICAgICAqIFVzZXMgYSB0cmFuc2FjdGlvbiB0byBwcm92aWRlIGJldHRlciBwZXJmb3JtYW5jZS5cclxuICAgICAqIEBwYXJhbSBwbGFjZXMgXHJcbiAgICAgKi9cclxuICAgIGFzeW5jIHN0b3JlUGxhY2VzKHBsYWNlczogTmJuUGxhY2VbXSkgOiBQcm9taXNlPHZvaWQ+IHtcclxuXHJcbiAgICAgICAgLy8gR2V0IHRoZSBkYXRhYmFzZVxyXG4gICAgICAgIGNvbnN0IGRiID0gYXdhaXQgdGhpcy5nZXREYigpO1xyXG5cclxuICAgICAgICAvLyBDcmVhdGUgYSB0cmFuc2FjdGlvblxyXG4gICAgICAgIGNvbnN0IHR4ID0gZGIudHJhbnNhY3Rpb24oWyduYm5QbGFjZVN0b3JlJ10sICdyZWFkd3JpdGUnLCB7XHJcbiAgICAgICAgICAgICdkdXJhYmlsaXR5JzogJ3JlbGF4ZWQnLFxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICAvLyBHZXQgdGhlIG9iamVjdCBzdG9yZVxyXG4gICAgICAgIGNvbnN0IHBsYWNlU3RvcmUgPSB0eC5vYmplY3RTdG9yZSgnbmJuUGxhY2VTdG9yZScpO1xyXG5cclxuICAgICAgICAvLyBQdXQgZWFjaCBwbGFjZSBpbnRvIHRoZSBzdG9yZVxyXG4gICAgICAgIGF3YWl0IHBsYWNlcy5tYXAocGxhY2UgPT4gcGxhY2VTdG9yZS5wdXQocGxhY2UpKVxyXG4gICAgICAgIFxyXG4gICAgICAgIC8vIFdhaXQgZm9yIHRoZSB0cmFuc2FjdGlvbiB0byBjb21wbGV0ZVxyXG4gICAgICAgIGF3YWl0IHR4LmRvbmU7XHJcblxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogR2V0IGEgc2luZ2xlIHBsYWNlLlxyXG4gICAgICogQHBhcmFtIGxvY2lkIFxyXG4gICAgICogQHJldHVybnMgXHJcbiAgICAgKi9cclxuICAgIGFzeW5jIGdldFBsYWNlKGxvY2lkOiBzdHJpbmcpIDogUHJvbWlzZTxOYm5QbGFjZSB8IHVuZGVmaW5lZD4ge1xyXG5cclxuICAgICAgICAvLyBHZXQgdGhlIGRhdGFiYXNlXHJcbiAgICAgICAgY29uc3QgZGIgPSBhd2FpdCB0aGlzLmdldERiKCk7XHJcblxyXG4gICAgICAgIC8vIEdldCB0aGUgcGxhY2VcclxuICAgICAgICByZXR1cm4gYXdhaXQgZGIuZ2V0KCduYm5QbGFjZVN0b3JlJywgbG9jaWQpO1xyXG5cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEdldCBhIGJhdGNoIG9mIHBsYWNlcy5cclxuICAgICAqIFVzZXMgYSB0cmFuc2FjdGlvbiB0byBwcm92aWRlIGJldHRlciBwZXJmb3JtYW5jZS5cclxuICAgICAqIEBwYXJhbSBsb2NpZHMgXHJcbiAgICAgKiBAcmV0dXJucyBcclxuICAgICAqL1xyXG4gICAgYXN5bmMgZ2V0UGxhY2VzKGxvY2lkczogc3RyaW5nW10pOiBQcm9taXNlPE5iblBsYWNlW10+IHtcclxuXHJcbiAgICAgICAgLy8gR2V0IHRoZSBkYXRhYmFzZVxyXG4gICAgICAgIGNvbnN0IGRiID0gYXdhaXQgdGhpcy5nZXREYigpO1xyXG4gICAgICAgIFxyXG4gICAgICAgIC8vIE9wZW4gYSB0cmFuc2FjdGlvblxyXG4gICAgICAgIGNvbnN0IHR4ID0gZGIudHJhbnNhY3Rpb24oWyduYm5QbGFjZVN0b3JlJ10sICdyZWFkb25seScpO1xyXG5cclxuICAgICAgICAvLyBHZXQgdGhlIG9iamVjdCBzdG9yZVxyXG4gICAgICAgIGNvbnN0IHBsYWNlU3RvcmUgPSB0eC5vYmplY3RTdG9yZSgnbmJuUGxhY2VTdG9yZScpO1xyXG5cclxuICAgICAgICAvLyBHZXQgdGhlIHBsYWNlc1xyXG4gICAgICAgIGNvbnN0IHBsYWNlcyA9IGF3YWl0IFByb21pc2UuYWxsKGxvY2lkcy5tYXAobG9jaWQgPT4gcGxhY2VTdG9yZS5nZXQobG9jaWQpKSk7XHJcblxyXG4gICAgICAgIC8vIFdhaXQgZm9yIHRoZSB0cmFuc2FjdGlvbiB0byBjb21wbGV0ZVxyXG4gICAgICAgIGF3YWl0IHR4LmRvbmU7XHJcblxyXG4gICAgICAgIC8vIFJldHVybiB0aGUgcGxhY2VzXHJcbiAgICAgICAgcmV0dXJuIHBsYWNlcy5maWx0ZXIocGxhY2UgPT4gISFwbGFjZSkgYXMgTmJuUGxhY2VbXTtcclxuXHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXQgdGhlIGRhdGFiYXNlLlxyXG4gICAgICogQHBhcmFtIHRpbWVvdXQgXHJcbiAgICAgKiBAcmV0dXJucyBQcm9taXNlPElEQlBEYXRhYmFzZTxOQk5UZWNoTWFwREI+PlxyXG4gICAgICovXHJcbiAgICBwcml2YXRlIGFzeW5jIGdldERiKHRpbWVvdXQgPSA1KSA6IFByb21pc2U8SURCUERhdGFiYXNlPE5CTlRlY2hNYXBEQj4+IHtcclxuICAgICAgICBhd2FpdCB0aGlzLndhaXRVbnRpbFJlYWR5KHRpbWVvdXQpO1xyXG4gICAgICAgIGlmICghdGhpcy5kYikge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0RhdGFiYXNlIG5vdCByZWFkeS4nKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZGI7XHJcbiAgICB9XHJcblxyXG59IiwiaW1wb3J0IElNb2RlIGZyb20gXCIuLi9pbnRlcmZhY2VzL21vZGUuaW50ZXJmYWNlXCI7XHJcbmltcG9ydCB7IExlZ2VuZEl0ZW0sIE5iblBsYWNlLCBQb2ludEFuZFBsYWNlcyB9IGZyb20gXCIuLi90eXBlc1wiO1xyXG5pbXBvcnQgKiBhcyBMIGZyb20gXCJsZWFmbGV0XCI7XHJcblxyXG5pbXBvcnQge1xyXG4gICAgaXNQbGFjZUZUVFAsXHJcbiAgICBpc1BsYWNlRlRUQyxcclxuICAgIGlzUGxhY2VGVFRQQXZhaWwsXHJcbiAgICBpc1BsYWNlRlRUUFNvb24sXHJcbiAgICBpc1BsYWNlRlRUUEZhcixcclxuICAgIGlzRnd0b0ZUVEMsXHJcbiAgICBpc0Z3dG9GVFROLFxyXG4gICAgaXNTYXRUb0ZXLFxyXG4gICAgaXNEZWJ1Z01vZGVcclxufSBmcm9tIFwiLi4vdXRpbHNcIjtcclxuXHJcbmNvbnN0IENPTF9URUNIX0NPTVBMRVRFICAgICAgICAgPSAnIzFENzA0NCc7XHJcbmNvbnN0IENPTF9URUNIX0FWQUlMICAgICAgICAgICAgPSAnIzAyQjlFMyc7XHJcbmNvbnN0IENPTF9URUNIX0JVSUxERklOQUxJU0VEICAgPSAnI0ZGQkUwMCc7XHJcbmNvbnN0IENPTF9URUNIX0RFU0lHTiAgICAgICAgICAgPSAnI0ZGN0UwMSc7XHJcbmNvbnN0IENPTF9URUNIX0NPTU1JVFRFRCAgICAgICAgPSAnI0UzMDcxRCc7XHJcbmNvbnN0IENPTF9URUNIX01EVV9JTkJVSUxEICAgICAgPSAnIzAyMkJFMyc7XHJcbmNvbnN0IENPTF9URUNIX01EVV9FTElHSUJMRSAgICAgPSAnIzZCMDJFMyc7XHJcbmNvbnN0IENPTF9VTktOT1dOICAgICAgICAgICAgICAgPSAnIzg4ODg4OCc7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBUZWNoVXBncmFkZU1vZGUgaW1wbGVtZW50cyBJTW9kZSB7XHJcblxyXG4gICAgZmlsdGVyKHBsYWNlOiBOYm5QbGFjZSkgOiBib29sZWFuIHtcclxuXHJcbiAgICAgICAgaWYgKHBsYWNlLnRlY2hDaGFuZ2VTdGF0dXMgPT0gJ05vdCBQbGFubmVkJykge1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAocGxhY2UudGVjaENoYW5nZVN0YXR1cykge1xyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuXHJcbiAgICB9XHJcblxyXG4gICAgcG9pbnRDb2xvdXIocG9pbnQ6IFBvaW50QW5kUGxhY2VzKSA6IHN0cmluZyB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMucGxhY2VDb2xvdXIocG9pbnQucGxhY2VzWzBdKTtcclxuICAgIH1cclxuXHJcbiAgICBwbGFjZUNvbG91cihwbGFjZTogTmJuUGxhY2UpIDogc3RyaW5nIHtcclxuXHJcbiAgICAgICAgc3dpdGNoKHBsYWNlLnRlY2hDaGFuZ2VTdGF0dXMpIHtcclxuICAgICAgICAgICAgY2FzZSAnUHJldmlvdXMgVGVjaCBEaXNjb25uZWN0ZWQnOiByZXR1cm4gQ09MX1RFQ0hfQ09NUExFVEU7XHJcbiAgICAgICAgICAgIGNhc2UgJ05ldyBUZWNoIENvbm5lY3RlZCcgOiByZXR1cm4gQ09MX1RFQ0hfQ09NUExFVEU7XHJcbiAgICAgICAgICAgIGNhc2UgJ0luIERlc2lnbic6IHJldHVybiBDT0xfVEVDSF9ERVNJR047XHJcbiAgICAgICAgICAgIGNhc2UgJ0J1aWxkIEZpbmFsaXNlZCc6IHJldHVybiBDT0xfVEVDSF9CVUlMREZJTkFMSVNFRDtcclxuICAgICAgICAgICAgY2FzZSAnQ29tbWl0dGVkJzogcmV0dXJuIENPTF9URUNIX0NPTU1JVFRFRDtcclxuICAgICAgICAgICAgY2FzZSAnRWxpZ2libGUgVG8gT3JkZXInOiByZXR1cm4gQ09MX1RFQ0hfQVZBSUw7XHJcbiAgICAgICAgICAgIGNhc2UgJ01EVSBDb21wbGV4IEVsaWdpYmxlIFRvIEFwcGx5JzogcmV0dXJuIENPTF9URUNIX01EVV9FTElHSUJMRTtcclxuICAgICAgICAgICAgY2FzZSAnTURVIENvbXBsZXggUHJlbWlzZXMgSW4gQnVpbGQnOiByZXR1cm4gQ09MX1RFQ0hfTURVX0lOQlVJTEQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIFxyXG4gICAgICAgIHJldHVybiBDT0xfVU5LTk9XTjtcclxuXHJcbiAgICB9XHJcblxyXG4gICAgcmVuZGVyUG9wdXBDb250ZW50KHBsYWNlOiBOYm5QbGFjZSkgOiBIVE1MRWxlbWVudCB7XHJcbiAgICAgICAgXHJcbiAgICAgICAgY29uc3QgY29udGVudCA9IEwuRG9tVXRpbC5jcmVhdGUoJ2RpdicpO1xyXG5cclxuICAgICAgICBjb250ZW50LmlubmVySFRNTCA9ICc8Yj4nK3BsYWNlLmxvY2lkKyc8L2I+PC9icj4nXHJcbiAgICAgICAgICAgICsgcGxhY2UuYWRkcmVzczEgKyAnPC9icj4nXHJcbiAgICAgICAgICAgICsgcGxhY2UuYWRkcmVzczIgKyAnPC9icj4nXHJcbiAgICAgICAgICAgICsgJzxiciAvPic7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgIGNvbnRlbnQuaW5uZXJIVE1MICs9ICc8Yj5UZWNobm9sb2d5IFBsYW48L2I+PC9icj4nO1xyXG5cclxuICAgICAgICAvKiogVGVjaG5vbG9neSBQbGFuIEZpbmFsIFN0YXRlICovXHJcbiAgICAgICAgaWYgKHBsYWNlLnRlY2hUeXBlID09ICdGVFRQJ1xyXG4gICAgICAgICAgICB8fCAhcGxhY2UuYWx0UmVhc29uQ29kZVxyXG4gICAgICAgICAgICB8fCBwbGFjZS5hbHRSZWFzb25Db2RlID09ICdOVUxMX05BJ1xyXG4gICAgICAgICkge1xyXG4gICAgICAgICAgICBjb250ZW50LmlubmVySFRNTCArPSAnVGVjaG5vbG9neTogJyArIHBsYWNlLnRlY2hUeXBlICsgJzxiciAvPic7XHJcbiAgICAgICAgICAgIGlmIChwbGFjZS50ZWNoVHlwZSAhPSAnRlRUUCcpIHtcclxuICAgICAgICAgICAgICAgIGNvbnRlbnQuaW5uZXJIVE1MICs9ICdObyB0ZWNoIHVwZ3JhZGUgcGxhbm5lZDxiciAvPic7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IFxyXG4gICAgICAgIFxyXG4gICAgICAgIGVsc2UgaWYgKHBsYWNlLmFsdFJlYXNvbkNvZGUgJiYgcGxhY2UuYWx0UmVhc29uQ29kZS5tYXRjaCgvXkZUVFAvKSkge1xyXG4gICAgICAgICAgICBjb250ZW50LmlubmVySFRNTCArPSAnQ3VycmVudDogJyArIHBsYWNlLnRlY2hUeXBlICsgJzxiciAvPic7XHJcbiAgICAgICAgICAgIGNvbnRlbnQuaW5uZXJIVE1MICs9ICdDaGFuZ2U6ICcgKyBwbGFjZS5hbHRSZWFzb25Db2RlICsgJzxiciAvPic7XHJcbiAgICAgICAgICAgIGNvbnRlbnQuaW5uZXJIVE1MICs9ICdTdGF0dXM6ICcgKyBwbGFjZS50ZWNoQ2hhbmdlU3RhdHVzICsgJzxiciAvPic7XHJcbiAgICAgICAgICAgIGNvbnRlbnQuaW5uZXJIVE1MICs9ICdQcm9ncmFtOiAnICsgcGxhY2UucHJvZ3JhbVR5cGUgKyAnPGJyIC8+JztcclxuICAgICAgICAgICAgY29udGVudC5pbm5lckhUTUwgKz0gJ1RhcmdldCBRdHI6ICcgKyBwbGFjZS50YXJnZXRFbGlnaWJpbGl0eVF1YXJ0ZXIgKyAnPGJyIC8+JztcclxuICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGNvbnRlbnQuaW5uZXJIVE1MICs9ICdDdXJyZW50OiAnICsgcGxhY2UudGVjaFR5cGUgKyAnPGJyIC8+JztcclxuICAgICAgICAgICAgY29udGVudC5pbm5lckhUTUwgKz0gJ0NoYW5nZTogJyArIHBsYWNlLmFsdFJlYXNvbkNvZGUgKyAnPGJyIC8+JztcclxuICAgICAgICAgICAgY29udGVudC5pbm5lckhUTUwgKz0gJ1N0YXR1czogJyArIHBsYWNlLnRlY2hDaGFuZ2VTdGF0dXMgKyAnPGJyIC8+JztcclxuICAgICAgICAgICAgY29udGVudC5pbm5lckhUTUwgKz0gJ1Byb2dyYW06ICcgKyBwbGFjZS5wcm9ncmFtVHlwZSArICc8YnIgLz4nO1xyXG4gICAgICAgICAgICBjb250ZW50LmlubmVySFRNTCArPSAnVGFyZ2V0IFF0cjogJyArIHBsYWNlLnRhcmdldEVsaWdpYmlsaXR5UXVhcnRlciArICc8YnIgLz4nO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29udGVudC5pbm5lckhUTUwgKz0gJzxiciAvPic7IFxyXG4gICAgICAgIFxyXG4gICAgICAgIGlmIChpc0RlYnVnTW9kZSgpKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGhyID0gTC5Eb21VdGlsLmNyZWF0ZSgnaHInKTtcclxuICAgICAgICAgICAgY29uc3QgcHJlID0gTC5Eb21VdGlsLmNyZWF0ZSgncHJlJyk7XHJcbiAgICAgICAgICAgIHByZS5pbm5lckhUTUwgPSBKU09OLnN0cmluZ2lmeShwbGFjZSwgbnVsbCwgMik7XHJcbiAgICAgICAgICAgIGNvbnRlbnQuYXBwZW5kQ2hpbGQoaHIpO1xyXG4gICAgICAgICAgICBjb250ZW50LmFwcGVuZENoaWxkKHByZSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gY29udGVudDtcclxuICAgIH1cclxuXHJcbiAgICByZW5kZXJUb29sdGlwKHBsYWNlczogTmJuUGxhY2VbXSkgOiBzdHJpbmcge1xyXG4gICAgICAgIGxldCBsYWJlbCA9IHBsYWNlc1swXS5hZGRyZXNzMTtcclxuXHJcbiAgICAgICAgaWYgKHBsYWNlcy5sZW5ndGggPiAxKSB7XHJcbiAgICAgICAgICAgIGxhYmVsICs9ICcgKCArICcgKyAocGxhY2VzLmxlbmd0aCAtIDEpICsgJyBtb3JlKSc7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gbGFiZWw7XHJcblxyXG4gICAgfVxyXG5cclxuICAgIGdldExlZ2VuZEl0ZW1zKCk6IExlZ2VuZEl0ZW1bXSB7XHJcbiAgICAgICAgcmV0dXJuIFtcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgbGFiZWw6ICdQcmV2aW91cyBUZWNoIERpc2Nvbm5lY3RlZCcsXHJcbiAgICAgICAgICAgICAgICBjb2xvdXI6IENPTF9URUNIX0NPTVBMRVRFXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGxhYmVsOiAnTmV3IFRlY2ggQ29ubmVjdGVkJyxcclxuICAgICAgICAgICAgICAgIGNvbG91cjogQ09MX1RFQ0hfQ09NUExFVEVcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgbGFiZWw6ICdFbGlnaWJsZSBUbyBPcmRlcicsXHJcbiAgICAgICAgICAgICAgICBjb2xvdXI6IENPTF9URUNIX0FWQUlMXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGxhYmVsOiAnQnVpbGQgRmluYWxpc2VkJyxcclxuICAgICAgICAgICAgICAgIGNvbG91cjogQ09MX1RFQ0hfQlVJTERGSU5BTElTRURcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgbGFiZWw6ICdJbiBEZXNpZ24nLFxyXG4gICAgICAgICAgICAgICAgY29sb3VyOiBDT0xfVEVDSF9ERVNJR05cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgbGFiZWw6ICdDb21taXR0ZWQnLFxyXG4gICAgICAgICAgICAgICAgY29sb3VyOiBDT0xfVEVDSF9DT01NSVRURURcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgbGFiZWw6ICdNRFUgQ29tcGxleCBFbGlnaWJsZSBUbyBBcHBseScsXHJcbiAgICAgICAgICAgICAgICBjb2xvdXI6IENPTF9URUNIX01EVV9FTElHSUJMRVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBsYWJlbDogJ01EVSBDb21wbGV4IFByZW1pc2VzIEluIEJ1aWxkJyxcclxuICAgICAgICAgICAgICAgIGNvbG91cjogQ09MX1RFQ0hfTURVX0lOQlVJTERcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgbGFiZWw6ICdVbmtub3duJyxcclxuICAgICAgICAgICAgICAgIGNvbG91cjogQ09MX1VOS05PV05cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIF07XHJcbiAgICB9XHJcblxyXG59IiwiLyoqXHJcbiAqIEBmaWxlIE1haW4gZW50cnkgcG9pbnQgZm9yIG1hcCBzY3JpcHRzLlxyXG4gKiBAbW9kdWxlIGluZGV4LnRzXHJcbiAqIEB2ZXJzaW9uIDEuMC4wXHJcbiAqIEBhdXRob3IgS29hbGFHXHJcbiAqIEBsaWNlbnNlIE1JVFxyXG4gKi9cclxuXHJcbmltcG9ydCBMaXBBcGkgZnJvbSBcIi4vYXBpL2xpcF9hcGkuY2xhc3NcIjtcclxuaW1wb3J0IE5iblRlY2hNYXAgZnJvbSBcIi4vbmJuX3RlY2hfbWFwLmNsYXNzXCI7XHJcbmltcG9ydCBDb250cm9EaXNwbGF5TW9kZSBmcm9tIFwiLi9jb250cm9scy9jb250cm9sX2Rpc3BsYXlfbW9kZS5jbGFzc1wiO1xyXG5pbXBvcnQgeyBNZW1vcnlEYXRhc3RvcmUgfSBmcm9tIFwiLi9kYXRhc3RvcmUvZGF0YXN0b3JlLm1lbW9yeS5jbGFzc1wiO1xyXG5pbXBvcnQgQWxsTW9kZSBmcm9tIFwiLi9tb2Rlcy9tb2RlLmFsbFwiO1xyXG5pbXBvcnQgQ29udHJvbExlZ2VuZCBmcm9tIFwiLi9jb250cm9scy9jb250cm9sX2xlZ2VuZC5jbGFzc1wiO1xyXG5cclxuaW1wb3J0ICcuL2Fzc2V0cy9TY3JlZW5zaG90MS5wbmcnO1xyXG5pbXBvcnQgJy4vYXNzZXRzL1NjcmVlbnNob3QyLnBuZyc7XHJcbmltcG9ydCAnLi9hc3NldHMvU2NyZWVuc2hvdDMucG5nJztcclxuXHJcbmltcG9ydCB7IExvZ2dlciB9IGZyb20gXCIuL3V0aWxzXCI7XHJcbmltcG9ydCB7IE5iblBsYWNlIH0gZnJvbSBcIi4vdHlwZXNcIjtcclxuaW1wb3J0IHsgSW5kZXhEQlBsYWNlU3RvcmUgfSBmcm9tIFwiLi9wbGFjZXN0b3JlL2luZGV4ZGIucGxhY2VzdG9yZVwiO1xyXG5pbXBvcnQgVGVjaFVwZ3JhZGVNb2RlIGZyb20gXCIuL21vZGVzL3RlY2h1cGdyYWRlLm1vZGVcIjtcclxuY29uc3QgbG9nZ2VyID0gbmV3IExvZ2dlcignaW5kZXgudHMnKTtcclxuXHJcbmNvbnN0IGlzRGV2ZWxvcG1lbnQgPSAoKCkgPT4ge1xyXG4gICAgdHJ5IHtcclxuICAgICAgICByZXR1cm4gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdkZXZlbG9wbWVudCcgfHwgcHJvY2Vzcy5hcmd2LmluY2x1ZGVzKCdkZXZlbG9wbWVudCcpO1xyXG4gICAgfSBjYXRjaCAoZSkge1xyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxufSkoKTtcclxubG9nZ2VyLmRlYnVnKCdpc0RldmVsb3BtZW50JywgaXNEZXZlbG9wbWVudCk7XHJcblxyXG5pZiAoJ3NlcnZpY2VXb3JrZXInIGluIG5hdmlnYXRvciAmJiAhaXNEZXZlbG9wbWVudCkge1xyXG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ2xvYWQnLCAoKSA9PiB7XHJcbiAgICAgICAgbmF2aWdhdG9yLnNlcnZpY2VXb3JrZXIucmVnaXN0ZXIoJy4vc2VydmljZS13b3JrZXIuanMnKS50aGVuKHJlZ2lzdHJhdGlvbiA9PiB7XHJcbiAgICAgICAgICAgIGxvZ2dlci5pbmZvKCdTVyByZWdpc3RlcmVkOiAnLCByZWdpc3RyYXRpb24pO1xyXG4gICAgICAgIH0pLmNhdGNoKHJlZ2lzdHJhdGlvbkVycm9yID0+IHtcclxuICAgICAgICAgICAgbG9nZ2VyLndhcm4oJ1NXIHJlZ2lzdHJhdGlvbiBmYWlsZWQ6ICcsIHJlZ2lzdHJhdGlvbkVycm9yKTtcclxuICAgICAgICB9KTtcclxuICAgIH0pO1xyXG59XHJcblxyXG5cclxuLyoqXHJcbiAqIEBmdW5jdGlvbiByZWFkeVxyXG4gKiBAZGVzY3JpcHRpb24gRXhlY3V0ZXMgYSBmdW5jdGlvbiB3aGVuIHRoZSBET00gaXMgcmVhZHkuXHJcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IGZuIC0gRnVuY3Rpb24gdG8gZXhlY3V0ZS5cclxuICogQHJldHVybnMge3ZvaWR9XHJcbiAqIEBzZWUge0BsaW5rIGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vYS85ODk5NzAxLzEyOTMyNTZ9XHJcbiAqL1xyXG5mdW5jdGlvbiByZWFkeShmbjogKCkgPT4gdm9pZCkge1xyXG4gICAgLy8gc2VlIGlmIERPTSBpcyBhbHJlYWR5IGF2YWlsYWJsZVxyXG4gICAgaWYgKGRvY3VtZW50LnJlYWR5U3RhdGUgPT09IFwiY29tcGxldGVcIiB8fCBkb2N1bWVudC5yZWFkeVN0YXRlID09PSBcImludGVyYWN0aXZlXCIpIHtcclxuICAgICAgICAvLyBjYWxsIG9uIG5leHQgYXZhaWxhYmxlIHRpY2tcclxuICAgICAgICBzZXRUaW1lb3V0KGZuLCAxKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcIkRPTUNvbnRlbnRMb2FkZWRcIiwgZm4pO1xyXG4gICAgfVxyXG59XHJcblxyXG4vLyBFeGVjdXRlIHdoZW4gRE9NIGlzIHJlYWR5LlxyXG5yZWFkeShmdW5jdGlvbigpIHtcclxuXHJcbiAgICBjb25zdCBtYXBBcGkgPSBuZXcgTGlwQXBpKCk7XHJcbiAgICAvL2NvbnN0IGRhdGFzdG9yZSA9IG5ldyBJbmRleERCRGF0YXN0b3JlKCk7XHJcbiAgICAvLyBjb25zdCBkYXRhc3RvcmUgPSBuZXcgTWVtb3J5RGF0YXN0b3JlKCk7XHJcbiAgICAvL2NvbnN0IG1hcmtlckxheWVyID0gbmV3IE1hcmtlckxheWVyQ2x1c3RlcigpO1xyXG5cclxuICAgIGNvbnN0IG1vZGVBbGwgPSBuZXcgQWxsTW9kZSgpO1xyXG4gICAgY29uc3QgbW9kZVRlY2hVcGdyYWRlID0gbmV3IFRlY2hVcGdyYWRlTW9kZSgpO1xyXG5cclxuICAgIGNvbnN0IGdldERlZmF1bHRNb2RlU3RyaW5nID0gKCkgPT4ge1xyXG4gICAgICAgIGNvbnN0IHVybFBhcmFtcyA9IG5ldyBVUkxTZWFyY2hQYXJhbXMod2luZG93LmxvY2F0aW9uLnNlYXJjaCk7XHJcbiAgICAgICAgY29uc3QgbW9kZUZyb21VcmwgPSB1cmxQYXJhbXMuZ2V0KCdtb2RlJyk7XHJcblxyXG4gICAgICAgIGlmIChtb2RlRnJvbVVybCkge1xyXG4gICAgICAgICAgICByZXR1cm4gbW9kZUZyb21Vcmw7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zdCBtb2RlRnJvbVN0b3JhZ2UgPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgnbW9kZScpO1xyXG4gICAgICAgIGlmIChtb2RlRnJvbVN0b3JhZ2UpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG1vZGVGcm9tU3RvcmFnZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiAnYWxsJztcclxuICAgIH07XHJcbiAgICBjb25zdCBnZXRNb2RlID0gKG1vZGU/OiBzdHJpbmcpID0+IHtcclxuXHJcbiAgICAgICAgaWYgKCFtb2RlKSB7XHJcbiAgICAgICAgICAgIG1vZGUgPSBnZXREZWZhdWx0TW9kZVN0cmluZygpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgc3dpdGNoIChtb2RlKSB7XHJcbiAgICAgICAgICAgIGNhc2UgJ2FsbCc6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbW9kZUFsbDtcclxuICAgICAgICAgICAgY2FzZSAndXBncmFkZSc6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbW9kZVRlY2hVcGdyYWRlO1xyXG4gICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG1vZGVBbGw7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IGRlZmF1bHRNb2RlID0gZ2V0TW9kZSgpO1xyXG5cclxuICAgIGNvbnN0IHBsYWNlU3RvcmUgPSBuZXcgSW5kZXhEQlBsYWNlU3RvcmUoKTtcclxuXHJcbiAgICBjb25zdCBuYm5UZWNoTWFwID0gbmV3IE5iblRlY2hNYXAoe1xyXG4gICAgICAgIG1hcENvbnRhaW5lcklkOiAnbWFwJyxcclxuICAgICAgICBhcGk6IG1hcEFwaSxcclxuICAgICAgICAvL2RhdGFzdG9yZTogZGF0YXN0b3JlLFxyXG4gICAgICAgIC8vbWFya2VyTGF5ZXI6IG1hcmtlckxheWVyLFxyXG4gICAgICAgIGRlZmF1bHRNb2RlSGFuZGxlcjogZGVmYXVsdE1vZGUsXHJcbiAgICAgICAgcGxhY2VzdG9yZTogcGxhY2VTdG9yZSxcclxuICAgIH0pO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQWRkIENvbnRyb2xzIHRvIE1hcFxyXG4gICAgICovXHJcblxyXG4gICAgLy8gRGlzcGxheSBNb2RlIENvbnRyb2xcclxuICAgIGNvbnN0IGNEaXNwbGF5TW9kZSA9IG5ldyBDb250cm9EaXNwbGF5TW9kZSgpO1xyXG4gICAgbmJuVGVjaE1hcC5hZGRDb250cm9sKCdkaXNwbGF5bW9kZScsIGNEaXNwbGF5TW9kZSk7XHJcblxyXG4gICAgLy8gTGVnZW5kIENvbnRyb2xcclxuICAgIGNvbnN0IGNMZWdlbmQgPSBuZXcgQ29udHJvbExlZ2VuZCgpO1xyXG4gICAgY0xlZ2VuZC51cGRhdGVMZWdlbmQoZGVmYXVsdE1vZGUuZ2V0TGVnZW5kSXRlbXMoKSk7XHJcbiAgICBuYm5UZWNoTWFwLmFkZENvbnRyb2woJ2xlZ2VuZCcsIGNMZWdlbmQpO1xyXG5cclxuICAgIC8vIFNlYXJjaCBDb250cm9sXHJcblxyXG4gICAgLy8gUHJvZ3Jlc3MgQ29udHJvbFxyXG5cclxuICAgIC8vIEFkZCBldmVudCBMaXN0ZW5lcnNcclxuICAgIGNEaXNwbGF5TW9kZS5vbignY2hhbmdlJywgKGUpID0+IHtcclxuICAgICAgICBjb25zdCBtb2RlID0gZ2V0TW9kZShlLnN0YXRlKTtcclxuICAgICAgICBpZiAoIW1vZGUpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBcclxuICAgICAgICBuYm5UZWNoTWFwLnNldE1vZGVIYW5kbGVyKG1vZGUpO1xyXG4gICAgICAgIGNMZWdlbmQudXBkYXRlTGVnZW5kKG1vZGUuZ2V0TGVnZW5kSXRlbXMoKSk7XHJcblxyXG4gICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCdtb2RlJywgZS5zdGF0ZSk7XHJcblxyXG4gICAgICAgIC8vIEFkZCBtb2RlIHBhcmFtIHRvIGV4aXN0aW5nIHVybFxyXG4gICAgICAgIGNvbnN0IHVybCA9IG5ldyBVUkwod2luZG93LmxvY2F0aW9uLmhyZWYpO1xyXG4gICAgICAgIHVybC5zZWFyY2hQYXJhbXMuc2V0KCdtb2RlJywgZS5zdGF0ZSk7XHJcbiAgICAgICAgd2luZG93Lmhpc3RvcnkucHVzaFN0YXRlKHt9LCAnJywgdXJsLnRvU3RyaW5nKCkpO1xyXG4gICAgICAgIFxyXG4gICAgfSk7XHJcblxyXG59KSIsIi8vIFRoZSBtb2R1bGUgY2FjaGVcbnZhciBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18gPSB7fTtcblxuLy8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbmZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG5cdHZhciBjYWNoZWRNb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdO1xuXHRpZiAoY2FjaGVkTW9kdWxlICE9PSB1bmRlZmluZWQpIHtcblx0XHRyZXR1cm4gY2FjaGVkTW9kdWxlLmV4cG9ydHM7XG5cdH1cblx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcblx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0gPSB7XG5cdFx0aWQ6IG1vZHVsZUlkLFxuXHRcdC8vIG5vIG1vZHVsZS5sb2FkZWQgbmVlZGVkXG5cdFx0ZXhwb3J0czoge31cblx0fTtcblxuXHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cblx0X193ZWJwYWNrX21vZHVsZXNfX1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cblx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcblx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufVxuXG4vLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuX193ZWJwYWNrX3JlcXVpcmVfXy5tID0gX193ZWJwYWNrX21vZHVsZXNfXztcblxuIiwiLy8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbl9fd2VicGFja19yZXF1aXJlX18ubiA9IChtb2R1bGUpID0+IHtcblx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG5cdFx0KCkgPT4gKG1vZHVsZVsnZGVmYXVsdCddKSA6XG5cdFx0KCkgPT4gKG1vZHVsZSk7XG5cdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsIHsgYTogZ2V0dGVyIH0pO1xuXHRyZXR1cm4gZ2V0dGVyO1xufTsiLCIvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9ucyBmb3IgaGFybW9ueSBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSAoZXhwb3J0cywgZGVmaW5pdGlvbikgPT4ge1xuXHRmb3IodmFyIGtleSBpbiBkZWZpbml0aW9uKSB7XG5cdFx0aWYoX193ZWJwYWNrX3JlcXVpcmVfXy5vKGRlZmluaXRpb24sIGtleSkgJiYgIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBrZXkpKSB7XG5cdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywga2V5LCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZGVmaW5pdGlvbltrZXldIH0pO1xuXHRcdH1cblx0fVxufTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLmcgPSAoZnVuY3Rpb24oKSB7XG5cdGlmICh0eXBlb2YgZ2xvYmFsVGhpcyA9PT0gJ29iamVjdCcpIHJldHVybiBnbG9iYWxUaGlzO1xuXHR0cnkge1xuXHRcdHJldHVybiB0aGlzIHx8IG5ldyBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xuXHR9IGNhdGNoIChlKSB7XG5cdFx0aWYgKHR5cGVvZiB3aW5kb3cgPT09ICdvYmplY3QnKSByZXR1cm4gd2luZG93O1xuXHR9XG59KSgpOyIsIl9fd2VicGFja19yZXF1aXJlX18ubyA9IChvYmosIHByb3ApID0+IChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKSkiLCJ2YXIgc2NyaXB0VXJsO1xuaWYgKF9fd2VicGFja19yZXF1aXJlX18uZy5pbXBvcnRTY3JpcHRzKSBzY3JpcHRVcmwgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLmcubG9jYXRpb24gKyBcIlwiO1xudmFyIGRvY3VtZW50ID0gX193ZWJwYWNrX3JlcXVpcmVfXy5nLmRvY3VtZW50O1xuaWYgKCFzY3JpcHRVcmwgJiYgZG9jdW1lbnQpIHtcblx0aWYgKGRvY3VtZW50LmN1cnJlbnRTY3JpcHQpXG5cdFx0c2NyaXB0VXJsID0gZG9jdW1lbnQuY3VycmVudFNjcmlwdC5zcmM7XG5cdGlmICghc2NyaXB0VXJsKSB7XG5cdFx0dmFyIHNjcmlwdHMgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZShcInNjcmlwdFwiKTtcblx0XHRpZihzY3JpcHRzLmxlbmd0aCkge1xuXHRcdFx0dmFyIGkgPSBzY3JpcHRzLmxlbmd0aCAtIDE7XG5cdFx0XHR3aGlsZSAoaSA+IC0xICYmICFzY3JpcHRVcmwpIHNjcmlwdFVybCA9IHNjcmlwdHNbaS0tXS5zcmM7XG5cdFx0fVxuXHR9XG59XG4vLyBXaGVuIHN1cHBvcnRpbmcgYnJvd3NlcnMgd2hlcmUgYW4gYXV0b21hdGljIHB1YmxpY1BhdGggaXMgbm90IHN1cHBvcnRlZCB5b3UgbXVzdCBzcGVjaWZ5IGFuIG91dHB1dC5wdWJsaWNQYXRoIG1hbnVhbGx5IHZpYSBjb25maWd1cmF0aW9uXG4vLyBvciBwYXNzIGFuIGVtcHR5IHN0cmluZyAoXCJcIikgYW5kIHNldCB0aGUgX193ZWJwYWNrX3B1YmxpY19wYXRoX18gdmFyaWFibGUgZnJvbSB5b3VyIGNvZGUgdG8gdXNlIHlvdXIgb3duIGxvZ2ljLlxuaWYgKCFzY3JpcHRVcmwpIHRocm93IG5ldyBFcnJvcihcIkF1dG9tYXRpYyBwdWJsaWNQYXRoIGlzIG5vdCBzdXBwb3J0ZWQgaW4gdGhpcyBicm93c2VyXCIpO1xuc2NyaXB0VXJsID0gc2NyaXB0VXJsLnJlcGxhY2UoLyMuKiQvLCBcIlwiKS5yZXBsYWNlKC9cXD8uKiQvLCBcIlwiKS5yZXBsYWNlKC9cXC9bXlxcL10rJC8sIFwiL1wiKTtcbl9fd2VicGFja19yZXF1aXJlX18ucCA9IHNjcmlwdFVybDsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLmIgPSBkb2N1bWVudC5iYXNlVVJJIHx8IHNlbGYubG9jYXRpb24uaHJlZjtcblxuLy8gb2JqZWN0IHRvIHN0b3JlIGxvYWRlZCBhbmQgbG9hZGluZyBjaHVua3Ncbi8vIHVuZGVmaW5lZCA9IGNodW5rIG5vdCBsb2FkZWQsIG51bGwgPSBjaHVuayBwcmVsb2FkZWQvcHJlZmV0Y2hlZFxuLy8gW3Jlc29sdmUsIHJlamVjdCwgUHJvbWlzZV0gPSBjaHVuayBsb2FkaW5nLCAwID0gY2h1bmsgbG9hZGVkXG52YXIgaW5zdGFsbGVkQ2h1bmtzID0ge1xuXHQxNDM6IDBcbn07XG5cbi8vIG5vIGNodW5rIG9uIGRlbWFuZCBsb2FkaW5nXG5cbi8vIG5vIHByZWZldGNoaW5nXG5cbi8vIG5vIHByZWxvYWRlZFxuXG4vLyBubyBITVJcblxuLy8gbm8gSE1SIG1hbmlmZXN0XG5cbl9fd2VicGFja19yZXF1aXJlX18uTy5qID0gKGNodW5rSWQpID0+IChpbnN0YWxsZWRDaHVua3NbY2h1bmtJZF0gPT09IDApO1xuXG4vLyBpbnN0YWxsIGEgSlNPTlAgY2FsbGJhY2sgZm9yIGNodW5rIGxvYWRpbmdcbnZhciB3ZWJwYWNrSnNvbnBDYWxsYmFjayA9IChwYXJlbnRDaHVua0xvYWRpbmdGdW5jdGlvbiwgZGF0YSkgPT4ge1xuXHR2YXIgW2NodW5rSWRzLCBtb3JlTW9kdWxlcywgcnVudGltZV0gPSBkYXRhO1xuXHQvLyBhZGQgXCJtb3JlTW9kdWxlc1wiIHRvIHRoZSBtb2R1bGVzIG9iamVjdCxcblx0Ly8gdGhlbiBmbGFnIGFsbCBcImNodW5rSWRzXCIgYXMgbG9hZGVkIGFuZCBmaXJlIGNhbGxiYWNrXG5cdHZhciBtb2R1bGVJZCwgY2h1bmtJZCwgaSA9IDA7XG5cdGlmKGNodW5rSWRzLnNvbWUoKGlkKSA9PiAoaW5zdGFsbGVkQ2h1bmtzW2lkXSAhPT0gMCkpKSB7XG5cdFx0Zm9yKG1vZHVsZUlkIGluIG1vcmVNb2R1bGVzKSB7XG5cdFx0XHRpZihfX3dlYnBhY2tfcmVxdWlyZV9fLm8obW9yZU1vZHVsZXMsIG1vZHVsZUlkKSkge1xuXHRcdFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLm1bbW9kdWxlSWRdID0gbW9yZU1vZHVsZXNbbW9kdWxlSWRdO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRpZihydW50aW1lKSB2YXIgcmVzdWx0ID0gcnVudGltZShfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblx0fVxuXHRpZihwYXJlbnRDaHVua0xvYWRpbmdGdW5jdGlvbikgcGFyZW50Q2h1bmtMb2FkaW5nRnVuY3Rpb24oZGF0YSk7XG5cdGZvcig7aSA8IGNodW5rSWRzLmxlbmd0aDsgaSsrKSB7XG5cdFx0Y2h1bmtJZCA9IGNodW5rSWRzW2ldO1xuXHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhpbnN0YWxsZWRDaHVua3MsIGNodW5rSWQpICYmIGluc3RhbGxlZENodW5rc1tjaHVua0lkXSkge1xuXHRcdFx0aW5zdGFsbGVkQ2h1bmtzW2NodW5rSWRdWzBdKCk7XG5cdFx0fVxuXHRcdGluc3RhbGxlZENodW5rc1tjaHVua0lkXSA9IDA7XG5cdH1cblx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18uTyhyZXN1bHQpO1xufVxuXG52YXIgY2h1bmtMb2FkaW5nR2xvYmFsID0gc2VsZltcIndlYnBhY2tDaHVua1wiXSA9IHNlbGZbXCJ3ZWJwYWNrQ2h1bmtcIl0gfHwgW107XG5jaHVua0xvYWRpbmdHbG9iYWwuZm9yRWFjaCh3ZWJwYWNrSnNvbnBDYWxsYmFjay5iaW5kKG51bGwsIDApKTtcbmNodW5rTG9hZGluZ0dsb2JhbC5wdXNoID0gd2VicGFja0pzb25wQ2FsbGJhY2suYmluZChudWxsLCBjaHVua0xvYWRpbmdHbG9iYWwucHVzaC5iaW5kKGNodW5rTG9hZGluZ0dsb2JhbCkpOyIsIl9fd2VicGFja19yZXF1aXJlX18ubmMgPSB1bmRlZmluZWQ7IiwiLy8gc3RhcnR1cFxuLy8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4vLyBUaGlzIGVudHJ5IG1vZHVsZSBkZXBlbmRzIG9uIG90aGVyIGxvYWRlZCBjaHVua3MgYW5kIGV4ZWN1dGlvbiBuZWVkIHRvIGJlIGRlbGF5ZWRcbnZhciBfX3dlYnBhY2tfZXhwb3J0c19fID0gX193ZWJwYWNrX3JlcXVpcmVfXy5PKHVuZGVmaW5lZCwgWzU3OF0sICgpID0+IChfX3dlYnBhY2tfcmVxdWlyZV9fKDE5NikpKVxuX193ZWJwYWNrX2V4cG9ydHNfXyA9IF9fd2VicGFja19yZXF1aXJlX18uTyhfX3dlYnBhY2tfZXhwb3J0c19fKTtcbiJdLCJuYW1lcyI6WyJkZWZlcnJlZCIsImZldGNoUGFnZSIsImJvdW5kcyIsInBhZ2UiLCJwcm9jZWVkIiwibm9ydGgiLCJnZXROb3J0aCIsInRvRml4ZWQiLCJlYXN0IiwiZ2V0RWFzdCIsInNvdXRoIiwiZ2V0U291dGgiLCJ3ZXN0IiwiZ2V0V2VzdCIsIkVycm9yIiwiTWF0aCIsIm1heCIsIk51bWJlciIsIlByb21pc2UiLCJyZXNvbHZlIiwicmVqZWN0IiwiZmV0Y2giLCJtZXRob2QiLCJyZWRpcmVjdCIsInRoZW4iLCJyZXNwb25zZSIsInRleHQiLCJyZXN1bHQiLCJwYXJzZWRSZXN1bHQiLCJKU09OIiwicGFyc2UiLCJkYXRhIiwiY2F0Y2giLCJuYW1lIiwic3ViIiwiTG9nZ2VyIiwidGhpcyIsImVycm9yIiwiY29uc29sZSIsImFyZ3MiLCJ3YXJuIiwiZGVidWciLCJpc0RlYnVnTW9kZSIsImluZm8iLCJsb2ciLCJ3aW5kb3ciLCJsb2NhdGlvbiIsImhyZWYiLCJpbmNsdWRlcyIsIm1hcCIsIm1vZGVIYW5kbGVyIiwicGxhY2VTdG9yZSIsImxvZ2dlciIsInBvaW50TWFwIiwiTWFwIiwibWFya2VycyIsIm1heENsdXN0ZXJSYWRpdXMiLCJtYXJrZXJDbHVzdGVyUmFkaXVzIiwic3BpZGVyZnlPbk1heFpvb20iLCJkaXNhYmxlQ2x1c3RlcmluZ0F0Wm9vbSIsInNob3dDb3ZlcmFnZU9uSG92ZXIiLCJ6b29tVG9Cb3VuZHNPbkNsaWNrIiwicmVtb3ZlT3V0c2lkZVZpc2libGVCb3VuZHMiLCJpY29uQ3JlYXRlRnVuY3Rpb24iLCJjaHVua2VkTG9hZGluZyIsImNodW5rSW50ZXJ2YWwiLCJjaHVua0RlbGF5IiwiY2h1bmtQcm9ncmVzcyIsInByb2Nlc3NlZCIsInRvdGFsIiwiZWxhcHNlZCIsImFkZFRvIiwib24iLCJldmVudCIsInRhcmdldCIsImdldFpvb20iLCJhZGRQb2ludHMiLCJwb2ludHMiLCJuZXdMYXllcnMiLCJmb3JFYWNoIiwicG9pbnQiLCJsYXRMbmdTdHJpbmciLCJsYXQiLCJsbmciLCJnZXQiLCJuZXdMYXllciIsInJlbmRlclBvaW50IiwicHVzaCIsInNldCIsImxheWVyIiwibGVuZ3RoIiwiYWRkTGF5ZXJzIiwicmVtb3ZlQWxsUG9pbnRzIiwiY2xlYXJMYXllcnMiLCJjbGVhciIsInJlbW92ZUFsbE1hcmtlcnMiLCJ6b29tIiwidXBkYXRlUG9pbnRTdHlsZSIsInBsYWNlcyIsInNldFN0eWxlIiwiZmlsbENvbG9yIiwicGxhY2VDb2xvdXIiLCJzZXRUb29sdGlwQ29udGVudCIsInJlbmRlclRvb2x0aXAiLCJyZWRyYXciLCJzZXRNb2RlSGFuZGxlciIsInBsYWNlc3RvcmUiLCJERVBfcmVmcmVzaE1hcmtlcnNJbnNpZGVCb3VuZHMiLCJtRmlsdGVyIiwicmVtb3ZlTWFya2Vyc091dHNpZGVCb3VuZHMiLCJjaXJjbGVNYXJrZXJMYXllciIsInJhZGl1cyIsImNvbCIsInVuZGVmaW5lZCIsImNvbG9yIiwid2VpZ2h0Iiwib3BhY2l0eSIsImZpbGxPcGFjaXR5IiwiYmluZFBvcHVwIiwiZ2V0UGxhY2VzIiwiaWRzIiwicG9wdXAiLCJyZW5kZXJQb3B1cCIsInNldFBvcHVwQ29udGVudCIsImxvYWRpbmdQb3B1cCIsImRvY3VtZW50IiwiY3JlYXRlRWxlbWVudCIsImlubmVySFRNTCIsImF1dG9QYW4iLCJhdXRvQ2xvc2UiLCJiaW5kVG9vbHRpcCIsImxhYmVsIiwiYWRkIiwicmVuZGVyUG9wdXBDb250ZW50IiwicmVuZG9yUG9wdXBNdWx0aSIsImdyb3VwRGl2IiwicGxhY2VDb250YWluZXJzIiwic29ydCIsImEiLCJiIiwiYWRkcmVzczEiLCJwbGFjZSIsInBsYWNlQ29udGFpbmVyIiwiYnV0dG9uIiwiY2xhc3NMaXN0IiwidHlwZSIsInBhbmVsIiwiYXBwZW5kQ2hpbGQiLCJhZGRFdmVudExpc3RlbmVyIiwiY3VycmVudGx5QWN0aXZlIiwiY29udGFpbnMiLCJyZW1vdmUiLCJjbHVzdGVyIiwiY29sb3JBcnJheSIsImdldEFsbENoaWxkTWFya2VycyIsIm1hcmtlciIsIm9wdGlvbnMiLCJjb2xvckNvdW50cyIsImNvbG9yQXJyYXlTb3J0ZWQiLCJPYmplY3QiLCJrZXlzIiwiYmFja2dyb3VuZCIsImxhc3RDb2xvdXJQZXJjZW50IiwiaW5kZXgiLCJ0aGlzQ29sb3VyUGVyY2VudCIsInJhbmRvbUlkIiwicmFuZG9tIiwidG9TdHJpbmciLCJzdWJzdHJpbmciLCJodG1sIiwiZ2V0Q2hpbGRDb3VudCIsImNsYXNzTmFtZSIsIk1BWF9VTkZFVENIRURfQk9YRVMiLCJpbml0aWFsVmlld1NldCIsImZldGNoZWRCb3hlcyIsIlNldCIsInByb2dyZXNzQ29udHJvbCIsInBvc2l0aW9uIiwicHJvZ3Jlc3NJdGVtcyIsImNvbnRyb2xzIiwiTmJuVGVjaE1hcCIsIkRFRkFVTFRfT1BUSU9OUyIsImFwaSIsImRlZmF1bHRNb2RlSGFuZGxlciIsIm1hcENvbnRhaW5lcklkIiwicHJlZmVyQ2FudmFzIiwibWFya2VyTGF5ZXIiLCJtYXBUaWxlTGF5ZXIiLCJhdHRyaWJ1dGlvbiIsInN1YmRvbWFpbnMiLCJjcm9zc09yaWdpbiIsIm1pblpvb20iLCJtYXhab29tIiwiTCIsIkdlb2NvZGVyIiwiZ2VvY29kZXIiLCJtYXBHZW9jb2RlciIsIkFyY0dpcyIsImFwaUtleSIsImdlb2NvZGluZ1F1ZXJ5UGFyYW1zIiwiY291bnRyeUNvZGUiLCJjYXRlZ29yeSIsIm1hcFNlYXJjaCIsImNvbGxhcHNlZCIsImRlZmF1bHRNYXJrR2VvY29kZSIsInN1Z2dlc3RNaW5MZW5ndGgiLCJzdWdnZXN0VGltZW91dCIsImJib3giLCJnZW9jb2RlIiwiZml0Qm91bmRzIiwibWFwTG9jYXRlIiwibG9jYXRlIiwibG9jYXRlT3B0aW9ucyIsInNldFZpZXciLCJrZWVwQ3VycmVudFpvb21MZXZlbCIsImluaXRpYWxab29tTGV2ZWwiLCJjYWNoZUxvY2F0aW9uIiwibG9jYWxTdG9yYWdlIiwic2V0SXRlbSIsInJlbW92ZUl0ZW0iLCJzZXRJbml0aWFsTWFwVmlldyIsImNlbnRlciIsImdldENlbnRlciIsInN0cmluZ2lmeSIsInB1c2hCcm93c2VySGlzdG9yeSIsImZldGNoRGF0YUZvckN1cnJlbnRWaWV3IiwidXJsUGFyYW1zIiwiVVJMU2VhcmNoUGFyYW1zIiwic2VhcmNoIiwicGFyc2VJbnQiLCJuZXdVcmwiLCJwYXRobmFtZSIsImhpc3RvcnkiLCJwdXNoU3RhdGUiLCJnZXRTdGFydFBvcyIsInN0YXJ0UG9zU3RyaW5nIiwiZ2V0SXRlbSIsImdlb0ZsYWciLCJzdGFydFBvcyIsInN0YXJ0Iiwic2V0Wm9vbSIsImdldEJveGVzSW5Cb3VuZHMiLCJub3J0aG1vc3QiLCJjZWlsIiwid2VzdG1tb3N0IiwiZmxvb3IiLCJib3hlcyIsImxhdGl0dWRlIiwibG9uZ2l0dWRlIiwiYm94IiwiZ2V0Q3VycmVudFZpZXdCb3hlcyIsImdldEJvdW5kcyIsImhpZGVNYXJrZXJzT3V0c2lkZUN1cnJlbnRWaWV3IiwibWFwQm91bmRzIiwicGFkIiwiREVQX2Rpc3BsYXlNYXJrZXJzSW5DdXJyZW50VmlldyIsImF0dGVtcHQiLCJzaG93Wm9vbUluV2FybmluZyIsInpvb21Jbldhcm5pbmdDb250cm9sIiwib25BZGQiLCJkaXYiLCJjcmVhdGUiLCJzdHlsZSIsImJhY2tncm91bmRDb2xvciIsInBhZGRpbmciLCJzZXRUaW1lb3V0IiwiYWRkQ29udHJvbCIsImhpZGVab29tSW5XYXJuaW5nIiwicmVtb3ZlQ29udHJvbCIsInVuZmV0Y2hlZEJveGVzIiwiZmlsdGVyIiwiaGFzIiwidXBkYXRlS2V5IiwicHJvZ3Jlc3NJdGVtIiwiY3JlYXRlUHJvZ3Jlc3MiLCJyZW5kZXJQcm9ncmVzcyIsImJveGVzUHJvY2Vzc2VkIiwidXBkYXRlUHJvZ3Jlc3MiLCJmZXRjaERhdGEiLCJrZXkiLCJzdGFydGVkIiwiRGF0ZSIsImZpbmlzaGVkIiwiY29tcGxldGUiLCJwcm9ncmVzcyIsIm5vdyIsImkiLCJnZXRUaW1lIiwiaXRlbXMiLCJ2YWx1ZXMiLCJpdGVtIiwicHJvZ3Jlc3NUZXh0IiwiZXZlcnkiLCJoaWRlUHJvZ3Jlc3MiLCJpbnRlcnNlY3RzIiwicHJvY2Vzc0ZldGNoUmVzdWx0IiwibmV4dCIsIm1lc3NhZ2UiLCJzdG9yZVBsYWNlcyIsImxhdExuZyIsImV4aXN0aW5nUG9pbnQiLCJsb2NpZCIsIkRFUFJfcmVmcmVzaFBvaW50c0Zyb21TdG9yZSIsInJvdW5kQm91bmRzIiwiY29udHJvbCIsImdldENvbnRyb2wiLCJldmVudEhhbmRsZXJzIiwiZXZlbnROYW1lIiwiY2FsbGJhY2siLCJlbWl0IiwiaGFuZGxlcnMiLCJzdGF0ZSIsImdldFN0YXRlIiwiZGlzcGxheU1vZGUiLCJlbENvbnRyb2xEaXYiLCJlbERyb3Bkb3duIiwiYWxsTGFiZWwiLCJhbGxSYWRpbyIsImFsbFRleHQiLCJ1cGdyYWRlTGFiZWwiLCJ1cGdyYWRlUmFkaW8iLCJ1cGdyYWRlVGV4dCIsImVlTGFiZWwiLCJlZVJhZGlvIiwiZWVUZXh0IiwiZ2VuZXJhdGVDb250cm9sRGl2IiwiZ2VuZXJhdGVEcm9wZG93biIsImNoYW5nZU1vZGUiLCJtb2RlIiwiYm9yZGVyUmFkaXVzIiwiZHJvcGRvd24iLCJhbGxPcHRpb24iLCJ2YWx1ZSIsImlubmVyVGV4dCIsInVwZ3JhZGVPcHRpb24iLCJlIiwiZ2V0VGVjaENvbG91ciIsInRlY2hUeXBlIiwicG9pbnRDb2xvdXIiLCJpc1BsYWNlRlRUUCIsImFsdFJlYXNvbkNvZGUiLCJtYXRjaCIsInRlY2hDaGFuZ2VTdGF0dXMiLCJpc1BsYWNlRlRUUEF2YWlsIiwiaXNQbGFjZUZUVFBTb29uIiwiaXNQbGFjZUZUVFBGYXIiLCJyZWFzb25Db2RlIiwiaXNQbGFjZUZUVEMiLCJpc0Z3dG9GVFRDIiwiaXNGd3RvRlRUTiIsImlzU2F0VG9GVyIsImNvbnRlbnQiLCJhZGRyZXNzMiIsInByb2dyYW1UeXBlIiwidGFyZ2V0RWxpZ2liaWxpdHlRdWFydGVyIiwiZWUiLCJjYmRwcmljaW5nIiwiemVyb0J1aWxkQ29zdCIsImhyIiwicHJlIiwiZ2V0TGVnZW5kSXRlbXMiLCJjb2xvdXIiLCJzZXRQb3NpdGlvbiIsInVwZGF0ZUxlZ2VuZCIsImNvdW50IiwiREJfTkFNRSIsInVwZ3JhZGUiLCJkYiIsIm9sZFZlcnNpb24iLCJuZXdWZXJzaW9uIiwidHJhbnNhY3Rpb24iLCJvYmplY3RTdG9yZU5hbWVzIiwiY3JlYXRlT2JqZWN0U3RvcmUiLCJrZXlQYXRoIiwiYmxvY2tlZCIsImN1cnJlbnRWZXJzaW9uIiwiYmxvY2tlZFZlcnNpb24iLCJibG9ja2luZyIsInRlcm1pbmF0ZWQiLCJlcnIiLCJmaW5hbGx5IiwiaXNSZWFkeSIsIndhaXRVbnRpbFJlYWR5IiwidGltZW91dFNlY29uZHMiLCJzdGFydFRpbWUiLCJpbnRlcnZhbCIsInNldEludGVydmFsIiwidGltZUVsYXBzZWQiLCJjbGVhckludGVydmFsIiwic3RvcmVQbGFjZSIsImdldERiIiwicHV0IiwidHgiLCJvYmplY3RTdG9yZSIsImRvbmUiLCJnZXRQbGFjZSIsImxvY2lkcyIsImFsbCIsInRpbWVvdXQiLCJDT0xfVU5LTk9XTiIsImZuIiwiaXNEZXZlbG9wbWVudCIsInByb2Nlc3MiLCJhcmd2IiwibmF2aWdhdG9yIiwic2VydmljZVdvcmtlciIsInJlZ2lzdGVyIiwicmVnaXN0cmF0aW9uIiwicmVnaXN0cmF0aW9uRXJyb3IiLCJtYXBBcGkiLCJtb2RlQWxsIiwibW9kZVRlY2hVcGdyYWRlIiwiZ2V0TW9kZSIsImRlZmF1bHRNb2RlIiwiSW5kZXhEQlBsYWNlU3RvcmUiLCJuYm5UZWNoTWFwIiwiY0Rpc3BsYXlNb2RlIiwiY0xlZ2VuZCIsInVybCIsIlVSTCIsInNlYXJjaFBhcmFtcyIsInJlYWR5U3RhdGUiLCJfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18iLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJjYWNoZWRNb2R1bGUiLCJleHBvcnRzIiwibW9kdWxlIiwiaWQiLCJfX3dlYnBhY2tfbW9kdWxlc19fIiwiY2FsbCIsIm0iLCJPIiwiY2h1bmtJZHMiLCJwcmlvcml0eSIsIm5vdEZ1bGZpbGxlZCIsIkluZmluaXR5IiwiZnVsZmlsbGVkIiwiaiIsInNwbGljZSIsInIiLCJuIiwiZ2V0dGVyIiwiX19lc01vZHVsZSIsImQiLCJkZWZpbml0aW9uIiwibyIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImciLCJnbG9iYWxUaGlzIiwiRnVuY3Rpb24iLCJvYmoiLCJwcm9wIiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJzY3JpcHRVcmwiLCJpbXBvcnRTY3JpcHRzIiwiY3VycmVudFNjcmlwdCIsInNyYyIsInNjcmlwdHMiLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsInJlcGxhY2UiLCJwIiwiYmFzZVVSSSIsInNlbGYiLCJpbnN0YWxsZWRDaHVua3MiLCJjaHVua0lkIiwid2VicGFja0pzb25wQ2FsbGJhY2siLCJwYXJlbnRDaHVua0xvYWRpbmdGdW5jdGlvbiIsIm1vcmVNb2R1bGVzIiwicnVudGltZSIsInNvbWUiLCJjaHVua0xvYWRpbmdHbG9iYWwiLCJiaW5kIiwibmMiLCJfX3dlYnBhY2tfZXhwb3J0c19fIl0sInNvdXJjZVJvb3QiOiIifQ==