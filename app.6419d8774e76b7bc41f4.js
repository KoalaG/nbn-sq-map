/*! For license information please see app.6419d8774e76b7bc41f4.js.LICENSE.txt */
(()=>{"use strict";var e,t={609:(e,t,n)=>{var r=function(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,o,i=n.call(e),a=[];try{for(;(void 0===t||t-- >0)&&!(r=i.next()).done;)a.push(r.value)}catch(e){o={error:e}}finally{try{r&&!r.done&&(n=i.return)&&n.call(i)}finally{if(o)throw o.error}}return a},o=function(e,t,n){if(n||2===arguments.length)for(var r,o=0,i=t.length;o<i;o++)!r&&o in t||(r||(r=Array.prototype.slice.call(t,0,o)),r[o]=t[o]);return e.concat(r||Array.prototype.slice.call(t))},i=function(){function e(e){this.name=e}return e.prototype.sub=function(t){return new e("".concat(this.name,".").concat(t))},e.prototype.error=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];console.error.apply(console,o(["[".concat(this.name,"]")],r(e),!1))},e.prototype.warn=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];console.warn.apply(console,o(["[".concat(this.name,"]")],r(e),!1))},e.prototype.debug=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];a()&&console.debug.apply(console,o(["[".concat(this.name,"]")],r(e),!1))},e.prototype.info=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];console.info.apply(console,o(["[".concat(this.name,"]")],r(e),!1))},e.prototype.log=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];console.log.apply(console,o(["[".concat(this.name,"]")],r(e),!1))},e}();function a(){return window.location.href.includes("localhost")||window.location.href.includes("debug=true")}var s=window.location.href.includes("localhost")||window.location.href.includes("127.0.0.1")?"http://127.0.0.1:3000":"https://api.lip.net.au";const l=function(){function e(){}return e.prototype.fetchPage=function(e,t,n){return void 0===t&&(t=1),void 0===n&&(n=function(){return!0}),r=this,o=void 0,a=function(){var r,o,i,a,l;return function(e,t){var n,r,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(s){return function(l){return function(s){if(n)throw new TypeError("Generator is already executing.");for(;i&&(i=0,s[0]&&(a=0)),a;)try{if(n=1,r&&(o=2&s[0]?r.return:s[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,s[1])).done)return o;switch(r=0,o&&(s=[2&s[0],o.value]),s[0]){case 0:case 1:o=s;break;case 4:return a.label++,{value:s[1],done:!1};case 5:a.label++,r=s[1],s=[0];continue;case 7:s=a.ops.pop(),a.trys.pop();continue;default:if(!((o=(o=a.trys).length>0&&o[o.length-1])||6!==s[0]&&2!==s[0])){a=0;continue}if(3===s[0]&&(!o||s[1]>o[0]&&s[1]<o[3])){a.label=s[1];break}if(6===s[0]&&a.label<o[1]){a.label=o[1],o=s;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(s);break}o[2]&&a.ops.pop(),a.trys.pop();continue}s=t.call(e,a)}catch(e){s=[6,e],r=0}finally{n=o=0}if(5&s[0])throw s[1];return{value:s[0]?s[1]:void 0,done:!0}}([s,l])}}}(this,(function(c){switch(c.label){case 0:if(r=e.getNorth().toFixed(2),o=e.getEast().toFixed(2),i=e.getSouth().toFixed(2),a=e.getWest().toFixed(2),!n())throw new Error("Proceed function returned false. Stopping fetch.");return t=Math.max(1,Number(t)),l="".concat(s,"/nbn-bulk/map/").concat(r,"/").concat(o,"/").concat(i,"/").concat(a,"?page=").concat(t),[4,new Promise((function(e,t){fetch(l,{method:"GET",redirect:"follow"}).then((function(e){return e.text()})).then((function(t){var n=JSON.parse(t);e(n.data)})).catch(t)}))];case 1:return[2,c.sent()]}}))},new((i=void 0)||(i=Promise))((function(e,t){function n(e){try{l(a.next(e))}catch(e){t(e)}}function s(e){try{l(a.throw(e))}catch(e){t(e)}}function l(t){var r;t.done?e(t.value):(r=t.value,r instanceof i?r:new i((function(e){e(r)}))).then(n,s)}l((a=a.apply(r,o||[])).next())}));var r,o,i,a},e}();n(623);var c=n(243),u=(n(664),n(687),n(634),n(817)),p=(n(732),n(256),function(e,t,n,r){return new(n||(n=Promise))((function(o,i){function a(e){try{l(r.next(e))}catch(e){i(e)}}function s(e){try{l(r.throw(e))}catch(e){i(e)}}function l(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,s)}l((r=r.apply(e,t||[])).next())}))}),d=function(e,t){var n,r,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(s){return function(l){return function(s){if(n)throw new TypeError("Generator is already executing.");for(;i&&(i=0,s[0]&&(a=0)),a;)try{if(n=1,r&&(o=2&s[0]?r.return:s[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,s[1])).done)return o;switch(r=0,o&&(s=[2&s[0],o.value]),s[0]){case 0:case 1:o=s;break;case 4:return a.label++,{value:s[1],done:!1};case 5:a.label++,r=s[1],s=[0];continue;case 7:s=a.ops.pop(),a.trys.pop();continue;default:if(!((o=(o=a.trys).length>0&&o[o.length-1])||6!==s[0]&&2!==s[0])){a=0;continue}if(3===s[0]&&(!o||s[1]>o[0]&&s[1]<o[3])){a.label=s[1];break}if(6===s[0]&&a.label<o[1]){a.label=o[1],o=s;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(s);break}o[2]&&a.ops.pop(),a.trys.pop();continue}s=t.call(e,a)}catch(e){s=[6,e],r=0}finally{n=o=0}if(5&s[0])throw s[1];return{value:s[0]?s[1]:void 0,done:!0}}([s,l])}}},h=function(){function e(e,t,n){this.logger=new i("MarkerLayerCluster"),this.pointMap=new Map,this.map=e,this.placeStore=n,this.modeHandler=t,this.markers=new c.MarkerClusterGroup({maxClusterRadius:this.markerClusterRadius,spiderfyOnMaxZoom:!1,disableClusteringAtZoom:18,showCoverageOnHover:!0,zoomToBoundsOnClick:!0,removeOutsideVisibleBounds:!0,iconCreateFunction:this.iconCreateFunction,chunkedLoading:!0,chunkInterval:150,chunkDelay:150,chunkProgress:function(e,t,n){console.log("chunkProgress",{processed:e,total:t,elapsed:n})}}),this.markers.addTo(this.map),this.map.on("zoomend",(function(e){console.log("zoomend",e.target.getZoom())}))}return e.prototype.addPoints=function(e){var t=this,n=this.logger.sub("addPoints"),r=[];e.forEach((function(e){var n=e.lat+","+e.lng,o=t.pointMap.get(n);if(o)o.point=e;else{var i=t.renderPoint(e);r.push(i),t.pointMap.set(n,{layer:i,point:e})}})),n.debug("Adding new layers",r.length),r.length&&this.markers.addLayers(r)},e.prototype.removeAllPoints=function(){this.logger.sub("removeAllPoints").debug("Removing all points",this.pointMap),this.markers.clearLayers(),this.pointMap.clear(),this.logger.sub("removeAllPoints").debug("Removed all points",this.pointMap)},e.prototype.removeAllMarkers=function(){return p(this,void 0,void 0,(function(){return d(this,(function(e){return this.removeAllPoints(),[2]}))}))},e.prototype.markerClusterRadius=function(e){switch(e){case 0:case 1:case 2:case 3:case 4:case 5:case 6:case 7:case 8:case 9:case 10:case 11:case 12:case 13:return 150;case 14:return 100;default:return 0}},e.prototype.updatePointStyle=function(e,t){t.setStyle({fillColor:this.modeHandler.placeColour(e[0])}),t.setTooltipContent(this.modeHandler.renderTooltip(e)),t.redraw()},e.prototype.setModeHandler=function(e,t){return this.modeHandler=e,this},e.prototype.DEP_refreshMarkersInsideBounds=function(e,t){return p(this,void 0,void 0,(function(){return d(this,(function(e){return[2]}))}))},e.prototype.removeMarkersOutsideBounds=function(e){return p(this,void 0,void 0,(function(){return d(this,(function(e){return[2]}))}))},e.prototype.renderPoint=function(e){var t=this,n=c.circleMarker([e.lat,e.lng],{radius:5,fillColor:e.col?e.col[0]:void 0,color:"#000000",weight:1,opacity:1,fillOpacity:.8});return n.bindPopup((function(n){t.placeStore.getPlaces(e.ids).then((function(e){var r=t.renderPopup(e);n.setPopupContent(r)}));var r=document.createElement("div");return r.innerHTML='<div class="loading">Loading...</div>',r}),{autoPan:!0,autoClose:!1}),n.bindTooltip((function(t){var n=e.add[0];return e.add.length>1&&(n+=" ( + "+(e.add.length-1)+" more)"),n}),{}),n},e.prototype.renderPopup=function(e){return 1==e.length?this.modeHandler.renderPopupContent(e[0]):this.rendorPopupMulti(e)},e.prototype.rendorPopupMulti=function(e){var t,n,r=document.createElement("div"),o=[];e.sort((function(e,t){return e.address1<t.address1?-1:e.address1>t.address1?1:0}));var i=function(e){var t=document.createElement("div"),n=a.modeHandler.placeColour(e),i=document.createElement("button");i.classList.add("accordion"),i.type="button",i.innerHTML='<svg height="15" width="15" style="margin-right:3px">'+'<circle class="circle" cx="7.5" cy="9" r="5" stroke="#000" stroke-width="1" fill="'.concat(n,'" />')+"</svg>"+"<span>".concat(e.address1,"</span>");var s=document.createElement("div");s.classList.add("panel"),s.appendChild(a.modeHandler.renderPopupContent(e)),i.addEventListener("click",(function(){var e=t.classList.contains("active");o.forEach((function(e){e.classList.remove("active")})),e||t.classList.add("active")})),t.appendChild(i),t.appendChild(s),r.appendChild(t),o.push(t)},a=this;try{for(var s=function(e){var t="function"==typeof Symbol&&Symbol.iterator,n=t&&e[t],r=0;if(n)return n.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&r>=e.length&&(e=void 0),{value:e&&e[r++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")}(e),l=s.next();!l.done;l=s.next())i(l.value)}catch(e){t={error:e}}finally{try{l&&!l.done&&(n=s.return)&&n.call(s)}finally{if(t)throw t.error}}return r},e.prototype.iconCreateFunction=function(e){var t=e.getAllChildMarkers().map((function(e){return e.options.fillColor})),n={};t.forEach((function(e){n[e]||(n[e]=0),n[e]++}));var r=Object.keys(n).sort((function(e,t){return n[t]-n[e]})),o="background: conic-gradient(",i=0;r.forEach((function(e,r){0==r&&(o+="\n"+e+" 0%");var a=n[e]/t.length*100;o+=", \n"+e+" "+i+"%",o+=", \n"+e+" "+(i+a)+"%",i+=a})),o+="\n);";var a=Math.random().toString(36).substring(7);return c.divIcon({html:"<style>#cluster_".concat(a,"::before { ").concat(o," }</style> <div id='cluster_").concat(a,"'><span>")+e.getChildCount()+"</span></div>",className:"marker-cluster"})},e}();const f=h;var g=function(){return g=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e},g.apply(this,arguments)},m=function(e,t,n,r){return new(n||(n=Promise))((function(o,i){function a(e){try{l(r.next(e))}catch(e){i(e)}}function s(e){try{l(r.throw(e))}catch(e){i(e)}}function l(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,s)}l((r=r.apply(e,t||[])).next())}))},v=function(e,t){var n,r,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(s){return function(l){return function(s){if(n)throw new TypeError("Generator is already executing.");for(;i&&(i=0,s[0]&&(a=0)),a;)try{if(n=1,r&&(o=2&s[0]?r.return:s[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,s[1])).done)return o;switch(r=0,o&&(s=[2&s[0],o.value]),s[0]){case 0:case 1:o=s;break;case 4:return a.label++,{value:s[1],done:!1};case 5:a.label++,r=s[1],s=[0];continue;case 7:s=a.ops.pop(),a.trys.pop();continue;default:if(!((o=(o=a.trys).length>0&&o[o.length-1])||6!==s[0]&&2!==s[0])){a=0;continue}if(3===s[0]&&(!o||s[1]>o[0]&&s[1]<o[3])){a.label=s[1];break}if(6===s[0]&&a.label<o[1]){a.label=o[1],o=s;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(s);break}o[2]&&a.ops.pop(),a.trys.pop();continue}s=t.call(e,a)}catch(e){s=[6,e],r=0}finally{n=o=0}if(5&s[0])throw s[1];return{value:s[0]?s[1]:void 0,done:!0}}([s,l])}}},y=function(){function e(t){var n=this;this.MAX_UNFETCHED_BOXES=100,this.logger=new i("NbnTechMap"),this.initialViewSet=!1,this.fetchedBoxes=new Set,this.progressControl=new c.Control({position:"bottomleft"}),this.progressItems={},this.controls={},t=g(g({},e.DEFAULT_OPTIONS),t),this.api=t.api,this.placeStore=t.placestore,this.modeHandler=t.defaultModeHandler,this.map=c.map(t.mapContainerId,{preferCanvas:!0}),this.markerLayer=new f(this.map,this.modeHandler,this.placeStore),this.mapTileLayer=c.tileLayer("https://{s}.basemaps.cartocdn.com/rastertiles/voyager/{z}/{x}/{y}{r}.png",{attribution:'&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors &copy; <a href="https://carto.com/attributions">CARTO</a>',subdomains:"abcd",crossOrigin:!0,minZoom:5,maxZoom:20}),this.mapTileLayer.addTo(this.map),console.log({L:c,Geocoder:u.Ms,geocoder:u.yK});var r=new u.d2.ArcGis({apiKey:"AAPKa97b8a5374db4fa9b0fdd8e55361cba4Z9fEuw3ckAOIFHK1CP_VbzTv3OTeUz3ggrFAzVPzjyn3Q7bQFzbwkDMvDxaJ-JzG",geocodingQueryParams:{countryCode:"AU",category:"Address,LatLong,Neighborhood,District,City,Metro Area"}});this.mapSearch=c.Control.geocoder({position:"topleft",collapsed:!0,defaultMarkGeocode:!1,geocoder:r,suggestMinLength:5,suggestTimeout:1e3}),this.mapSearch.on("markgeocode",(function(e){var t=e.geocode.bbox;n.map.fitBounds(t,{maxZoom:16})})),this.mapSearch.addTo(this.map),this.mapLocate=c.control.locate({position:"topleft",locateOptions:{maxZoom:16},setView:"untilPan",keepCurrentZoomLevel:!0,initialZoomLevel:17,cacheLocation:!0}),this.mapLocate.addTo(this.map),this.map.on("locateactivate",(function(){localStorage.setItem("geolocate","1")})),this.map.on("locatedeactivate",(function(){localStorage.removeItem("geolocate")})),this.setInitialMapView(),this.map.on("moveend",(function(){return m(n,void 0,void 0,(function(){var e,t;return v(this,(function(n){return e=this.map.getCenter(),t=this.map.getZoom(),localStorage.setItem("startpos",JSON.stringify({lat:e.lat,lng:e.lng,zoom:t})),this.pushBrowserHistory(),r.options.geocodingQueryParams&&(r.options.geocodingQueryParams.location="".concat(e.lng,",").concat(e.lat)),this.fetchDataForCurrentView(),[2]}))}))})),this.fetchDataForCurrentView(),window.addEventListener("popstate",(function(){var e=new URLSearchParams(window.location.search),t=e.get("lat"),r=e.get("lng"),o=e.get("zoom");t&&r&&o&&(n.map.setView([Number(t),Number(r)],parseInt(o)),n.initialViewSet=!0)}))}return e.prototype.pushBrowserHistory=function(){var e=this.map.getCenter(),t=this.map.getZoom(),n=new URLSearchParams(window.location.search);n.set("lat",e.lat.toString()),n.set("lng",e.lng.toString()),n.set("zoom",t.toString());var r=window.location.pathname+"?"+n.toString();window.history.pushState({},"",r)},e.prototype.getStartPos=function(){var e=localStorage.getItem("startpos");if(!e)return null;try{return JSON.parse(e)}catch(e){return null}},e.prototype.setInitialMapView=function(){var e=this.logger.sub("setInitialMapView");if(this.initialViewSet)e.warn("Initial map view already set");else{var t=new URLSearchParams(window.location.search),n=t.get("lat"),r=t.get("lng"),o=t.get("zoom");if(n&&r&&o)return this.map.setView([Number(n),Number(r)],parseInt(o)),void(this.initialViewSet=!0);var i=localStorage.getItem("geolocate"),a=this.getStartPos();a&&(this.map.setView([a.lat,a.lng],a.zoom),this.initialViewSet=!0),a||(this.map.setView([-26.1772288,133.4170119],10),this.initialViewSet=!0),!i&&a||(this.mapLocate.start(),this.map.setZoom(17),this.initialViewSet=!0),this.initialViewSet||e.error("Could not set initial map view")}},e.prototype.getBoxesInBounds=function(e){for(var t=Math.ceil(50*e.getNorth())/50,n=Math.floor(25*e.getWest())/25,r=[],o=t;o>e.getSouth();o-=.02)for(var i=n;i<e.getEast();i+=.04)r.push([o,i]);return r.map((function(e){var t=e[0],n=e[1],r=t-.02,o=n+.04;return c.latLngBounds([r,n],[t,o])}))},e.prototype.getCurrentViewBoxes=function(){return this.getBoxesInBounds(this.map.getBounds())},e.prototype.hideMarkersOutsideCurrentView=function(){var e=this.map.getBounds().pad(.5);this.markerLayer.removeMarkersOutsideBounds(e)},e.prototype.DEP_displayMarkersInCurrentView=function(e){return void 0===e&&(e=1),m(this,void 0,void 0,(function(){return v(this,(function(e){return[2]}))}))},e.prototype.showZoomInWarning=function(){var e=this;this.zoomInWarningControl||(this.zoomInWarningControl=new c.Control({position:"topright"}),this.zoomInWarningControl.onAdd=function(){var e=c.DomUtil.create("div","info legend");return e.innerHTML='<h4 style="margin:0">Area Too Big!</h4>',e.innerHTML+='<p style="margin:0">Location loading is paused until you zoom in.</p>',e.style.backgroundColor="#ff9800",e.style.opacity="0.8",e.style.padding="10px 20px",e.style.color="#ffffff",e});var t=this.zoomInWarningControl;setTimeout((function(){return e.map.addControl(t)}),1e3)},e.prototype.hideZoomInWarning=function(){this.zoomInWarningControl&&this.map.removeControl(this.zoomInWarningControl)},e.prototype.fetchDataForCurrentView=function(){return m(this,void 0,void 0,(function(){var e,t,n,r,o,i,a,s,l,c,u,p,d=this;return v(this,(function(h){switch(h.label){case 0:if(e=this.logger.sub("fetchDataForCurrentView"),this.map.getZoom()<11)return e.warn("Zoom level too low. Skipping."),this.showZoomInWarning(),[2];if(t=this.getCurrentViewBoxes(),e.debug("Current view boxes",t),n=t.filter((function(e){return!d.fetchedBoxes.has(e.getCenter().toString())})),0==n.length)return this.hideZoomInWarning(),[2];if(n.length>this.MAX_UNFETCHED_BOXES)return e.warn("Too many boxes to fetch. Skipping."),this.showZoomInWarning(),[2];this.hideZoomInWarning(),r=this.map.getCenter().toString()+this.map.getZoom(),o=this.createProgress(r,n.length,"Fetching sections..."),this.renderProgress(),i=0,h.label=1;case 1:h.trys.push([1,6,7,8]),a=function(e){var t="function"==typeof Symbol&&Symbol.iterator,n=t&&e[t],r=0;if(n)return n.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&r>=e.length&&(e=void 0),{value:e&&e[r++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")}(n),s=a.next(),h.label=2;case 2:return s.done?[3,5]:(l=s.value,this.map.getCenter().toString()+this.map.getZoom()!=r?(e.debug("Map moved. Fetch stopped."),o.text="Map moved. Fetch stopped.",this.updateProgress(r,i,!0),[2]):[4,this.fetchData(l)]);case 3:h.sent(),this.fetchedBoxes.add(l.getCenter().toString()),i++,this.updateProgress(r,i,!1),h.label=4;case 4:return s=a.next(),[3,2];case 5:return[3,8];case 6:return c=h.sent(),u={error:c},[3,8];case 7:try{s&&!s.done&&(p=a.return)&&p.call(a)}finally{if(u)throw u.error}return[7];case 8:return this.updateProgress(r,i,!0),e.debug("All boxes fetched"),[2]}}))}))},e.prototype.createProgress=function(e,t,n){return this.progressItems[e]={started:new Date,finished:void 0,complete:!1,progress:0,total:t,text:n},this.progressItems[e]},e.prototype.updateProgress=function(e,t,n){if(!this.progressItems[e])throw new Error("Progress item with key ".concat(e," does not exist"));this.progressItems[e].finished=n?new Date:void 0,this.progressItems[e].complete=n,this.progressItems[e].progress=t,this.renderProgress()},e.prototype.renderProgress=function(){for(var e=this,t=new Date,n=Object.keys(this.progressItems),r=0;r<n.length;r++){var o=n[r];if(this.progressItems[o]){var i=this.progressItems[o].finished;i&&t.getTime()-i.getTime()>5e3&&delete this.progressItems[o]}}0!=Object.keys(this.progressItems).length?(this.progressControl.onAdd=function(){var t=c.DomUtil.create("div","info legend");t.innerHTML='<h4 style="margin:0">Loading...</h4>';for(var n=Object.values(e.progressItems),r=0;r<n.length;r++){var o=n[r];if(!(o.finished&&(new Date).getTime()-o.finished.getTime()>1e4)){var i=o.progress/o.total*100,a=o.complete?"Complete":"".concat(o.progress," of ").concat(o.total);t.innerHTML+='<p style="margin:0">'.concat(o.text," (").concat(a,")</p>"),t.innerHTML+='<progress value="'.concat(i,'" max="100"></progress>')}}return t.style.backgroundColor="#000000",t.style.opacity="0.8",t.style.padding="10px 20px",t.style.color="#ffffff",t},this.map.addControl(this.progressControl),setTimeout((function(){Object.values(e.progressItems).every((function(e){return e.complete}))&&e.hideProgress()}),5e3)):this.hideProgress()},e.prototype.hideProgress=function(){this.map.removeControl(this.progressControl)},e.prototype.fetchData=function(e,t){return void 0===t&&(t=1),m(this,void 0,void 0,(function(){var n,r,o=this;return v(this,(function(i){switch(i.label){case 0:this.logger.sub("fetchData").debug("Fetching Box",e.getCenter().toString(),t),i.label=1;case 1:return i.trys.push([1,5,,6]),[4,this.api.fetchPage(e,t,(function(){return o.map.getBounds().intersects(e)}))];case 2:return n=i.sent(),this.processFetchResult(n,e),n.nextPage?[4,this.fetchData(e,n.nextPage)]:[3,4];case 3:return[2,i.sent()];case 4:return[2];case 5:return"Page already loaded this session."==(r=i.sent()).message?[2]:(console.error(r),[3,6]);case 6:return[2]}}))}))},e.prototype.processFetchResult=function(e,t){var n=this.logger.sub("processFetchResult");n.debug("Processing Fetch Result",e,t),this.placeStore.storePlaces(e.places);for(var r=new Map,o=0;o<e.places.length;o++){var i=e.places[o];if(this.modeHandler.filter(i)){var a="".concat(i.latitude,",").concat(i.longitude),s=this.modeHandler.placeColour(i),l=r.get(a);l?l.ids.includes(i.id)||(l.ids.push(i.id),l.add.push(i.address1),l.col.push(s)):r.set(a,{lat:i.latitude,lng:i.longitude,col:[s],add:[i.address1],ids:[i.id]})}}n.debug("Adding points to marker layer",r),this.markerLayer.addPoints(r)},e.prototype.DEPR_refreshPointsFromStore=function(e){return m(this,void 0,void 0,(function(){return v(this,(function(t){if(!this.markerLayer)throw new Error("Marker Layer not set");return e||(console.log("Bounds not passed. Using map bounds."),e=this.map.getBounds()),e=function(e){var t=Math.ceil(50*e.getNorth())/50,n=Math.floor(25*e.getWest())/25,r=Math.floor(50*e.getSouth())/50,o=Math.ceil(25*e.getEast())/25;return c.latLngBounds([r,n],[t,o])}(e),[2]}))}))},e.prototype.addControl=function(e,t){if(this.controls[e])throw new Error("Control with key ".concat(e," already exists"));this.controls[e]=t,this.map.addControl(t.getControl()),console.log("Added control",e)},e.prototype.setModeHandler=function(e){var t,n;this.modeHandler=e,null===(t=this.markerLayer)||void 0===t||t.removeAllMarkers(),console.log("Current Fetched Boxes",this.fetchedBoxes),this.fetchedBoxes.clear(),console.log("Fetched Boxes Cleared",this.fetchedBoxes),null===(n=this.markerLayer)||void 0===n||n.setModeHandler(e,this.placeStore),this.fetchDataForCurrentView()},e.DEFAULT_OPTIONS={mapContainerId:"map"},e}();const b=y,w=function(){function e(){this.eventHandlers={},this.control=new c.Control}return e.prototype.on=function(e,t){this.eventHandlers[e]||(this.eventHandlers[e]=[]),this.eventHandlers[e].push(t)},e.prototype.emit=function(e,t){var n=this;console.debug("Emitting event: ".concat(e),{data:t,handlers:this.eventHandlers[e]}),this.eventHandlers[e]&&this.eventHandlers[e].forEach((function(r){return r({name:e,state:n.getState(),data:t})}))},e.prototype.getControl=function(){return this.control},e}();var C,T=(C=function(e,t){return C=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])},C(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function n(){this.constructor=e}C(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});const P=function(e){function t(t){var n=e.call(this)||this;return n.displayMode="all",n.elControlDiv=document.createElement("div"),n.elDropdown=document.createElement("select"),n.allLabel=null,n.allRadio=null,n.allText=null,n.upgradeLabel=null,n.upgradeRadio=null,n.upgradeText=null,n.eeLabel=null,n.eeRadio=null,n.eeText=null,n.displayMode=t,n.generateControlDiv(),n.control.onAdd=function(e){return n.generateDropdown(),n.elControlDiv},n}return T(t,e),t.prototype.getState=function(){return this.displayMode},t.prototype.changeMode=function(e){this.displayMode=e,this.emit("change",e)},t.prototype.generateControlDiv=function(){this.elControlDiv&&console.warn("ControlDiv already exists"),this.elControlDiv.classList.add("info","legend"),this.elControlDiv.style.backgroundColor="#ffffff",this.elControlDiv.style.opacity="0.8",this.elControlDiv.style.padding="5px",this.elControlDiv.style.borderRadius="5px"},t.prototype.generateDropdown=function(){var e=this;this.elDropdown&&console.warn("Dropdown already exists");var t=this.elDropdown;t.classList.add("control-select");var n=document.createElement("option");n.value="all",n.innerText="Show All Locations",t.appendChild(n);var r=document.createElement("option");r.value="upgrade",r.innerText="Tech Upgrades",t.appendChild(r);var o=document.createElement("option");o.value="ee",o.innerText="Enterprise Ethernet",t.appendChild(o),t.addEventListener("change",(function(t){return e.changeMode(t.target.value)})),t.value=this.displayMode,this.elDropdown=t,this.elControlDiv.appendChild(t)},t}(w);var S="#1D7044",M="#75AD6F",E="#C8E3C5",x="#FFBE00",L="#FF7E01",D="#E3071D",k="#02B9E3",F="#022BE3",H="#6B02E3",B="#888888";function I(e){switch(e){case"FTTP":return S;case"FTTC":return L;case"FTTN":case"FTTB":return D;case"HFC":return x;case"WIRELESS":return k;case"SATELLITE":return H}return B}const O=function(){function e(){}return e.prototype.filter=function(e){return!0},e.prototype.pointColour=function(e){return this.placeColour(e.places[0])},e.prototype.placeColour=function(e){return function(e){return"FTTP"===e.techType}(e)?S:function(e){return!(!e.altReasonCode||!e.altReasonCode.match(/^FTTP/)||"Eligible To Order"!==e.techChangeStatus)}(e)?M:function(e){if(e.altReasonCode&&e.altReasonCode.match(/^FTTP/))switch(e.techChangeStatus){case"In Design":case"Build Finalised":case"Planned":case"MDU Complex Eligible To Apply":case"MDU Complex Premises In Build":return!0}return!1}(e)?E:function(e){if(e.altReasonCode&&e.altReasonCode.match(/^FTTP/)&&"Committed"===e.techChangeStatus)return!0}(e)?I(e.techType):function(e){return!("FTTC"!=e.techType||!e.reasonCode||!e.reasonCode.match(/^FTTC/)||"New Tech Connected"!=e.techChangeStatus)}(e)?L:function(e){return"FTTC"==e.techType&&"FTTC_SA"==e.reasonCode&&"FW_CT"==e.altReasonCode&&"Eligible To Order"==e.techChangeStatus}(e)?"#FF7E01":function(e){return"FTTN"==e.techType&&"FTTN_SA"==e.reasonCode&&"FW_CT"==e.altReasonCode&&"Eligible To Order"==e.techChangeStatus}(e)?D:function(e){return"WIRELESS"==e.techType&&"FW_SA"==e.reasonCode&&"Eligible To Order"==e.techChangeStatus}(e)?F:(e.altReasonCode&&"NULL_NA"!=e.altReasonCode&&console.log(e),I(e.techType))},e.prototype.renderPopupContent=function(e){var t=c.DomUtil.create("div");if(t.innerHTML="<b>"+e.id+"</b></br>"+e.address1+"</br>"+e.address2+"</br><br />",t.innerHTML+="<b>Technology Plan</b></br>","FTTP"!=e.techType&&e.altReasonCode&&"NULL_NA"!=e.altReasonCode?(e.altReasonCode&&e.altReasonCode.match(/^FTTP/),t.innerHTML+="Current: "+e.techType+"<br />",t.innerHTML+="Change: "+e.altReasonCode+"<br />",t.innerHTML+="Status: "+e.techChangeStatus+"<br />",t.innerHTML+="Program: "+e.programType+"<br />",t.innerHTML+="Target Qtr: "+e.targetEligibilityQuarter+"<br />"):(t.innerHTML+="Technology: "+e.techType+"<br />","FTTP"!=e.techType&&(t.innerHTML+="No tech upgrade planned<br />")),t.innerHTML+="<br />",e.ee&&(t.innerHTML+="<b>Enterprise Ethernet</b></br>",t.innerHTML+="Price Zone: "+(e.cbdpricing?"CBD":"Zone 1/2/3")+"<br />",t.innerHTML+="Build Cost: "+(e.zeroBuildCost?"$0":"POA")+"<br />",t.innerHTML+="<br />"),a()){var n=c.DomUtil.create("hr"),r=c.DomUtil.create("pre");r.innerHTML=JSON.stringify(e,null,2),t.appendChild(n),t.appendChild(r)}return t},e.prototype.renderTooltip=function(e){var t=e[0].address1;return e.length>1&&(t+=" ( + "+(e.length-1)+" more)"),t},e.prototype.getLegendItems=function(){return[{label:"FTTP",colour:S},{label:"FTTP Upgrade",colour:M},{label:"FTTP Upgrade Soon",colour:E},{label:"HFC",colour:x},{label:"FTTC",colour:L},{label:"FTTN/FTTB",colour:D},{label:"FW",colour:k},{label:"FW Upgrade",colour:F},{label:"Satellite",colour:H},{label:"Unknown",colour:B}]},e}();var A=function(){var e=function(t,n){return e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])},e(t,n)};return function(t,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}();const R=function(e){function t(){var t=e.call(this)||this;return t.elControlDiv=document.createElement("div"),t.control.setPosition("bottomright"),t.elControlDiv.classList.add("info","legend"),t.elControlDiv.style.backgroundColor="#ffffff",t.elControlDiv.style.opacity="0.8",t.elControlDiv.style.padding="5px",t.elControlDiv.style.borderRadius="5px",t.control.onAdd=function(e){return t.elControlDiv},t}return A(t,e),t.prototype.getState=function(){},t.prototype.updateLegend=function(e){var t="";e.forEach((function(e){t+='<svg height="10" width="10"><circle cx="5" cy="5" r="5" fill="'+e.colour+'" stroke="#000000" stroke-width="1" opacity="1" fill-opacity="0.8" /></svg> '+e.label,e.count&&(t+=" ("+e.count+")"),t+="<br>"})),this.elControlDiv.innerHTML=t},t}(w);n.p,n.p,n.p;var U=n(269),N=function(e,t,n,r){return new(n||(n=Promise))((function(o,i){function a(e){try{l(r.next(e))}catch(e){i(e)}}function s(e){try{l(r.throw(e))}catch(e){i(e)}}function l(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,s)}l((r=r.apply(e,t||[])).next())}))},_=function(e,t){var n,r,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(s){return function(l){return function(s){if(n)throw new TypeError("Generator is already executing.");for(;i&&(i=0,s[0]&&(a=0)),a;)try{if(n=1,r&&(o=2&s[0]?r.return:s[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,s[1])).done)return o;switch(r=0,o&&(s=[2&s[0],o.value]),s[0]){case 0:case 1:o=s;break;case 4:return a.label++,{value:s[1],done:!1};case 5:a.label++,r=s[1],s=[0];continue;case 7:s=a.ops.pop(),a.trys.pop();continue;default:if(!((o=(o=a.trys).length>0&&o[o.length-1])||6!==s[0]&&2!==s[0])){a=0;continue}if(3===s[0]&&(!o||s[1]>o[0]&&s[1]<o[3])){a.label=s[1];break}if(6===s[0]&&a.label<o[1]){a.label=o[1],o=s;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(s);break}o[2]&&a.ops.pop(),a.trys.pop();continue}s=t.call(e,a)}catch(e){s=[6,e],r=0}finally{n=o=0}if(5&s[0])throw s[1];return{value:s[0]?s[1]:void 0,done:!0}}([s,l])}}},z=function(){function e(){var e=this;this.DB_NAME="nsm-placestore",this.logger=new i("IndexDBPlaceStore"),this.logger.info("Setting up database..."),(0,U.X3)(this.DB_NAME,1,{upgrade:function(e,t,n,r,o){e.objectStoreNames.contains("nbnPlaceStore")||e.createObjectStore("nbnPlaceStore",{keyPath:"locid"})},blocked:function(t,n,r){e.logger.warn("Database blocked!",{currentVersion:t,blockedVersion:n,event:r})},blocking:function(t,n,r){e.logger.warn("Database blocking!",{currentVersion:t,blockedVersion:n,event:r})},terminated:function(){e.logger.warn("Database terminated!")}}).then((function(t){e.db=t,e.logger.info("Database ready!")})).catch((function(t){e.logger.error("Failed to open database: ",t)})).finally((function(){e.logger.info("Database setup complete.")}))}return e.prototype.isReady=function(){return!!this.db},e.prototype.waitUntilReady=function(e){return N(this,void 0,void 0,(function(){var t=this;return _(this,(function(n){return[2,new Promise((function(n,r){var o=Date.now(),i=setInterval((function(){var a=Date.now()-o;t.isReady()?(clearInterval(i),n()):a>1e3*e&&(clearInterval(i),r(new Error("Database not ready after ".concat(e," seconds."))))}),100)}))]}))}))},e.prototype.storePlace=function(e){return N(this,void 0,void 0,(function(){return _(this,(function(t){switch(t.label){case 0:return[4,this.getDb()];case 1:return[4,t.sent().put("nbnPlaceStore",e)];case 2:return t.sent(),[2]}}))}))},e.prototype.storePlaces=function(e){return N(this,void 0,void 0,(function(){var t,n,r;return _(this,(function(o){switch(o.label){case 0:return[4,this.getDb()];case 1:return t=o.sent(),n=t.transaction(["nbnPlaceStore"],"readwrite",{durability:"relaxed"}),r=n.objectStore("nbnPlaceStore"),[4,e.map((function(e){return r.put(e)}))];case 2:return o.sent(),[4,n.done];case 3:return o.sent(),[2]}}))}))},e.prototype.getPlace=function(e){return N(this,void 0,void 0,(function(){return _(this,(function(t){switch(t.label){case 0:return[4,this.getDb()];case 1:return[4,t.sent().get("nbnPlaceStore",e)];case 2:return[2,t.sent()]}}))}))},e.prototype.getPlaces=function(e){return N(this,void 0,void 0,(function(){var t,n,r,o;return _(this,(function(i){switch(i.label){case 0:return[4,this.getDb()];case 1:return t=i.sent(),n=t.transaction(["nbnPlaceStore"],"readonly"),r=n.objectStore("nbnPlaceStore"),[4,Promise.all(e.map((function(e){return r.get(e)})))];case 2:return o=i.sent(),[4,n.done];case 3:return i.sent(),[2,o.filter((function(e){return!!e}))]}}))}))},e.prototype.getDb=function(e){return void 0===e&&(e=5),N(this,void 0,void 0,(function(){return _(this,(function(t){switch(t.label){case 0:return[4,this.waitUntilReady(e)];case 1:if(t.sent(),!this.db)throw new Error("Database not ready.");return[2,this.db]}}))}))},e}(),V="#1D7044",Z="#02B9E3",j="#FFBE00",W="#FF7E01",G="#E3071D",Q="#022BE3",J="#6B02E3",$="#888888";const X=function(){function e(){}return e.prototype.filter=function(e){return"Not Planned"!=e.techChangeStatus&&!!e.techChangeStatus},e.prototype.pointColour=function(e){return this.placeColour(e.places[0])},e.prototype.placeColour=function(e){switch(e.techChangeStatus){case"Previous Tech Disconnected":case"New Tech Connected":return V;case"In Design":return W;case"Build Finalised":return j;case"Committed":return G;case"Eligible To Order":return Z;case"MDU Complex Eligible To Apply":return J;case"MDU Complex Premises In Build":return Q}return $},e.prototype.renderPopupContent=function(e){var t,n,r=c.DomUtil.create("div");if(r.innerHTML="<b>"+e.id+"</b></br>"+e.address1+"</br>"+e.address2+"</br><br />",r.innerHTML+="<b>Technology Plan</b></br>","FTTP"!=e.techType&&e.altReasonCode&&"NULL_NA"!=e.altReasonCode?(e.altReasonCode&&e.altReasonCode.match(/^FTTP/),r.innerHTML+="Current: "+e.techType+"<br />",r.innerHTML+="Change: "+e.altReasonCode+"<br />",r.innerHTML+="Status: "+e.techChangeStatus+"<br />",r.innerHTML+="Program: "+e.programType+"<br />",r.innerHTML+="Target Qtr: "+e.targetEligibilityQuarter+"<br />"):(r.innerHTML+="Technology: "+e.techType+"<br />","FTTP"!=e.techType&&(r.innerHTML+="No tech upgrade planned<br />")),(null===(t=e.location.technologyPlan)||void 0===t?void 0:t.forecastRTCDate)&&(r.innerHTML+="Forecast RTC: "+e.location.technologyPlan.forecastRTCDate+"<br />"),(null===(n=e.location.technologyPlan)||void 0===n?void 0:n.changeDate)&&(r.innerHTML+="Change Date: "+e.location.technologyPlan.changeDate+"<br />"),r.innerHTML+="<br />",a()){var o=c.DomUtil.create("hr"),i=c.DomUtil.create("pre");i.innerHTML=JSON.stringify(e,null,2),r.appendChild(o),r.appendChild(i)}return r},e.prototype.renderTooltip=function(e){var t=e[0].address1;return e.length>1&&(t+=" ( + "+(e.length-1)+" more)"),t},e.prototype.getLegendItems=function(){return[{label:"Previous Tech Disconnected",colour:V},{label:"New Tech Connected",colour:V},{label:"Eligible To Order",colour:Z},{label:"Build Finalised",colour:j},{label:"In Design",colour:W},{label:"Committed",colour:G},{label:"MDU Complex Eligible To Apply",colour:J},{label:"MDU Complex Premises In Build",colour:Q},{label:"Unknown",colour:$}]},e}();var K="#1D7044",q="#02B9E3",Y="#FF7E01",ee="#E3071D",te="#888888";const ne=function(){function e(){}return e.prototype.filter=function(e){return e.ee},e.prototype.pointColour=function(e){return this.placeColour(e.places[0])},e.prototype.placeColour=function(e){return e.cbdpricing&&e.zeroBuildCost?K:e.cbdpricing&&!e.zeroBuildCost?q:!e.cbdpricing&&e.zeroBuildCost?Y:e.cbdpricing||e.zeroBuildCost?te:ee},e.prototype.renderPopupContent=function(e){var t=c.DomUtil.create("div");if(t.innerHTML="<b>"+e.id+"</b></br>"+e.address1+"</br>"+e.address2+"</br><br />",t.innerHTML+="<b>Enterprise Ethernet</b></br>",t.innerHTML+="Price Zone: "+(e.cbdpricing?"CBD":"Zone 1/2/3")+"<br />",t.innerHTML+="Build Cost: "+(e.zeroBuildCost?"$0":"POA")+"<br />",t.innerHTML+="<br />",a()){var n=c.DomUtil.create("hr"),r=c.DomUtil.create("pre");r.innerHTML=JSON.stringify(e,null,2),t.appendChild(n),t.appendChild(r)}return t},e.prototype.renderTooltip=function(e){var t=e[0].address1;return e.length>1&&(t+=" ( + "+(e.length-1)+" more)"),t},e.prototype.getLegendItems=function(){return[{label:"EE CBD $0",colour:K},{label:"EE CBD POA",colour:q},{label:"EE Z123 $0",colour:Y},{label:"EE Zone 1/2/3 POA",colour:ee},{label:"Unknown",colour:te}]},e}();var re,oe=new i("index.ts"),ie=function(){try{return process.argv.includes("development")}catch(e){return!1}}();oe.debug("isDevelopment",ie),"serviceWorker"in navigator&&!ie&&window.addEventListener("load",(function(){navigator.serviceWorker.register("./service-worker.js").then((function(e){oe.info("SW registered: ",e)})).catch((function(e){oe.warn("SW registration failed: ",e)}))})),re=function(){var e=new l,t=new O,n=new X,r=new ne,o=function(){var e=new URLSearchParams(window.location.search).get("mode");return e||(localStorage.getItem("mode")||"all")},i=function(e){switch(e||(e=o()),e){case"all":default:return t;case"upgrade":return n;case"ee":return r}},a=i(),s=new z,c=new b({mapContainerId:"map",api:e,defaultModeHandler:a,placestore:s}),u=new P(o());c.addControl("displaymode",u);var p=new R;p.updateLegend(a.getLegendItems()),c.addControl("legend",p),u.on("change",(function(e){var t=i(e.state);if(t){c.setModeHandler(t),p.updateLegend(t.getLegendItems()),localStorage.setItem("mode",e.state);var n=new URL(window.location.href);n.searchParams.set("mode",e.state),window.history.pushState({},"",n.toString())}}))},"complete"===document.readyState||"interactive"===document.readyState?setTimeout(re,1):document.addEventListener("DOMContentLoaded",re)},36:e=>{e.exports="data:image/svg+xml,%3Csvg xmlns=%27http://www.w3.org/2000/svg%27 stroke=%27%23000%27 stroke-linecap=%27round%27 stroke-width=%271.6%27 viewBox=%270 0 24 24%27%3E%3Cdefs/%3E%3Cg%3E%3Cpath stroke-opacity=%27.1%27 d=%27M14 8.4l3-5%27/%3E%3Cpath stroke-opacity=%27.2%27 d=%27M15.6 10l5-3%27/%3E%3Cpath stroke-opacity=%27.3%27 d=%27M16.2 12H22%27/%3E%3Cpath stroke-opacity=%27.4%27 d=%27M15.6 14l5 3m-6.5-1.4l2.9 5%27/%3E%3Cpath stroke-opacity=%27.5%27 d=%27M12 16.2V22m-2-6.4l-3 5%27/%3E%3Cpath stroke-opacity=%27.6%27 d=%27M8.4 14l-5 3%27/%3E%3Cpath stroke-opacity=%27.7%27 d=%27M7.8 12H2%27/%3E%3Cpath stroke-opacity=%27.8%27 d=%27M8.4 10l-5-3%27/%3E%3Cpath stroke-opacity=%27.9%27 d=%27M10 8.4l-3-5%27/%3E%3Cpath d=%27M12 7.8V2%27/%3E%3CanimateTransform attributeName=%27transform%27 calcMode=%27discrete%27 dur=%271s%27 repeatCount=%27indefinite%27 type=%27rotate%27 values=%270 12 12;30 12 12;60 12 12;90 12 12;120 12 12;150 12 12;180 12 12;210 12 12;240 12 12;270 12 12;300 12 12;330 12 12%27/%3E%3C/g%3E%3C/svg%3E"},585:e=>{e.exports="data:image/svg+xml,%3Csvg xmlns=%27http://www.w3.org/2000/svg%27 viewBox=%270 0 24 24%27%3E%3Cpath d=%27M12.2 13l3.4 6.6c.6 1.1 2.5-.4 2-1.2l-4-6.2z%27/%3E%3Ccircle cx=%2710.8%27 cy=%278.9%27 r=%273.9%27 fill=%27none%27 stroke=%27%23000%27 stroke-width=%271.5%27/%3E%3C/svg%3E"},539:e=>{e.exports='data:image/svg+xml;charset=UTF-8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><path fill="black" d="M304 48a48 48 0 1 1-96 0 48 48 0 0 1 96 0zm-48 368a48 48 0 1 0 0 96 48 48 0 0 0 0-96zm208-208a48 48 0 1 0 0 96 48 48 0 0 0 0-96zM96 256a48 48 0 1 0-96 0 48 48 0 0 0 96 0zm13 99a48 48 0 1 0 0 96 48 48 0 0 0 0-96zm294 0a48 48 0 1 0 0 96 48 48 0 0 0 0-96zM109 61a48 48 0 1 0 0 96 48 48 0 0 0 0-96z"/></svg>'},141:e=>{e.exports='data:image/svg+xml;charset=UTF-8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><path fill="black" d="M445 4 29 195c-48 23-32 93 19 93h176v176c0 51 70 67 93 19L508 67c16-38-25-79-63-63z"/></svg>'},478:e=>{e.exports='data:image/svg+xml;charset=UTF-8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><path fill="rgb%28252, 132, 40%29" d="M445 4 29 195c-48 23-32 93 19 93h176v176c0 51 70 67 93 19L508 67c16-38-25-79-63-63z"/></svg>'},38:e=>{e.exports='data:image/svg+xml;charset=UTF-8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><path fill="rgb%2832, 116, 182%29" d="M445 4 29 195c-48 23-32 93 19 93h176v176c0 51 70 67 93 19L508 67c16-38-25-79-63-63z"/></svg>'}},n={};function r(e){var o=n[e];if(void 0!==o)return o.exports;var i=n[e]={id:e,exports:{}};return t[e].call(i.exports,i,i.exports,r),i.exports}r.m=t,e=[],r.O=(t,n,o,i)=>{if(!n){var a=1/0;for(u=0;u<e.length;u++){for(var[n,o,i]=e[u],s=!0,l=0;l<n.length;l++)(!1&i||a>=i)&&Object.keys(r.O).every((e=>r.O[e](n[l])))?n.splice(l--,1):(s=!1,i<a&&(a=i));if(s){e.splice(u--,1);var c=o();void 0!==c&&(t=c)}}return t}i=i||0;for(var u=e.length;u>0&&e[u-1][2]>i;u--)e[u]=e[u-1];e[u]=[n,o,i]},r.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return r.d(t,{a:t}),t},r.d=(e,t)=>{for(var n in t)r.o(t,n)&&!r.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},r.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),r.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),(()=>{var e;r.g.importScripts&&(e=r.g.location+"");var t=r.g.document;if(!e&&t&&(t.currentScript&&(e=t.currentScript.src),!e)){var n=t.getElementsByTagName("script");if(n.length)for(var o=n.length-1;o>-1&&!e;)e=n[o--].src}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),r.p=e})(),(()=>{r.b=document.baseURI||self.location.href;var e={143:0};r.O.j=t=>0===e[t];var t=(t,n)=>{var o,i,[a,s,l]=n,c=0;if(a.some((t=>0!==e[t]))){for(o in s)r.o(s,o)&&(r.m[o]=s[o]);if(l)var u=l(r)}for(t&&t(n);c<a.length;c++)i=a[c],r.o(e,i)&&e[i]&&e[i][0](),e[i]=0;return r.O(u)},n=self.webpackChunk=self.webpackChunk||[];n.forEach(t.bind(null,0)),n.push=t.bind(null,n.push.bind(n))})(),r.nc=void 0;var o=r.O(void 0,[578],(()=>r(609)));o=r.O(o)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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RCxRQUFLclgsRUNHekIsSUFBSXNYLEVBQXNCcEQsRUFBb0JRLE9BQUUxVSxFQUFXLENBQUMsTUFBTSxJQUFPa1UsRUFBb0IsT0FDN0ZvRCxFQUFzQnBELEVBQW9CUSxFQUFFNEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ydW50aW1lL2NodW5rIGxvYWRlZCIsIndlYnBhY2s6Ly8vLi9zcmMvdXRpbHMudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2FwaS9saXBfYXBpLmNsYXNzLnRzIiwid2VicGFjazovLy8uL3NyYy9tYXJrZXJsYXllci9tYXJrZXJsYXllci5jbHVzdGVyLmNsYXNzLnRzIiwid2VicGFjazovLy8uL3NyYy9uYm5fdGVjaF9tYXAuY2xhc3MudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbnRyb2xzL2NvbnRyb2wuYWJzdHJhY3QudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbnRyb2xzL2NvbnRyb2xfZGlzcGxheV9tb2RlLmNsYXNzLnRzIiwid2VicGFjazovLy8uL3NyYy9tb2Rlcy9tb2RlLmFsbC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvY29udHJvbHMvY29udHJvbF9sZWdlbmQuY2xhc3MudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3BsYWNlc3RvcmUvaW5kZXhkYi5wbGFjZXN0b3JlLnRzIiwid2VicGFjazovLy8uL3NyYy9tb2Rlcy90ZWNodXBncmFkZS5tb2RlLnRzIiwid2VicGFjazovLy8uL3NyYy9tb2Rlcy9lZS5tb2RlLnRzIiwid2VicGFjazovLy8uL3NyYy9pbmRleC50cyIsIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vL3dlYnBhY2svcnVudGltZS9jb21wYXQgZ2V0IGRlZmF1bHQgZXhwb3J0Iiwid2VicGFjazovLy93ZWJwYWNrL3J1bnRpbWUvZGVmaW5lIHByb3BlcnR5IGdldHRlcnMiLCJ3ZWJwYWNrOi8vL3dlYnBhY2svcnVudGltZS9nbG9iYWwiLCJ3ZWJwYWNrOi8vL3dlYnBhY2svcnVudGltZS9oYXNPd25Qcm9wZXJ0eSBzaG9ydGhhbmQiLCJ3ZWJwYWNrOi8vL3dlYnBhY2svcnVudGltZS9wdWJsaWNQYXRoIiwid2VicGFjazovLy93ZWJwYWNrL3J1bnRpbWUvanNvbnAgY2h1bmsgbG9hZGluZyIsIndlYnBhY2s6Ly8vd2VicGFjay9ydW50aW1lL25vbmNlIiwid2VicGFjazovLy93ZWJwYWNrL3N0YXJ0dXAiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIGRlZmVycmVkID0gW107XG5fX3dlYnBhY2tfcmVxdWlyZV9fLk8gPSAocmVzdWx0LCBjaHVua0lkcywgZm4sIHByaW9yaXR5KSA9PiB7XG5cdGlmKGNodW5rSWRzKSB7XG5cdFx0cHJpb3JpdHkgPSBwcmlvcml0eSB8fCAwO1xuXHRcdGZvcih2YXIgaSA9IGRlZmVycmVkLmxlbmd0aDsgaSA+IDAgJiYgZGVmZXJyZWRbaSAtIDFdWzJdID4gcHJpb3JpdHk7IGktLSkgZGVmZXJyZWRbaV0gPSBkZWZlcnJlZFtpIC0gMV07XG5cdFx0ZGVmZXJyZWRbaV0gPSBbY2h1bmtJZHMsIGZuLCBwcmlvcml0eV07XG5cdFx0cmV0dXJuO1xuXHR9XG5cdHZhciBub3RGdWxmaWxsZWQgPSBJbmZpbml0eTtcblx0Zm9yICh2YXIgaSA9IDA7IGkgPCBkZWZlcnJlZC5sZW5ndGg7IGkrKykge1xuXHRcdHZhciBbY2h1bmtJZHMsIGZuLCBwcmlvcml0eV0gPSBkZWZlcnJlZFtpXTtcblx0XHR2YXIgZnVsZmlsbGVkID0gdHJ1ZTtcblx0XHRmb3IgKHZhciBqID0gMDsgaiA8IGNodW5rSWRzLmxlbmd0aDsgaisrKSB7XG5cdFx0XHRpZiAoKHByaW9yaXR5ICYgMSA9PT0gMCB8fCBub3RGdWxmaWxsZWQgPj0gcHJpb3JpdHkpICYmIE9iamVjdC5rZXlzKF9fd2VicGFja19yZXF1aXJlX18uTykuZXZlcnkoKGtleSkgPT4gKF9fd2VicGFja19yZXF1aXJlX18uT1trZXldKGNodW5rSWRzW2pdKSkpKSB7XG5cdFx0XHRcdGNodW5rSWRzLnNwbGljZShqLS0sIDEpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZnVsZmlsbGVkID0gZmFsc2U7XG5cdFx0XHRcdGlmKHByaW9yaXR5IDwgbm90RnVsZmlsbGVkKSBub3RGdWxmaWxsZWQgPSBwcmlvcml0eTtcblx0XHRcdH1cblx0XHR9XG5cdFx0aWYoZnVsZmlsbGVkKSB7XG5cdFx0XHRkZWZlcnJlZC5zcGxpY2UoaS0tLCAxKVxuXHRcdFx0dmFyIHIgPSBmbigpO1xuXHRcdFx0aWYgKHIgIT09IHVuZGVmaW5lZCkgcmVzdWx0ID0gcjtcblx0XHR9XG5cdH1cblx0cmV0dXJuIHJlc3VsdDtcbn07IiwiaW1wb3J0IHsgTmJuUGxhY2UgfSBmcm9tIFwiLi90eXBlc1wiO1xyXG5cclxuXHJcbmV4cG9ydCBjbGFzcyBMb2dnZXIge1xyXG5cclxuICAgIHN1YihuYW1lOiBzdHJpbmcpIHtcclxuICAgICAgICByZXR1cm4gbmV3IExvZ2dlcihgJHt0aGlzLm5hbWV9LiR7bmFtZX1gKTtcclxuICAgIH1cclxuXHJcbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIG5hbWU6IHN0cmluZykge1xyXG4gICAgfVxyXG5cclxuICAgIGVycm9yKC4uLmFyZ3M6IGFueVtdKSB7XHJcbiAgICAgICAgY29uc29sZS5lcnJvcihgWyR7dGhpcy5uYW1lfV1gLCAuLi5hcmdzKTtcclxuICAgIH1cclxuXHJcbiAgICB3YXJuKC4uLmFyZ3M6IGFueVtdKSB7XHJcbiAgICAgICAgY29uc29sZS53YXJuKGBbJHt0aGlzLm5hbWV9XWAsIC4uLmFyZ3MpO1xyXG4gICAgfVxyXG5cclxuICAgIGRlYnVnKC4uLmFyZ3M6IGFueVtdKSB7XHJcbiAgICAgICAgaWYgKGlzRGVidWdNb2RlKCkpIHtcclxuICAgICAgICAgICAgY29uc29sZS5kZWJ1ZyhgWyR7dGhpcy5uYW1lfV1gLCAuLi5hcmdzKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBcclxuICAgIGluZm8oLi4uYXJnczogYW55W10pIHtcclxuICAgICAgICBjb25zb2xlLmluZm8oYFske3RoaXMubmFtZX1dYCwgLi4uYXJncyk7XHJcbiAgICB9XHJcblxyXG4gICAgbG9nKC4uLmFyZ3M6IGFueVtdKSB7XHJcbiAgICAgICAgY29uc29sZS5sb2coYFske3RoaXMubmFtZX1dYCwgLi4uYXJncyk7XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBjaHVua0FycmF5PFQ+KGFycmF5OiBUW10sIHNpemU6IG51bWJlcik6IFRbXVtdIHtcclxuICAgIGNvbnN0IHJlc3VsdHMgPSBbXTtcclxuICAgIHdoaWxlIChhcnJheS5sZW5ndGgpIHtcclxuICAgICAgICByZXN1bHRzLnB1c2goYXJyYXkuc3BsaWNlKDAsIHNpemUpKTtcclxuICAgIH1cclxuICAgIHJldHVybiByZXN1bHRzO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gaXNMb2NhbGhvc3QoKSB7XHJcbiAgICByZXR1cm4gd2luZG93LmxvY2F0aW9uLmhyZWYuaW5jbHVkZXMoJ2xvY2FsaG9zdCcpXHJcbiAgICAgICAgfHwgd2luZG93LmxvY2F0aW9uLmhyZWYuaW5jbHVkZXMoJzEyNy4wLjAuMScpXHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBpc0RlYnVnTW9kZSgpIHtcclxuICAgIHJldHVybiBwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ2RldmVsb3BtZW50J1xyXG4gICAgICAgIHx8IHdpbmRvdy5sb2NhdGlvbi5ocmVmLmluY2x1ZGVzKCdsb2NhbGhvc3QnKVxyXG4gICAgICAgIHx8IHdpbmRvdy5sb2NhdGlvbi5ocmVmLmluY2x1ZGVzKCdkZWJ1Zz10cnVlJylcclxuICAgIDtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGlzUGxhY2VGVFRQKHBsYWNlOiBOYm5QbGFjZSkge1xyXG4gICAgcmV0dXJuIHBsYWNlLnRlY2hUeXBlID09PSAnRlRUUCc7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBpc1BsYWNlRlRUTihwbGFjZTogTmJuUGxhY2UpIHtcclxuICAgIHJldHVybiBwbGFjZS50ZWNoVHlwZSA9PT0gJ0ZUVE4nO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gaXNQbGFjZUhGQyhwbGFjZTogTmJuUGxhY2UpIHtcclxuICAgIHJldHVybiBwbGFjZS50ZWNoVHlwZSA9PT0gJ0hGQyc7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBpc1BsYWNlRlRUQihwbGFjZTogTmJuUGxhY2UpIHtcclxuICAgIHJldHVybiBwbGFjZS50ZWNoVHlwZSA9PT0gJ0ZUVEInO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gaXNQbGFjZUZUVEMocGxhY2U6IE5iblBsYWNlKSB7XHJcbiAgICBpZihwbGFjZS50ZWNoVHlwZSA9PSBcIkZUVENcIlxyXG4gICAgICAgICYmIHBsYWNlLnJlYXNvbkNvZGUgJiYgcGxhY2UucmVhc29uQ29kZS5tYXRjaCgvXkZUVEMvKVxyXG4gICAgICAgICYmIHBsYWNlLnRlY2hDaGFuZ2VTdGF0dXMgPT0gJ05ldyBUZWNoIENvbm5lY3RlZCdcclxuICAgICkge1xyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGZhbHNlO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gaXNQbGFjZUZpeGVkV2lyZWxlc3MocGxhY2U6IE5iblBsYWNlKSB7XHJcbiAgICByZXR1cm4gcGxhY2UudGVjaFR5cGUgPT09ICdGaXhlZCBXaXJlbGVzcyc7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBpc1BsYWNlU2F0ZWxsaXRlKHBsYWNlOiBOYm5QbGFjZSkge1xyXG4gICAgcmV0dXJuIHBsYWNlLnRlY2hUeXBlID09PSAnU2F0ZWxsaXRlJztcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGlzUGxhY2VGVFRQQXZhaWwocGxhY2U6IE5iblBsYWNlKSB7XHJcbiAgICBpZiAocGxhY2UuYWx0UmVhc29uQ29kZSAmJiBwbGFjZS5hbHRSZWFzb25Db2RlLm1hdGNoKC9eRlRUUC8pKSB7XHJcbiAgICAgICAgc3dpdGNoKHBsYWNlLnRlY2hDaGFuZ2VTdGF0dXMpIHtcclxuICAgICAgICAgICAgY2FzZSAnRWxpZ2libGUgVG8gT3JkZXInOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIGZhbHNlO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gaXNQbGFjZUZUVFBTb29uKHBsYWNlOiBOYm5QbGFjZSkge1xyXG4gICAgaWYgKHBsYWNlLmFsdFJlYXNvbkNvZGUgJiYgcGxhY2UuYWx0UmVhc29uQ29kZS5tYXRjaCgvXkZUVFAvKSkge1xyXG4gICAgICAgIHN3aXRjaChwbGFjZS50ZWNoQ2hhbmdlU3RhdHVzKSB7XHJcbiAgICAgICAgICAgIGNhc2UgJ0luIERlc2lnbic6XHJcbiAgICAgICAgICAgIGNhc2UgJ0J1aWxkIEZpbmFsaXNlZCc6XHJcbiAgICAgICAgICAgIGNhc2UgJ1BsYW5uZWQnOlxyXG4gICAgICAgICAgICBjYXNlICdNRFUgQ29tcGxleCBFbGlnaWJsZSBUbyBBcHBseSc6XHJcbiAgICAgICAgICAgIGNhc2UgJ01EVSBDb21wbGV4IFByZW1pc2VzIEluIEJ1aWxkJzpcclxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiBmYWxzZTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGlzUGxhY2VGVFRQRmFyKHBsYWNlOiBOYm5QbGFjZSkge1xyXG4gICAgaWYgKHBsYWNlLmFsdFJlYXNvbkNvZGUgJiYgcGxhY2UuYWx0UmVhc29uQ29kZS5tYXRjaCgvXkZUVFAvKSkge1xyXG4gICAgICAgIHN3aXRjaChwbGFjZS50ZWNoQ2hhbmdlU3RhdHVzKSB7XHJcbiAgICAgICAgICAgIGNhc2UgJ0NvbW1pdHRlZCc6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBpc0Z3dG9GVFROKHBsYWNlOiBOYm5QbGFjZSkge1xyXG4gICAgcmV0dXJuIHBsYWNlLnRlY2hUeXBlID09IFwiRlRUTlwiXHJcbiAgICAgICAgJiYgcGxhY2UucmVhc29uQ29kZSA9PSBcIkZUVE5fU0FcIlxyXG4gICAgICAgICYmIHBsYWNlLmFsdFJlYXNvbkNvZGUgPT0gXCJGV19DVFwiXHJcbiAgICAgICAgJiYgcGxhY2UudGVjaENoYW5nZVN0YXR1cyA9PSAnRWxpZ2libGUgVG8gT3JkZXInXHJcbiAgICA7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBpc0Z3dG9GVFRDKHBsYWNlOiBOYm5QbGFjZSkge1xyXG4gICAgcmV0dXJuIHBsYWNlLnRlY2hUeXBlID09IFwiRlRUQ1wiXHJcbiAgICAgICAgJiYgcGxhY2UucmVhc29uQ29kZSA9PSBcIkZUVENfU0FcIlxyXG4gICAgICAgICYmIHBsYWNlLmFsdFJlYXNvbkNvZGUgPT0gXCJGV19DVFwiXHJcbiAgICAgICAgJiYgcGxhY2UudGVjaENoYW5nZVN0YXR1cyA9PSAnRWxpZ2libGUgVG8gT3JkZXInXHJcbiAgICA7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBpc1NhdFRvRlcocGxhY2U6IE5iblBsYWNlKSB7XHJcbiAgICByZXR1cm4gcGxhY2UudGVjaFR5cGUgPT0gXCJXSVJFTEVTU1wiXHJcbiAgICAgICAgJiYgcGxhY2UucmVhc29uQ29kZSA9PSBcIkZXX1NBXCJcclxuICAgICAgICAmJiBwbGFjZS50ZWNoQ2hhbmdlU3RhdHVzID09ICdFbGlnaWJsZSBUbyBPcmRlcidcclxuICAgIDtcclxufVxyXG4iLCJpbXBvcnQgSUFwaSBmcm9tIFwiLi4vaW50ZXJmYWNlcy9hcGkuaW50ZXJmYWNlXCI7XHJcbmltcG9ydCB7IE5iblBsYWNlQXBpUmVzcG9uc2UgfSBmcm9tIFwiLi4vdHlwZXNcIjtcclxuaW1wb3J0IHsgaXNMb2NhbGhvc3QgfSBmcm9tIFwiLi4vdXRpbHNcIjtcclxuXHJcbmNvbnN0IHVybEJhc2UgPSBpc0xvY2FsaG9zdCgpID8gJ2h0dHA6Ly8xMjcuMC4wLjE6MzAwMCcgOiAnaHR0cHM6Ly9hcGkubGlwLm5ldC5hdSdcclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTGlwQXBpIGltcGxlbWVudHMgSUFwaSB7XHJcblxyXG4gICAgYXN5bmMgZmV0Y2hQYWdlKFxyXG4gICAgICAgIGJvdW5kczogTC5MYXRMbmdCb3VuZHMsXHJcbiAgICAgICAgcGFnZTogbnVtYmVyID0gMSxcclxuICAgICAgICBwcm9jZWVkOiAoKSA9PiBib29sZWFuID0gKCkgPT4gdHJ1ZSxcclxuICAgICkgOiBQcm9taXNlPE5iblBsYWNlQXBpUmVzcG9uc2U+XHJcbiAgICB7XHJcblxyXG4gICAgICAgIGNvbnN0IG5vcnRoID0gYm91bmRzLmdldE5vcnRoKCkudG9GaXhlZCgyKTtcclxuICAgICAgICBjb25zdCBlYXN0ID0gYm91bmRzLmdldEVhc3QoKS50b0ZpeGVkKDIpO1xyXG4gICAgICAgIGNvbnN0IHNvdXRoID0gYm91bmRzLmdldFNvdXRoKCkudG9GaXhlZCgyKTtcclxuICAgICAgICBjb25zdCB3ZXN0ID0gYm91bmRzLmdldFdlc3QoKS50b0ZpeGVkKDIpO1xyXG5cclxuICAgICAgICBpZiAoIXByb2NlZWQoKSkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1Byb2NlZWQgZnVuY3Rpb24gcmV0dXJuZWQgZmFsc2UuIFN0b3BwaW5nIGZldGNoLicpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBcclxuICAgICAgICBwYWdlID0gTWF0aC5tYXgoMSwgTnVtYmVyKHBhZ2UpKTtcclxuXHJcbiAgICAgICAgY29uc3QgcGFnZVVybCA9IGAke3VybEJhc2V9L25ibi1idWxrL21hcC8ke25vcnRofS8ke2Vhc3R9LyR7c291dGh9LyR7d2VzdH0/cGFnZT0ke3BhZ2V9YDtcclxuXHJcbiAgICAgICAgLy8gQ2hlY2sgaWYgcGFnZSBoYXMgYWxyZWFkeSBiZWVuIGxvYWRlZCB0aGlzIHNlc3Npb24uXHJcbiAgICAgICAgLy8gY29uc3QgY2FjaGUgPSBzZXNzaW9uU3RvcmFnZS5nZXRJdGVtKHBhZ2VVcmwpO1xyXG4gICAgICAgIC8vIGNvbnN0IGNhY2hlZFRpbWUgPSBjYWNoZSA/IG5ldyBEYXRlKGNhY2hlKSA6IG51bGw7XHJcbiAgICAgICAgLy8gaWYgKGNhY2hlZFRpbWUgJiYgY2FjaGVkVGltZS5nZXRUaW1lKCkgPiBuZXcgRGF0ZSgpLmdldFRpbWUoKSAtIDEwMDAgKiA2MCAqIDYwICogMjQpIHtcclxuICAgICAgICAvLyAgICAgdGhyb3cgbmV3IEVycm9yKCdQYWdlIGFscmVhZHkgbG9hZGVkIHRoaXMgc2Vzc2lvbi4nKTtcclxuICAgICAgICAvLyB9XHJcbiAgICAgICAgXHJcbiAgICAgICAgcmV0dXJuIGF3YWl0IG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuXHJcbiAgICAgICAgICAgIGZldGNoKHBhZ2VVcmwsIHtcclxuICAgICAgICAgICAgICAgIG1ldGhvZDogJ0dFVCcsXHJcbiAgICAgICAgICAgICAgICByZWRpcmVjdDogJ2ZvbGxvdycsXHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIC50aGVuKHJlc3BvbnNlID0+IHJlc3BvbnNlLnRleHQoKSlcclxuICAgICAgICAgICAgLnRoZW4ocmVzdWx0ID0+IHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHBhcnNlZFJlc3VsdCA9IEpTT04ucGFyc2UocmVzdWx0KSBhcyB7IGRhdGE6IE5iblBsYWNlQXBpUmVzcG9uc2V9O1xyXG4gICAgICAgICAgICAgICAgcmVzb2x2ZShwYXJzZWRSZXN1bHQuZGF0YSk7XHJcbiAgICAgICAgICAgICAgICAvL3Nlc3Npb25TdG9yYWdlLnNldEl0ZW0ocGFnZVVybCwgbmV3IERhdGUoKS50b0lTT1N0cmluZygpKTtcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgLmNhdGNoKHJlamVjdCk7XHJcblxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIFxyXG4gICAgfVxyXG59IiwiaW1wb3J0IElEYXRhc3RvcmUgZnJvbSBcIi4uL2ludGVyZmFjZXMvZGF0YXN0b3JlLmludGVyZmFjZVwiO1xyXG5pbXBvcnQgSU1hcmtlckxheWVyIGZyb20gXCIuLi9pbnRlcmZhY2VzL21hcmtlcmxheWVyLmludGVyZmFjZVwiO1xyXG5cclxuaW1wb3J0ICogYXMgTCBmcm9tIFwibGVhZmxldFwiO1xyXG5pbXBvcnQgJ2xlYWZsZXQubWFya2VyY2x1c3Rlcic7XHJcbmltcG9ydCAnbGVhZmxldC5tYXJrZXJjbHVzdGVyL2Rpc3QvTWFya2VyQ2x1c3Rlci5jc3MnO1xyXG5cclxuaW1wb3J0IHsgTmJuUGxhY2UsIFBvaW50QW5kTG9jaWRzIH0gZnJvbSBcIi4uL3R5cGVzXCI7XHJcblxyXG4vLyBDb25zdGFudCBDb2xvdXJzXHJcbmNvbnN0IGNvbG91ckZUVFAgXHRcdD0gJyMxRDcwNDQnO1xyXG5jb25zdCBjb2xvdXJGVFRQQXZhaWwgICA9ICcjNzVBRDZGJztcclxuY29uc3QgY29sb3VyRlRUUFNvb24gICAgPSAnI0M4RTNDNSc7XHJcbmNvbnN0IGNvbG91ckhGQyBcdFx0PSAnI0ZGQkUwMCc7XHJcbmNvbnN0IGNvbG91ckZUVEMgXHRcdD0gJyNGRjdFMDEnO1xyXG5jb25zdCBjb2xvdXJGVFRDQXZhaWwgICA9ICcjRkY3RTAxJztcclxuY29uc3QgY29sb3VyRlRUTkIgXHRcdD0gJyNFMzA3MUQnO1xyXG5jb25zdCBjb2xvdXJGVyBcdFx0ICAgID0gJyMwMkI5RTMnO1xyXG5jb25zdCBjb2xvdXJGV0F2YWlsIFx0PSAnIzAyMkJFMyc7XHJcbmNvbnN0IGNvbG91clNhdCBcdCAgICA9ICcjNkIwMkUzJztcclxuXHJcbmNvbnN0IGNvbG91ckVFX0NCRF9aQkMgID0gJyMxRDcwNDQnO1xyXG5jb25zdCBjb2xvdXJFRV9DQkRfQkMgICA9ICcjMDJCOUUzJztcclxuY29uc3QgY29sb3VyRUVfWjEyM19aQkMgPSAnI0ZGN0UwMSc7XHJcbmNvbnN0IGNvbG91ckVFX1oxMjNfQkMgID0gJyNFMzA3MUQnO1xyXG5cclxuY29uc3QgQ09MX1RFQ0hfQ09NUExFVEUgICAgICAgICA9ICcjMUQ3MDQ0JztcclxuY29uc3QgQ09MX1RFQ0hfQVZBSUwgICAgICAgICAgICA9ICcjMDJCOUUzJztcclxuY29uc3QgQ09MX1RFQ0hfQlVJTERGSU5BTElTRUQgICA9ICcjRkZCRTAwJztcclxuY29uc3QgQ09MX1RFQ0hfREVTSUdOICAgICAgICAgICA9ICcjRkY3RTAxJztcclxuY29uc3QgQ09MX1RFQ0hfQ09NTUlUVEVEICAgICAgICA9ICcjRTMwNzFEJztcclxuXHJcbmNvbnN0IENPTF9URUNIX01EVV9JTkJVSUxEICAgICAgPSAnIzAyMkJFMyc7XHJcbmNvbnN0IENPTF9URUNIX01EVV9FTElHSUJMRSAgICAgPSAnIzZCMDJFMyc7XHJcblxyXG5jb25zdCBjb2xvdXJVbmtub3duICAgICAgPSAnIzg4ODg4OCc7XHJcblxyXG5pbXBvcnQgSU1vZGUgZnJvbSBcIi4uL2ludGVyZmFjZXMvbW9kZS5pbnRlcmZhY2VcIjtcclxuaW1wb3J0IElQbGFjZVN0b3JlIGZyb20gXCIuLi9pbnRlcmZhY2VzL3BsYWNlc3RvcmUuaW50ZXJmYWNlXCI7XHJcbmltcG9ydCB7IExvZ2dlciB9IGZyb20gXCIuLi91dGlsc1wiO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTWFya2VyTGF5ZXJDbHVzdGVyIGltcGxlbWVudHMgSU1hcmtlckxheWVyIHtcclxuXHJcbiAgICBwcml2YXRlIGxvZ2dlciA9IG5ldyBMb2dnZXIoJ01hcmtlckxheWVyQ2x1c3RlcicpO1xyXG5cclxuICAgIHByaXZhdGUgbWFwOiBMLk1hcDtcclxuICAgIHByaXZhdGUgcGxhY2VTdG9yZTogSVBsYWNlU3RvcmU7XHJcbiAgICBwcml2YXRlIG1vZGVIYW5kbGVyOiBJTW9kZTtcclxuXHJcbiAgICBwcml2YXRlIG1hcmtlcnM6IEwuTWFya2VyQ2x1c3Rlckdyb3VwO1xyXG5cclxuICAgIHByaXZhdGUgcG9pbnRNYXA6IE1hcDxzdHJpbmcsIHtcclxuICAgICAgICBsYXllcjogTC5DaXJjbGVNYXJrZXIsXHJcbiAgICAgICAgcG9pbnQ6IFBvaW50QW5kTG9jaWRzXHJcbiAgICB9PiA9IG5ldyBNYXAoKTtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihtYXA6IEwuTWFwLCBtb2RlSGFuZGxlcjogSU1vZGUsIHBsYWNlU3RvcmU6IElQbGFjZVN0b3JlKSB7XHJcblxyXG4gICAgICAgIHRoaXMubWFwID0gbWFwO1xyXG4gICAgICAgIHRoaXMucGxhY2VTdG9yZSA9IHBsYWNlU3RvcmU7XHJcbiAgICAgICAgdGhpcy5tb2RlSGFuZGxlciA9IG1vZGVIYW5kbGVyO1xyXG5cclxuICAgICAgICB0aGlzLm1hcmtlcnMgPSBuZXcgTC5NYXJrZXJDbHVzdGVyR3JvdXAoe1xyXG4gICAgICAgICAgICBtYXhDbHVzdGVyUmFkaXVzOiB0aGlzLm1hcmtlckNsdXN0ZXJSYWRpdXMsXHJcbiAgICAgICAgICAgIHNwaWRlcmZ5T25NYXhab29tOiBmYWxzZSxcclxuICAgICAgICAgICAgZGlzYWJsZUNsdXN0ZXJpbmdBdFpvb206IDE4LFxyXG4gICAgICAgICAgICBzaG93Q292ZXJhZ2VPbkhvdmVyOiB0cnVlLFxyXG4gICAgICAgICAgICB6b29tVG9Cb3VuZHNPbkNsaWNrOiB0cnVlLFxyXG4gICAgICAgICAgICByZW1vdmVPdXRzaWRlVmlzaWJsZUJvdW5kczogdHJ1ZSxcclxuICAgICAgICAgICAgaWNvbkNyZWF0ZUZ1bmN0aW9uOiB0aGlzLmljb25DcmVhdGVGdW5jdGlvbixcclxuICAgICAgICAgICAgY2h1bmtlZExvYWRpbmc6IHRydWUsXHJcbiAgICAgICAgICAgIGNodW5rSW50ZXJ2YWw6IDE1MCxcclxuICAgICAgICAgICAgY2h1bmtEZWxheTogMTUwLFxyXG4gICAgICAgICAgICBjaHVua1Byb2dyZXNzOiAocHJvY2Vzc2VkLCB0b3RhbCwgZWxhcHNlZCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ2NodW5rUHJvZ3Jlc3MnLCB7IHByb2Nlc3NlZCwgdG90YWwsIGVsYXBzZWQgfSk7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHRoaXMubWFya2Vycy5hZGRUbyh0aGlzLm1hcCk7XHJcblxyXG4gICAgICAgIHRoaXMubWFwLm9uKCd6b29tZW5kJywgKGV2ZW50KSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCd6b29tZW5kJywgZXZlbnQudGFyZ2V0LmdldFpvb20oKSk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQWRkIHBvaW50cyB0byB0aGUgbWFwXHJcbiAgICAgKiBAcGFyYW0gcG9pbnRzIFxyXG4gICAgICovXHJcbiAgICBhZGRQb2ludHMoXHJcbiAgICAgICAgcG9pbnRzOiBNYXA8c3RyaW5nLCBQb2ludEFuZExvY2lkcz5cclxuICAgICkgOiB2b2lkXHJcbiAgICB7XHJcblxyXG4gICAgICAgIGNvbnN0IGxvZ2dlciA9IHRoaXMubG9nZ2VyLnN1YignYWRkUG9pbnRzJyk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgY29uc3QgbmV3TGF5ZXJzOiBMLkNpcmNsZU1hcmtlcltdID0gW107XHJcblxyXG4gICAgICAgIC8vIEFkZCB0aGUgcG9pbnRzIHRvIHRoZSBwb2ludCBzdG9yZVxyXG4gICAgICAgIHBvaW50cy5mb3JFYWNoKChwb2ludCkgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCBsYXRMbmdTdHJpbmcgPSBwb2ludC5sYXQgKyAnLCcgKyBwb2ludC5sbmc7XHJcbiAgICAgICAgICAgIGNvbnN0IHBvaW50TWFwID0gdGhpcy5wb2ludE1hcC5nZXQobGF0TG5nU3RyaW5nKTtcclxuICAgICAgICAgICAgaWYgKCFwb2ludE1hcCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbmV3TGF5ZXIgPSB0aGlzLnJlbmRlclBvaW50KHBvaW50KTtcclxuICAgICAgICAgICAgICAgIG5ld0xheWVycy5wdXNoKG5ld0xheWVyKTtcclxuICAgICAgICAgICAgICAgIHRoaXMucG9pbnRNYXAuc2V0KGxhdExuZ1N0cmluZywge1xyXG4gICAgICAgICAgICAgICAgICAgIGxheWVyOiBuZXdMYXllcixcclxuICAgICAgICAgICAgICAgICAgICBwb2ludCxcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgcG9pbnRNYXAucG9pbnQgPSBwb2ludDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICAvLyBBZGQgYWxsIHRoZSBsYXllcnMgdG8gdGhlIG1hcFxyXG4gICAgICAgIGxvZ2dlci5kZWJ1ZygnQWRkaW5nIG5ldyBsYXllcnMnLCBuZXdMYXllcnMubGVuZ3RoKTtcclxuICAgICAgICBpZiAobmV3TGF5ZXJzLmxlbmd0aCkge1xyXG4gICAgICAgICAgICB0aGlzLm1hcmtlcnMuYWRkTGF5ZXJzKG5ld0xheWVycyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFJlbW92ZSBwb2ludHMgZnJvbSB0aGUgbWFwXHJcbiAgICAgKiBAcGFyYW0gcG9pbnRzIFxyXG4gICAgICovXHJcbiAgICByZW1vdmVBbGxQb2ludHMoKSA6IHZvaWRcclxuICAgIHtcclxuICAgICAgICB0aGlzLmxvZ2dlci5zdWIoJ3JlbW92ZUFsbFBvaW50cycpLmRlYnVnKCdSZW1vdmluZyBhbGwgcG9pbnRzJywgdGhpcy5wb2ludE1hcCk7XHJcbiAgICAgICAgdGhpcy5tYXJrZXJzLmNsZWFyTGF5ZXJzKCk7XHJcbiAgICAgICAgdGhpcy5wb2ludE1hcC5jbGVhcigpO1xyXG4gICAgICAgIHRoaXMubG9nZ2VyLnN1YigncmVtb3ZlQWxsUG9pbnRzJykuZGVidWcoJ1JlbW92ZWQgYWxsIHBvaW50cycsIHRoaXMucG9pbnRNYXApO1xyXG4gICAgfVxyXG5cclxuICAgIFxyXG4gICAgYXN5bmMgcmVtb3ZlQWxsTWFya2VycygpOiBQcm9taXNlPHZvaWQ+IHtcclxuICAgICAgICB0aGlzLnJlbW92ZUFsbFBvaW50cygpO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICBtYXJrZXJDbHVzdGVyUmFkaXVzKHpvb206IG51bWJlcikge1xyXG4gICAgICAgIHN3aXRjaCh6b29tKSB7XHJcbiAgICAgICAgICAgIGNhc2UgMDpcclxuICAgICAgICAgICAgY2FzZSAxOlxyXG4gICAgICAgICAgICBjYXNlIDI6XHJcbiAgICAgICAgICAgIGNhc2UgMzpcclxuICAgICAgICAgICAgY2FzZSA0OlxyXG4gICAgICAgICAgICBjYXNlIDU6XHJcbiAgICAgICAgICAgIGNhc2UgNjpcclxuICAgICAgICAgICAgY2FzZSA3OlxyXG4gICAgICAgICAgICBjYXNlIDg6XHJcbiAgICAgICAgICAgIGNhc2UgOTpcclxuICAgICAgICAgICAgY2FzZSAxMDpcclxuICAgICAgICAgICAgY2FzZSAxMTpcclxuICAgICAgICAgICAgY2FzZSAxMjpcclxuICAgICAgICAgICAgY2FzZSAxMzogcmV0dXJuIDE1MDtcclxuICAgICAgICAgICAgY2FzZSAxNDogcmV0dXJuIDEwMDtcclxuICAgICAgICAgICAgY2FzZSAxNTpcclxuICAgICAgICAgICAgY2FzZSAxNjpcclxuICAgICAgICAgICAgZGVmYXVsdDogcmV0dXJuIDA7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgdXBkYXRlUG9pbnRTdHlsZShwbGFjZXM6IE5iblBsYWNlW10sIGxheWVyOiBMLkNpcmNsZU1hcmtlcikge1xyXG4gICAgICAgIGxheWVyLnNldFN0eWxlKHtcclxuICAgICAgICAgICAgZmlsbENvbG9yOiB0aGlzLm1vZGVIYW5kbGVyLnBsYWNlQ29sb3VyKHBsYWNlc1swXSksXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgbGF5ZXIuc2V0VG9vbHRpcENvbnRlbnQodGhpcy5tb2RlSGFuZGxlci5yZW5kZXJUb29sdGlwKHBsYWNlcykpO1xyXG4gICAgICAgIGxheWVyLnJlZHJhdygpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogU2V0IHRoZSBtb2RlIGhhbmRsZXJcclxuICAgICAqICAtIFN0b3JlIHRoZSBtb2RlIGhhbmRsZXJcclxuICAgICAqICAtIFVwZGF0ZSB0aGUgY29sb3VyIG9mIHRoZSBwb2ludHNcclxuICAgICAqIEBwYXJhbSBtb2RlSGFuZGxlciBcclxuICAgICAqIEByZXR1cm5zIFxyXG4gICAgICovXHJcbiAgICBzZXRNb2RlSGFuZGxlcihtb2RlSGFuZGxlcjogSU1vZGUsIHBsYWNlc3RvcmU6IElQbGFjZVN0b3JlKSB7XHJcblxyXG4gICAgICAgIHRoaXMubW9kZUhhbmRsZXIgPSBtb2RlSGFuZGxlcjtcclxuICAgICAgICAvKlxyXG4gICAgICAgIHRoaXMucG9pbnRNYXAuZm9yRWFjaCgoeyBsYXllciwgcG9pbnQgfSkgPT4ge1xyXG5cclxuICAgICAgICAgICAgLy8gR2V0IHRoZSBwbGFjZXNcclxuICAgICAgICAgICAgY29uc3QgZ2V0UGxhY2VzID0gcGxhY2VzdG9yZS5nZXRQbGFjZXMocG9pbnQuaWRzKTtcclxuXHJcbiAgICAgICAgICAgIC8vIFVwZGF0ZSB0aGUgcG9pbnQgc3R5bGVcclxuICAgICAgICAgICAgZ2V0UGxhY2VzLnRoZW4oKHBsYWNlcykgPT4gdGhpcy51cGRhdGVQb2ludFN0eWxlKHBsYWNlcywgbGF5ZXIpKTtcclxuXHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLm1hcmtlcnMgJiYgdGhpcy5tYXJrZXJzLmdldExheWVycygpLmxlbmd0aCkge1xyXG4gICAgICAgICAgICB0aGlzLm1hcmtlcnMucmVmcmVzaENsdXN0ZXJzKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgICovXHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9XHJcblxyXG4gICAgYXN5bmMgREVQX3JlZnJlc2hNYXJrZXJzSW5zaWRlQm91bmRzKGJvdW5kczogTC5MYXRMbmdCb3VuZHMsIG1GaWx0ZXI/OiAocGxhY2U6IE5iblBsYWNlKSA9PiBib29sZWFuKSB7XHJcblxyXG4gICAgICAgIC8qXHJcbiAgICAgICAgaWYgKCF0aGlzLmRhdGFzdG9yZSkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0RhdGFzdG9yZSBub3Qgc2V0Jyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zdCBuZXdQb2ludHMgPSBhd2FpdCB0aGlzLmRhdGFzdG9yZS5nZXRGdWxsUG9pbnRzV2l0aGluQm91bmRzKGJvdW5kcyk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgbmV3UG9pbnRzXHJcbiAgICAgICAgICAgIC5mb3JFYWNoKHBvaW50ID0+IHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGxhdExuZ1N0cmluZyA9IHBvaW50LmxhdGxuZztcclxuICAgICAgICAgICAgICAgIGlmICghdGhpcy5wb2ludFN0b3JlW2xhdExuZ1N0cmluZ10pIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnBvaW50U3RvcmVbbGF0TG5nU3RyaW5nXSA9IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGF5ZXI6IHRoaXMucmVuZGVyUG9pbnQocG9pbnQpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBwb2ludCxcclxuICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnBvaW50c1tsYXRMbmdTdHJpbmddLnBvaW50ID0gcG9pbnQ7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pXHJcblxyXG5cclxuICAgICAgICBpZiAobUZpbHRlcikge1xyXG5cclxuICAgICAgICAgICAgY29uc3QgcmVtb3ZlTGF5ZXJzOiBMLkxheWVyW10gPSBbXTtcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IGZpbHRlcmVkUG9pbnRzID0gT2JqZWN0LnZhbHVlcyh0aGlzLnBvaW50cylcclxuICAgICAgICAgICAgICAgIC5maWx0ZXIoKHtsYXllciwgcG9pbnR9KSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgc2hvd1BvaW50ID0gcG9pbnQucGxhY2VzLmZpbHRlcihtRmlsdGVyKS5sZW5ndGggPiAwO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghc2hvd1BvaW50KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlbW92ZUxheWVycy5wdXNoKGxheWVyKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHNob3dQb2ludDtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgaWYgKHJlbW92ZUxheWVycy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMubWFya2Vycz8ucmVtb3ZlTGF5ZXJzKHJlbW92ZUxheWVycyk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHRoaXMubWFya2Vycz8uYWRkTGF5ZXJzKGZpbHRlcmVkUG9pbnRzLm1hcChwID0+IHAubGF5ZXIpKTtcclxuXHJcbiAgICAgICAgfVxyXG4gICAgICAgICAgICBcclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5tYXJrZXJzPy5hZGRMYXllcnMoT2JqZWN0LnZhbHVlcyh0aGlzLnBvaW50cykubWFwKHAgPT4gcC5sYXllcikpO1xyXG4gICAgICAgIH1cclxuICAgICAgICAqL1xyXG4gICAgfVxyXG5cclxuICAgIGFzeW5jIHJlbW92ZU1hcmtlcnNPdXRzaWRlQm91bmRzKGJvdW5kczogTC5MYXRMbmdCb3VuZHMpIHtcclxuICAgICAgICAvLyBXZSBkb24ndCBuZWVkIHRvIGRvIGFueXRoaW5nIGhlcmUsIGFzIHRoZSBtYXJrZXIgY2x1c3RlciBwbHVnaW4gaGFuZGxlcyB0aGlzIGZvciB1c1xyXG4gICAgICAgIC8vY29uc3QgcmVtb3ZlTWFya2VycyA9IHRoaXMubWFya2Vycy5nZXRMYXllcnMoKVxyXG4gICAgICAgIC8vICAgIC5maWx0ZXIoKGxheWVyOiBMLkNpcmNsZU1hcmtlcikgPT4gIWJvdW5kcy5jb250YWlucyhsYXllci5nZXRMYXRMbmcoKSkpXHJcbiAgICAgICAgLy87XHJcbiAgICAgICAgLy90aGlzLm1hcmtlcnMucmVtb3ZlTGF5ZXJzKHJlbW92ZU1hcmtlcnMpO1xyXG4gICAgfVxyXG5cclxuICAgIHJlbmRlclBvaW50KHBvaW50OiBQb2ludEFuZExvY2lkcyk6IEwuQ2lyY2xlTWFya2VyIHtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgY29uc3QgY2lyY2xlTWFya2VyTGF5ZXIgPSBMLmNpcmNsZU1hcmtlcihbIHBvaW50LmxhdCwgcG9pbnQubG5nIF0sIHtcclxuICAgICAgICAgICAgcmFkaXVzOiA1LFxyXG4gICAgICAgICAgICBmaWxsQ29sb3I6IHBvaW50LmNvbCA/IHBvaW50LmNvbFswXSA6IHVuZGVmaW5lZCwgLy90aGlzLmdldFBsYWNlQ29sb3VyKHBsYWNlKSxcclxuICAgICAgICAgICAgY29sb3I6IFwiIzAwMDAwMFwiLFxyXG4gICAgICAgICAgICB3ZWlnaHQ6IDEsXHJcbiAgICAgICAgICAgIG9wYWNpdHk6IDEsXHJcbiAgICAgICAgICAgIGZpbGxPcGFjaXR5OiAwLjgsXHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIGNpcmNsZU1hcmtlckxheWVyLmJpbmRQb3B1cChcclxuICAgICAgICAgICAgKGxheWVyKSA9PiB7XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gQXN5bmMgcmVuZGVyIHBvcHVwIGZyb20gcGxhY2VTdG9yZSBkYXRhXHJcbiAgICAgICAgICAgICAgICB0aGlzLnBsYWNlU3RvcmUuZ2V0UGxhY2VzKHBvaW50LmlkcykudGhlbigocGxhY2VzKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcG9wdXAgPSB0aGlzLnJlbmRlclBvcHVwKHBsYWNlcyk7XHJcbiAgICAgICAgICAgICAgICAgICAgbGF5ZXIuc2V0UG9wdXBDb250ZW50KHBvcHVwKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgIC8vIFJldHVybiBsb2FkaW5nIHBvcHVwIGNvbnRlbnRcclxuICAgICAgICAgICAgICAgIGNvbnN0IGxvYWRpbmdQb3B1cCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgICAgICAgICAgICAgbG9hZGluZ1BvcHVwLmlubmVySFRNTCA9ICc8ZGl2IGNsYXNzPVwibG9hZGluZ1wiPkxvYWRpbmcuLi48L2Rpdj4nO1xyXG5cclxuICAgICAgICAgICAgICAgIHJldHVybiBsb2FkaW5nUG9wdXA7XHJcblxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBhdXRvUGFuOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgYXV0b0Nsb3NlOiBmYWxzZSxcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICk7XHJcblxyXG4gICAgICAgIGNpcmNsZU1hcmtlckxheWVyLmJpbmRUb29sdGlwKFxyXG4gICAgICAgICAgICAobGF5ZXIpID0+IHtcclxuICAgICAgICAgICAgICAgIGxldCBsYWJlbCA9IHBvaW50LmFkZFswXTtcclxuICAgICAgICBcclxuICAgICAgICAgICAgICAgIGlmIChwb2ludC5hZGQubGVuZ3RoID4gMSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGxhYmVsICs9ICcgKCArICcgKyAocG9pbnQuYWRkLmxlbmd0aCAtIDEpICsgJyBtb3JlKSc7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbGFiZWw7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHt9XHJcbiAgICAgICAgKTtcclxuICAgICAgICBcclxuICAgICAgICByZXR1cm4gY2lyY2xlTWFya2VyTGF5ZXI7XHJcblxyXG4gICAgfVxyXG5cclxuICAgIHJlbmRlclBvcHVwKHBsYWNlczogTmJuUGxhY2VbXSkgOiBIVE1MRWxlbWVudCB7XHJcblxyXG4gICAgICAgIGlmIChwbGFjZXMubGVuZ3RoID09IDEpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMubW9kZUhhbmRsZXIucmVuZGVyUG9wdXBDb250ZW50KHBsYWNlc1swXSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gdGhpcy5yZW5kb3JQb3B1cE11bHRpKHBsYWNlcyk7XHJcblxyXG4gICAgfVxyXG4gICAgXHJcbiAgICByZW5kb3JQb3B1cE11bHRpKHBsYWNlczogTmJuUGxhY2VbXSkgOiBIVE1MRWxlbWVudCB7XHJcbiAgICAgICAgY29uc3QgZ3JvdXBEaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuXHJcbiAgICAgICAgY29uc3QgcGxhY2VDb250YWluZXJzOiBIVE1MRWxlbWVudFtdID0gW107XHJcblxyXG4gICAgICAgIHBsYWNlcy5zb3J0KChhLCBiKSA9PiB7XHJcbiAgICAgICAgICAgIGlmIChhLmFkZHJlc3MxIDwgYi5hZGRyZXNzMSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIC0xO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChhLmFkZHJlc3MxID4gYi5hZGRyZXNzMSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIDE7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIDA7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIGZvciAobGV0IHBsYWNlIG9mIHBsYWNlcykge1xyXG5cclxuICAgICAgICAgICAgY29uc3QgcGxhY2VDb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IHBsYWNlQ29sb3VyID0gdGhpcy5tb2RlSGFuZGxlci5wbGFjZUNvbG91cihwbGFjZSk7XHJcblxyXG4gICAgICAgICAgICAvLyBDcmVhdGUgQWNjb3JkaW9uIEJ1dHRvblxyXG4gICAgICAgICAgICBjb25zdCBidXR0b24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdidXR0b24nKTtcclxuICAgICAgICAgICAgYnV0dG9uLmNsYXNzTGlzdC5hZGQoJ2FjY29yZGlvbicpO1xyXG4gICAgICAgICAgICBidXR0b24udHlwZSA9ICdidXR0b24nO1xyXG4gICAgICAgICAgICBidXR0b24uaW5uZXJIVE1MID0gYDxzdmcgaGVpZ2h0PVwiMTVcIiB3aWR0aD1cIjE1XCIgc3R5bGU9XCJtYXJnaW4tcmlnaHQ6M3B4XCI+YFxyXG4gICAgICAgICAgICAgICAgKyBgPGNpcmNsZSBjbGFzcz1cImNpcmNsZVwiIGN4PVwiNy41XCIgY3k9XCI5XCIgcj1cIjVcIiBzdHJva2U9XCIjMDAwXCIgc3Ryb2tlLXdpZHRoPVwiMVwiIGZpbGw9XCIke3BsYWNlQ29sb3VyfVwiIC8+YFxyXG4gICAgICAgICAgICAgICAgKyBgPC9zdmc+YFxyXG4gICAgICAgICAgICAgICAgKyBgPHNwYW4+JHtwbGFjZS5hZGRyZXNzMX08L3NwYW4+YFxyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgLy8gQWRkIFBhbmVsXHJcbiAgICAgICAgICAgIGNvbnN0IHBhbmVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICAgICAgICAgIHBhbmVsLmNsYXNzTGlzdC5hZGQoJ3BhbmVsJyk7XHJcbiAgICAgICAgICAgIHBhbmVsLmFwcGVuZENoaWxkKHRoaXMubW9kZUhhbmRsZXIucmVuZGVyUG9wdXBDb250ZW50KHBsYWNlKSk7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAvLyBBZGQgRXZlbnRzXHJcbiAgICAgICAgICAgIGJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcclxuXHJcbiAgICAgICAgICAgICAgICBjb25zdCBjdXJyZW50bHlBY3RpdmUgPSBwbGFjZUNvbnRhaW5lci5jbGFzc0xpc3QuY29udGFpbnMoJ2FjdGl2ZScpO1xyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAvLyBSZW1vdmUgYWN0aXZlIGNsYXNzIGZyb20gYWxsIGJ1dHRvbnMgYW5kIHBhbmVsc1xyXG4gICAgICAgICAgICAgICAgcGxhY2VDb250YWluZXJzLmZvckVhY2goKHBsYWNlQ29udGFpbmVyKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgcGxhY2VDb250YWluZXIuY2xhc3NMaXN0LnJlbW92ZSgnYWN0aXZlJyk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoIWN1cnJlbnRseUFjdGl2ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHBsYWNlQ29udGFpbmVyLmNsYXNzTGlzdC5hZGQoJ2FjdGl2ZScpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAvLyBBZGQgdG8gRE9NXHJcbiAgICAgICAgICAgIHBsYWNlQ29udGFpbmVyLmFwcGVuZENoaWxkKGJ1dHRvbik7XHJcbiAgICAgICAgICAgIHBsYWNlQ29udGFpbmVyLmFwcGVuZENoaWxkKHBhbmVsKTtcclxuICAgICAgICAgICAgZ3JvdXBEaXYuYXBwZW5kQ2hpbGQocGxhY2VDb250YWluZXIpO1xyXG4gICAgICAgICAgICBwbGFjZUNvbnRhaW5lcnMucHVzaChwbGFjZUNvbnRhaW5lcik7XHJcblxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIGdyb3VwRGl2O1xyXG4gICAgfVxyXG5cclxuICAgIC8qXHJcbiAgICBnZXRQbGFjZUNvbG91cihwbGFjZTogTmJuUGxhY2UpIHtcclxuXHJcbiAgICAgICAgLyoqIEVFIERpc3BsYXkgTW9kZSAqL1xyXG4gICAgICAgIC8qXHJcbiAgICAgICAgaWYgKHRoaXMuY29udHJvbHMuZGlzcGxheU1vZGUuZGlzcGxheU1vZGUgPT0gJ2VlJykge1xyXG5cclxuICAgICAgICAgICAgaWYocGxhY2UuY2JkcHJpY2luZyAmJiBwbGFjZS56ZXJvQnVpbGRDb3N0KSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gY29sb3VyRUVfQ0JEX1pCQztcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYocGxhY2UuY2JkcHJpY2luZyAmJiAhcGxhY2UuemVyb0J1aWxkQ29zdCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGNvbG91ckVFX0NCRF9CQztcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYoIXBsYWNlLmNiZHByaWNpbmcgJiYgcGxhY2UuemVyb0J1aWxkQ29zdCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGNvbG91ckVFX1oxMjNfWkJDO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZighcGxhY2UuY2JkcHJpY2luZyAmJiAhcGxhY2UuemVyb0J1aWxkQ29zdCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGNvbG91ckVFX1oxMjNfQkM7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJldHVybiBjb2xvdXJVbmtub3duO1xyXG5cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0aGlzLmNvbnRyb2xzLmRpc3BsYXlNb2RlLmRpc3BsYXlNb2RlID09ICd1cGdyYWRlJykge1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgc3dpdGNoIChwbGFjZS50ZWNoQ2hhbmdlU3RhdHVzKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlICdQcmV2aW91cyBUZWNoIERpc2Nvbm5lY3RlZCc6IHJldHVybiBDT0xfVEVDSF9DT01QTEVURTtcclxuICAgICAgICAgICAgICAgIGNhc2UgJ05ldyBUZWNoIENvbm5lY3RlZCcgOiByZXR1cm4gQ09MX1RFQ0hfQ09NUExFVEU7XHJcbiAgICAgICAgICAgICAgICBjYXNlICdJbiBEZXNpZ24nOiByZXR1cm4gQ09MX1RFQ0hfREVTSUdOO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAnQnVpbGQgRmluYWxpc2VkJzogcmV0dXJuIENPTF9URUNIX0JVSUxERklOQUxJU0VEO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAnQ29tbWl0dGVkJzogcmV0dXJuIENPTF9URUNIX0NPTU1JVFRFRDtcclxuICAgICAgICAgICAgICAgIGNhc2UgJ0VsaWdpYmxlIFRvIE9yZGVyJzogcmV0dXJuIENPTF9URUNIX0FWQUlMO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAnTURVIENvbXBsZXggRWxpZ2libGUgVG8gQXBwbHknOiByZXR1cm4gQ09MX1RFQ0hfTURVX0VMSUdJQkxFO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAnTURVIENvbXBsZXggUHJlbWlzZXMgSW4gQnVpbGQnOiByZXR1cm4gQ09MX1RFQ0hfTURVX0lOQlVJTEQ7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJldHVybiBjb2xvdXJVbmtub3duO1xyXG4gICAgICAgIH0qL1xyXG4vKlxyXG4gICAgICAgIGlmIChpc1BsYWNlRlRUUChwbGFjZSkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGNvbG91ckZUVFA7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoaXNQbGFjZUZUVFBBdmFpbChwbGFjZSkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGNvbG91ckZUVFBBdmFpbDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChpc1BsYWNlRlRUUFNvb24ocGxhY2UpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBjb2xvdXJGVFRQU29vbjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChpc1BsYWNlRlRUUEZhcihwbGFjZSkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGdldFRlY2hDb2xvdXIocGxhY2UudGVjaFR5cGUpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKGlzUGxhY2VGVFRDKHBsYWNlKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gY29sb3VyRlRUQztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChpc0ZXdG9GVFRDKHBsYWNlKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gY29sb3VyRlRUQ0F2YWlsO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKGlzRnd0b0ZUVE4ocGxhY2UpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBjb2xvdXJGVFROQjtcclxuICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICAgICAgaWYgKGlzU2F0VG9GVyhwbGFjZSkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGNvbG91ckZXQXZhaWw7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAocGxhY2UuYWx0UmVhc29uQ29kZSAmJiBwbGFjZS5hbHRSZWFzb25Db2RlICE9ICdOVUxMX05BJykge1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhwbGFjZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBnZXRUZWNoQ29sb3VyKHBsYWNlLnRlY2hUeXBlKTtcclxuICAgIH1cclxuKi9cclxuXHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQ3JlYXRlIHRoZSBpY29uIGZvciB0aGUgY2x1c3RlclxyXG4gICAgICogQHBhcmFtIGNsdXN0ZXIgXHJcbiAgICAgKiBAcmV0dXJucyBcclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSBpY29uQ3JlYXRlRnVuY3Rpb24oY2x1c3RlcjogTC5NYXJrZXJDbHVzdGVyKSA6IEwuRGl2SWNvblxyXG4gICAge1xyXG4gICAgICAgIFxyXG4gICAgICAgIGNvbnN0IGNvbG9yQXJyYXkgPSBjbHVzdGVyLmdldEFsbENoaWxkTWFya2VycygpLm1hcCgobWFya2VyKSA9PiAobWFya2VyIGFzIGFueSkub3B0aW9ucy5maWxsQ29sb3IpXHJcblxyXG4gICAgICAgIGNvbnN0IGNvbG9yQ291bnRzOiB7W2NvbG9yOiBzdHJpbmddOiBudW1iZXJ9ID0ge307XHJcblxyXG4gICAgICAgIGNvbG9yQXJyYXkuZm9yRWFjaCgoY29sb3IpID0+IHtcclxuICAgICAgICAgICAgaWYgKCFjb2xvckNvdW50c1tjb2xvcl0pIHtcclxuICAgICAgICAgICAgICAgIGNvbG9yQ291bnRzW2NvbG9yXSA9IDA7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY29sb3JDb3VudHNbY29sb3JdKys7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIGNvbnN0IGNvbG9yQXJyYXlTb3J0ZWQgPSBPYmplY3Qua2V5cyhjb2xvckNvdW50cylcclxuICAgICAgICAgICAgLnNvcnQoKGEsIGIpID0+IGNvbG9yQ291bnRzW2JdIC0gY29sb3JDb3VudHNbYV0pXHJcbiAgICAgICAgO1xyXG5cclxuICAgICAgICBsZXQgYmFja2dyb3VuZCA9ICdiYWNrZ3JvdW5kOiBjb25pYy1ncmFkaWVudCgnXHJcblxyXG4gICAgICAgIGxldCBsYXN0Q29sb3VyUGVyY2VudCA9IDA7XHJcblxyXG4gICAgICAgIGNvbG9yQXJyYXlTb3J0ZWQuZm9yRWFjaCgoY29sb3IsIGluZGV4KSA9PiB7XHJcbiAgICAgICAgICAgIGlmIChpbmRleCA9PSAwKSB7XHJcbiAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kICs9IFwiXFxuXCIgKyBjb2xvciArICcgMCUnO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNvbnN0IHRoaXNDb2xvdXJQZXJjZW50ID0gKGNvbG9yQ291bnRzW2NvbG9yXSAvIGNvbG9yQXJyYXkubGVuZ3RoICogMTAwKTtcclxuICAgICAgICAgICAgYmFja2dyb3VuZCArPSBcIiwgXFxuXCIgKyBjb2xvciArICcgJyArIChsYXN0Q29sb3VyUGVyY2VudCkgKyAnJSc7XHJcbiAgICAgICAgICAgIGJhY2tncm91bmQgKz0gXCIsIFxcblwiICsgY29sb3IgKyAnICcgKyAobGFzdENvbG91clBlcmNlbnQrdGhpc0NvbG91clBlcmNlbnQpICsgJyUnO1xyXG4gICAgICAgICAgICBsYXN0Q29sb3VyUGVyY2VudCArPSB0aGlzQ29sb3VyUGVyY2VudDtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgYmFja2dyb3VuZCArPSBcIlxcbik7XCI7XHJcblxyXG4gICAgICAgIGNvbnN0IHJhbmRvbUlkID0gTWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc3Vic3RyaW5nKDcpO1xyXG5cclxuICAgICAgICByZXR1cm4gTC5kaXZJY29uKHtcclxuICAgICAgICAgICAgaHRtbDogYDxzdHlsZT4jY2x1c3Rlcl8ke3JhbmRvbUlkfTo6YmVmb3JlIHsgJHtiYWNrZ3JvdW5kfSB9PC9zdHlsZT4gPGRpdiBpZD0nY2x1c3Rlcl8ke3JhbmRvbUlkfSc+PHNwYW4+YCArIGNsdXN0ZXIuZ2V0Q2hpbGRDb3VudCgpICsgJzwvc3Bhbj48L2Rpdj4nLFxyXG4gICAgICAgICAgICBjbGFzc05hbWU6ICdtYXJrZXItY2x1c3RlcicsXHJcbiAgICAgICAgfSlcclxuICAgIH1cclxuXHJcbn0iLCJcclxuaW1wb3J0ICdsZWFmbGV0L2Rpc3QvbGVhZmxldC5jc3MnO1xyXG5pbXBvcnQgKiBhcyBMIGZyb20gJ2xlYWZsZXQnO1xyXG5cclxuaW1wb3J0ICdsZWFmbGV0LmxvY2F0ZWNvbnRyb2wvZGlzdC9MLkNvbnRyb2wuTG9jYXRlLm1pbi5jc3MnXHJcbmltcG9ydCAnbGVhZmxldC5sb2NhdGVjb250cm9sJztcclxuXHJcbmltcG9ydCAnbGVhZmxldC1jb250cm9sLWdlb2NvZGVyL2Rpc3QvQ29udHJvbC5HZW9jb2Rlci5jc3MnO1xyXG5pbXBvcnQgeyBHZW9jb2RlciwgZ2VvY29kZXIsIGdlb2NvZGVycyB9IGZyb20gJ2xlYWZsZXQtY29udHJvbC1nZW9jb2Rlcic7XHJcblxyXG5pbXBvcnQgeyBOYm5QbGFjZSwgTmJuUGxhY2VBcGlSZXNwb25zZSwgTmJuVGVjaE1hcE9wdGlvbnMsIFBvaW50QW5kTG9jaWRzIH0gZnJvbSAnLi90eXBlcyc7XHJcbi8vaW1wb3J0IE1hcmtlckdyb3VwIGZyb20gJy4vbWFya2VyX2dyb3VwLmNsYXNzLnRzLmRldic7XHJcbi8vaW1wb3J0IENvbnRyb2xab29tV2FybmluZyBmcm9tICcuL2NvbnRyb2xfem9vbV93YXJuaW5nLmNsYXNzJztcclxuLy9pbXBvcnQgQ29udHJvbEZpbHRlciBmcm9tICcuL2NvbnRyb2xfZmlsdGVyLmNsYXNzJztcclxuXHJcbmltcG9ydCBJQXBpIGZyb20gJy4vaW50ZXJmYWNlcy9hcGkuaW50ZXJmYWNlJztcclxuaW1wb3J0IElNYXJrZXJMYXllciBmcm9tICcuL2ludGVyZmFjZXMvbWFya2VybGF5ZXIuaW50ZXJmYWNlJztcclxuaW1wb3J0IE1hcmtlckxheWVyQ2x1c3RlciBmcm9tICcuL21hcmtlcmxheWVyL21hcmtlcmxheWVyLmNsdXN0ZXIuY2xhc3MnO1xyXG5pbXBvcnQgSUNvbnRyb2wgZnJvbSAnLi9pbnRlcmZhY2VzL2NvbnRyb2wuaW50ZXJmYWNlJztcclxuaW1wb3J0IHsgaXNEZWJ1Z01vZGUgfSBmcm9tICcuL3V0aWxzJztcclxuaW1wb3J0IElNb2RlIGZyb20gJy4vaW50ZXJmYWNlcy9tb2RlLmludGVyZmFjZSc7XHJcblxyXG5pbXBvcnQgeyBMb2dnZXIgfSBmcm9tIFwiLi91dGlsc1wiO1xyXG5pbXBvcnQgSVBsYWNlU3RvcmUgZnJvbSAnLi9pbnRlcmZhY2VzL3BsYWNlc3RvcmUuaW50ZXJmYWNlJztcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiByb3VuZEJvdW5kcyhib3VuZHM6IEwuTGF0TG5nQm91bmRzKTogTC5MYXRMbmdCb3VuZHMge1xyXG4gICAgY29uc3Qgbm9ydGggPSBNYXRoLmNlaWwoYm91bmRzLmdldE5vcnRoKCkgKiA1MCkgLyA1MDtcclxuICAgIGNvbnN0IHdlc3QgPSBNYXRoLmZsb29yKGJvdW5kcy5nZXRXZXN0KCkgKiAyNSkgLyAyNTtcclxuICAgIGNvbnN0IHNvdXRoID0gTWF0aC5mbG9vcihib3VuZHMuZ2V0U291dGgoKSAqIDUwKSAvIDUwO1xyXG4gICAgY29uc3QgZWFzdCA9IE1hdGguY2VpbChib3VuZHMuZ2V0RWFzdCgpICogMjUpIC8gMjU7XHJcbiAgICByZXR1cm4gTC5sYXRMbmdCb3VuZHMoW3NvdXRoLCB3ZXN0XSwgW25vcnRoLCBlYXN0XSk7XHJcbn1cclxuXHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBOYm5UZWNoTWFwIHtcclxuXHJcbiAgICBwcml2YXRlIE1BWF9VTkZFVENIRURfQk9YRVMgPSAxMDA7XHJcblxyXG4gICAgcHJpdmF0ZSBsb2dnZXIgPSBuZXcgTG9nZ2VyKCdOYm5UZWNoTWFwJyk7XHJcblxyXG4gICAgc3RhdGljIHJlYWRvbmx5IERFRkFVTFRfT1BUSU9OUzogUGFydGlhbDxOYm5UZWNoTWFwT3B0aW9ucz4gPSB7XHJcbiAgICAgICAgbWFwQ29udGFpbmVySWQ6ICdtYXAnLFxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQFByb3BlcnR5IHttYXB9IC0gTGVhZmxldCBtYXAgb2JqZWN0LlxyXG4gICAgICovXHJcbiAgICBwcml2YXRlIG1hcDogTC5NYXA7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAUHJvcGVydHkge21hcFRpbGVMYXllcn0gLSBMZWFmbGV0IG1hcCB0aWxlIGxheWVyLlxyXG4gICAgICovXHJcbiAgICBwcml2YXRlIG1hcFRpbGVMYXllcjogTC5UaWxlTGF5ZXI7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAUHJvcGVydHkge2FwaX0gLSBBUEkgb2JqZWN0LlxyXG4gICAgICovXHJcbiAgICBwcml2YXRlIGFwaTogSUFwaTtcclxuXHJcblxyXG4gICAgcHJpdmF0ZSBtYXBMb2NhdGU6IEwuQ29udHJvbC5Mb2NhdGU7XHJcbiAgICBwcml2YXRlIG1hcFNlYXJjaDogR2VvY29kZXI7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAUHJvcGVydHkge3BsYWNlU3RvcmV9IC0gUGxhY2Ugc3RvcmUgbmJuIHBsYWNlcy5cclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSBwbGFjZVN0b3JlOiBJUGxhY2VTdG9yZTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEBQcm9wZXJ0eSB7bWFya2VyTGF5ZXJ9IC0gTGF5ZXIgdG8gaG9sZCBtYXJrZXJzXHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgbWFya2VyTGF5ZXI6IElNYXJrZXJMYXllcjtcclxuXHJcbiAgICBwcml2YXRlIG1vZGVIYW5kbGVyOiBJTW9kZTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFxyXG4gICAgICogQHBhcmFtIHsqfSBvcHRpb25zIFxyXG4gICAgICovXHJcbiAgICBjb25zdHJ1Y3RvcihvcHRpb25zOiBOYm5UZWNoTWFwT3B0aW9ucykge1xyXG5cclxuICAgICAgICBvcHRpb25zID0geyAuLi5OYm5UZWNoTWFwLkRFRkFVTFRfT1BUSU9OUywgLi4ub3B0aW9ucyB9O1xyXG5cclxuICAgICAgICB0aGlzLmFwaSA9IG9wdGlvbnMuYXBpO1xyXG4gICAgICAgIHRoaXMucGxhY2VTdG9yZSA9IG9wdGlvbnMucGxhY2VzdG9yZTtcclxuICAgICAgICB0aGlzLm1vZGVIYW5kbGVyID0gb3B0aW9ucy5kZWZhdWx0TW9kZUhhbmRsZXI7XHJcblxyXG4gICAgICAgIC8vIENyZWF0ZSB0aGUgbWFwXHJcbiAgICAgICAgdGhpcy5tYXAgPSBMLm1hcChvcHRpb25zLm1hcENvbnRhaW5lcklkLCB7IHByZWZlckNhbnZhczogdHJ1ZSB9KTtcclxuXHJcbiAgICAgICAgLy8gU2V0IHVwIHRoZSBtYXJrZXIgbGF5ZXJcclxuICAgICAgICB0aGlzLm1hcmtlckxheWVyID0gbmV3IE1hcmtlckxheWVyQ2x1c3RlcihcclxuICAgICAgICAgICAgdGhpcy5tYXAsIHRoaXMubW9kZUhhbmRsZXIsIHRoaXMucGxhY2VTdG9yZVxyXG4gICAgICAgIClcclxuXHJcbiAgICAgICAgLy8gU2V0IHVwIHRoZSBPU00gbGF5ZXJcclxuICAgICAgICB0aGlzLm1hcFRpbGVMYXllciA9IEwudGlsZUxheWVyKCdodHRwczovL3tzfS5iYXNlbWFwcy5jYXJ0b2Nkbi5jb20vcmFzdGVydGlsZXMvdm95YWdlci97en0ve3h9L3t5fXtyfS5wbmcnLCB7XHJcbiAgICAgICAgICAgIGF0dHJpYnV0aW9uOiAnJmNvcHk7IDxhIGhyZWY9XCJodHRwczovL3d3dy5vcGVuc3RyZWV0bWFwLm9yZy9jb3B5cmlnaHRcIj5PcGVuU3RyZWV0TWFwPC9hPiBjb250cmlidXRvcnMgJmNvcHk7IDxhIGhyZWY9XCJodHRwczovL2NhcnRvLmNvbS9hdHRyaWJ1dGlvbnNcIj5DQVJUTzwvYT4nLFxyXG4gICAgICAgICAgICBzdWJkb21haW5zOiAnYWJjZCcsXHJcbiAgICAgICAgICAgIGNyb3NzT3JpZ2luOiB0cnVlLFxyXG4gICAgICAgICAgICBtaW5ab29tOiA1LFxyXG4gICAgICAgICAgICBtYXhab29tOiAyMFxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICAvLyBBZGQgdGhlIGxheWVyIHRvIHRoZSBtYXBcclxuICAgICAgICB0aGlzLm1hcFRpbGVMYXllci5hZGRUbyh0aGlzLm1hcCk7XHJcblxyXG4gICAgICAgIGNvbnNvbGUubG9nKHsgTCwgR2VvY29kZXIsIGdlb2NvZGVyIH0pO1xyXG5cclxuICAgICAgICAvLyBBZGQgZ2VvY29kZXIgY29udHJvbFxyXG4gICAgICAgIGNvbnN0IG1hcEdlb2NvZGVyID0gbmV3IGdlb2NvZGVycy5BcmNHaXMoe1xyXG4gICAgICAgICAgICBhcGlLZXk6ICdBQVBLYTk3YjhhNTM3NGRiNGZhOWIwZmRkOGU1NTM2MWNiYTRaOWZFdXczY2tBT0lGSEsxQ1BfVmJ6VHYzT1RlVXozZ2dyRkF6VlB6anluM1E3YlFGemJ3a0RNdkR4YUotSnpHJyxcclxuICAgICAgICAgICAgZ2VvY29kaW5nUXVlcnlQYXJhbXM6IHtcclxuICAgICAgICAgICAgICAgIGNvdW50cnlDb2RlOiAnQVUnLFxyXG4gICAgICAgICAgICAgICAgY2F0ZWdvcnk6ICdBZGRyZXNzLExhdExvbmcsTmVpZ2hib3Job29kLERpc3RyaWN0LENpdHksTWV0cm8gQXJlYScsXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzLm1hcFNlYXJjaCA9IChMLkNvbnRyb2wgYXMgdW5rbm93biBhcyB7IGdlb2NvZGVyOiB0eXBlb2YgZ2VvY29kZXIgfSkuZ2VvY29kZXIoe1xyXG4gICAgICAgICAgICBwb3NpdGlvbjogJ3RvcGxlZnQnLFxyXG4gICAgICAgICAgICBjb2xsYXBzZWQ6IHRydWUsXHJcbiAgICAgICAgICAgIGRlZmF1bHRNYXJrR2VvY29kZTogZmFsc2UsXHJcbiAgICAgICAgICAgIGdlb2NvZGVyOiBtYXBHZW9jb2RlcixcclxuICAgICAgICAgICAgc3VnZ2VzdE1pbkxlbmd0aDogNSxcclxuICAgICAgICAgICAgc3VnZ2VzdFRpbWVvdXQ6IDEwMDAsXHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHRoaXMubWFwU2VhcmNoLm9uKCdtYXJrZ2VvY29kZScsIChldmVudDogYW55KSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IGJib3ggPSBldmVudC5nZW9jb2RlLmJib3g7XHJcbiAgICAgICAgICAgIHRoaXMubWFwLmZpdEJvdW5kcyhiYm94LCB7XHJcbiAgICAgICAgICAgICAgICAnbWF4Wm9vbSc6IDE2LFxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgdGhpcy5tYXBTZWFyY2guYWRkVG8odGhpcy5tYXApO1xyXG5cclxuXHJcbiAgICAgICAgLy8gQWRkIGxvY2F0ZSBjb250cm9sXHJcbiAgICAgICAgdGhpcy5tYXBMb2NhdGUgPSBMLmNvbnRyb2wubG9jYXRlKHtcclxuICAgICAgICAgICAgcG9zaXRpb246ICd0b3BsZWZ0JyxcclxuICAgICAgICAgICAgbG9jYXRlT3B0aW9uczoge1xyXG4gICAgICAgICAgICAgICAgbWF4Wm9vbTogMTZcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgc2V0VmlldzogJ3VudGlsUGFuJyxcclxuICAgICAgICAgICAga2VlcEN1cnJlbnRab29tTGV2ZWw6IHRydWUsXHJcbiAgICAgICAgICAgIGluaXRpYWxab29tTGV2ZWw6IDE3LFxyXG4gICAgICAgICAgICBjYWNoZUxvY2F0aW9uOiB0cnVlLFxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRoaXMubWFwTG9jYXRlLmFkZFRvKHRoaXMubWFwKTtcclxuICAgICAgICB0aGlzLm1hcC5vbignbG9jYXRlYWN0aXZhdGUnLCAoKSA9PiB7IGxvY2FsU3RvcmFnZS5zZXRJdGVtKCdnZW9sb2NhdGUnLCAnMScpOyB9KTtcclxuICAgICAgICB0aGlzLm1hcC5vbignbG9jYXRlZGVhY3RpdmF0ZScsICgpID0+IHsgbG9jYWxTdG9yYWdlLnJlbW92ZUl0ZW0oJ2dlb2xvY2F0ZScpOyB9KTtcclxuXHJcbiAgICAgICAgdGhpcy5zZXRJbml0aWFsTWFwVmlldygpO1xyXG4gICAgICAgIFxyXG4gICAgICAgIC8vIHN0b3JlIG1hcCBwb3NpdGlvbiB3aGVuIG1vdmVkIG9yIHpvb21lZFxyXG4gICAgICAgIHRoaXMubWFwLm9uKCdtb3ZlZW5kJywgYXN5bmMgKCkgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCBjZW50ZXIgPSB0aGlzLm1hcC5nZXRDZW50ZXIoKTtcclxuICAgICAgICAgICAgY29uc3Qgem9vbSA9IHRoaXMubWFwLmdldFpvb20oKTtcclxuICAgICAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ3N0YXJ0cG9zJywgSlNPTi5zdHJpbmdpZnkoeyBsYXQ6IGNlbnRlci5sYXQsIGxuZzogY2VudGVyLmxuZywgem9vbSB9KSk7XHJcbiAgICAgICAgICAgIHRoaXMucHVzaEJyb3dzZXJIaXN0b3J5KCk7XHJcblxyXG4gICAgICAgICAgICBpZiAobWFwR2VvY29kZXIub3B0aW9ucy5nZW9jb2RpbmdRdWVyeVBhcmFtcykge1xyXG4gICAgICAgICAgICAgICAgbWFwR2VvY29kZXIub3B0aW9ucy5nZW9jb2RpbmdRdWVyeVBhcmFtcy5sb2NhdGlvbiA9IGAke2NlbnRlci5sbmd9LCR7Y2VudGVyLmxhdH1gO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvL2F3YWl0IHRoaXMuZGlzcGxheU1hcmtlcnNJbkN1cnJlbnRWaWV3KCk7XHJcbiAgICAgICAgICAgIHRoaXMuZmV0Y2hEYXRhRm9yQ3VycmVudFZpZXcoKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgdGhpcy5mZXRjaERhdGFGb3JDdXJyZW50VmlldygpO1xyXG5cclxuICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncG9wc3RhdGUnLCAoKSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IHVybFBhcmFtcyA9IG5ldyBVUkxTZWFyY2hQYXJhbXMod2luZG93LmxvY2F0aW9uLnNlYXJjaCk7XHJcbiAgICAgICAgICAgIGNvbnN0IGxhdCA9IHVybFBhcmFtcy5nZXQoJ2xhdCcpO1xyXG4gICAgICAgICAgICBjb25zdCBsbmcgPSB1cmxQYXJhbXMuZ2V0KCdsbmcnKTtcclxuICAgICAgICAgICAgY29uc3Qgem9vbSA9IHVybFBhcmFtcy5nZXQoJ3pvb20nKTtcclxuICAgICAgICAgICAgaWYgKGxhdCAmJiBsbmcgJiYgem9vbSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5tYXAuc2V0VmlldyhbIE51bWJlcihsYXQpLCBOdW1iZXIobG5nKSBdLCBwYXJzZUludCh6b29tKSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmluaXRpYWxWaWV3U2V0ID0gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIFxyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgcHVzaEJyb3dzZXJIaXN0b3J5KCkge1xyXG5cclxuICAgICAgICAvLyBVcGRhdGUgZXhpc3RpbmcgVVJMIHdpdGggbGF0LGxuZyx6b29tXHJcbiAgICAgICAgY29uc3QgY2VudGVyID0gdGhpcy5tYXAuZ2V0Q2VudGVyKCk7XHJcbiAgICAgICAgY29uc3Qgem9vbSA9IHRoaXMubWFwLmdldFpvb20oKTtcclxuXHJcbiAgICAgICAgY29uc3QgdXJsUGFyYW1zID0gbmV3IFVSTFNlYXJjaFBhcmFtcyh3aW5kb3cubG9jYXRpb24uc2VhcmNoKTtcclxuICAgICAgICB1cmxQYXJhbXMuc2V0KCdsYXQnLCBjZW50ZXIubGF0LnRvU3RyaW5nKCkpO1xyXG4gICAgICAgIHVybFBhcmFtcy5zZXQoJ2xuZycsIGNlbnRlci5sbmcudG9TdHJpbmcoKSk7XHJcbiAgICAgICAgdXJsUGFyYW1zLnNldCgnem9vbScsIHpvb20udG9TdHJpbmcoKSk7XHJcbiAgICAgICAgY29uc3QgbmV3VXJsID0gd2luZG93LmxvY2F0aW9uLnBhdGhuYW1lICsgJz8nICsgdXJsUGFyYW1zLnRvU3RyaW5nKCk7XHJcblxyXG4gICAgICAgIHdpbmRvdy5oaXN0b3J5LnB1c2hTdGF0ZSh7fSwgJycsIG5ld1VybCk7XHJcbiAgICAgICAgXHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBnZXRTdGFydFBvcygpIDogeyBsYXQ6IG51bWJlciwgbG5nOiBudW1iZXIsIHpvb206IG51bWJlciB9IHwgbnVsbCB7XHJcbiAgICAgICAgY29uc3Qgc3RhcnRQb3NTdHJpbmcgPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgnc3RhcnRwb3MnKTtcclxuICAgICAgICBpZiAoIXN0YXJ0UG9zU3RyaW5nKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICByZXR1cm4gSlNPTi5wYXJzZShzdGFydFBvc1N0cmluZykgYXMgeyBsYXQ6IG51bWJlciwgbG5nOiBudW1iZXIsIHpvb206IG51bWJlciB9O1xyXG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIGluaXRpYWxWaWV3U2V0ID0gZmFsc2U7XHJcbiAgICBwcml2YXRlIHNldEluaXRpYWxNYXBWaWV3KCkge1xyXG5cclxuICAgICAgICBjb25zdCBsb2dnZXIgPSB0aGlzLmxvZ2dlci5zdWIoJ3NldEluaXRpYWxNYXBWaWV3Jyk7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLmluaXRpYWxWaWV3U2V0KSB7XHJcbiAgICAgICAgICAgIGxvZ2dlci53YXJuKCdJbml0aWFsIG1hcCB2aWV3IGFscmVhZHkgc2V0Jyk7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIElmIGxhdCxsbmcsem9vbSBhcmUgaW4gVVJMLCBzZXQgbWFwIHRvIHRoYXRcclxuICAgICAgICBjb25zdCB1cmxQYXJhbXMgPSBuZXcgVVJMU2VhcmNoUGFyYW1zKHdpbmRvdy5sb2NhdGlvbi5zZWFyY2gpO1xyXG4gICAgICAgIGNvbnN0IGxhdCA9IHVybFBhcmFtcy5nZXQoJ2xhdCcpO1xyXG4gICAgICAgIGNvbnN0IGxuZyA9IHVybFBhcmFtcy5nZXQoJ2xuZycpO1xyXG4gICAgICAgIGNvbnN0IHpvb20gPSB1cmxQYXJhbXMuZ2V0KCd6b29tJyk7XHJcbiAgICAgICAgaWYgKGxhdCAmJiBsbmcgJiYgem9vbSkge1xyXG4gICAgICAgICAgICB0aGlzLm1hcC5zZXRWaWV3KFsgTnVtYmVyKGxhdCksIE51bWJlcihsbmcpIF0sIHBhcnNlSW50KHpvb20pKTtcclxuICAgICAgICAgICAgdGhpcy5pbml0aWFsVmlld1NldCA9IHRydWU7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IGdlb0ZsYWcgPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgnZ2VvbG9jYXRlJyk7XHJcbiAgICAgICAgY29uc3Qgc3RhcnRQb3MgPSB0aGlzLmdldFN0YXJ0UG9zKCk7XHJcblxyXG4gICAgICAgIC8vIElmIGxvY2FsIHN0b3JhZ2UgY29udGFpbnMgbGFzdCBtYXAgcG9zaXRpb24sIHNldCBtYXAgdG8gdGhhdFxyXG4gICAgICAgIGlmIChzdGFydFBvcykge1xyXG4gICAgICAgICAgICB0aGlzLm1hcC5zZXRWaWV3KFsgc3RhcnRQb3MubGF0LCBzdGFydFBvcy5sbmcgXSwgc3RhcnRQb3Muem9vbSk7XHJcbiAgICAgICAgICAgIHRoaXMuaW5pdGlhbFZpZXdTZXQgPSB0cnVlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gU2V0IHRvIEF1c3RyYWxpYSBpZiBubyBzdGFydCBwb3NpdGlvblxyXG4gICAgICAgIGlmICghc3RhcnRQb3MpIHtcclxuICAgICAgICAgICAgdGhpcy5tYXAuc2V0VmlldyhbIC0yNi4xNzcyMjg4LCAxMzMuNDE3MDExOSBdLCAxMCk7XHJcbiAgICAgICAgICAgIHRoaXMuaW5pdGlhbFZpZXdTZXQgPSB0cnVlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gSWYgbG9jYWwgc3RvcmFnZSBjb250YWlucyBnZW9sb2NhdGUgZmxhZ1xyXG4gICAgICAgIC8vIG9yLCBpZiBubyBzdGFydCBwb3NpdGlvbiwgc3RhcnQgZ2VvbG9jYXRpb25cclxuICAgICAgICBpZiAoZ2VvRmxhZyB8fCAhc3RhcnRQb3MpIHtcclxuICAgICAgICAgICAgdGhpcy5tYXBMb2NhdGUuc3RhcnQoKTtcclxuICAgICAgICAgICAgdGhpcy5tYXAuc2V0Wm9vbSgxNyk7XHJcbiAgICAgICAgICAgIHRoaXMuaW5pdGlhbFZpZXdTZXQgPSB0cnVlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKCF0aGlzLmluaXRpYWxWaWV3U2V0KSB7XHJcbiAgICAgICAgICAgIGxvZ2dlci5lcnJvcignQ291bGQgbm90IHNldCBpbml0aWFsIG1hcCB2aWV3Jyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgIH1cclxuXHJcbiAgICBnZXRCb3hlc0luQm91bmRzKGJvdW5kczogTC5MYXRMbmdCb3VuZHMpOiBMLkxhdExuZ0JvdW5kc1tdIHtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgLy8gU3RhcnRpbmcgcG9pbnQgc2hvdWxkIGJlIHRoZSBub3J0aC13ZXN0IGNvcm5lciBvZiB0aGUgbWFwIHJvdW5kZWQgYmV5b25kIHRoZSBtYXAgYm91bmRzXHJcbiAgICAgICAgLy8gTGF0aXR1ZGUgaXMgcm91bmRlZCB0byAyIGRlY2ltYWwgcGxhY2VzIG11bHRpcGxlIG9mIDAuMDJcclxuICAgICAgICAvLyBMb25naXR1ZGUgaXMgcm91bmRlZCB0byAyIGRlY2ltYWwgcGxhY2VzIG11bHRpcGxlIG9mIDAuMDRcclxuICAgICAgICBjb25zdCBub3J0aG1vc3QgPSBNYXRoLmNlaWwoYm91bmRzLmdldE5vcnRoKCkgKiA1MCkgLyA1MDtcclxuICAgICAgICBjb25zdCB3ZXN0bW1vc3QgPSBNYXRoLmZsb29yKGJvdW5kcy5nZXRXZXN0KCkgKiAyNSkgLyAyNTtcclxuXHJcbiAgICAgICAgLy8gc3BsaXQgbWFwIGludG8gYm94ZXMgc3RhcnRpbmcgZnJvbSBub3J0aC13ZXN0IGNvcm5lclxyXG4gICAgICAgIC8vIGVhY2ggYm94IHNob3VsZCBiZSAwLjAyIGRlZ3JlZXMgbGF0aXR1ZGUgYnkgMC4wNCBkZWdyZWVzIGxvbmdpdHVkZVxyXG4gICAgICAgIGNvbnN0IGJveGVzID0gW107XHJcbiAgICAgICAgZm9yIChsZXQgbGF0aXR1ZGUgPSBub3J0aG1vc3Q7IGxhdGl0dWRlID4gYm91bmRzLmdldFNvdXRoKCk7IGxhdGl0dWRlIC09IDAuMDIpIHtcclxuICAgICAgICAgICAgZm9yIChsZXQgbG9uZ2l0dWRlID0gd2VzdG1tb3N0OyBsb25naXR1ZGUgPCBib3VuZHMuZ2V0RWFzdCgpOyBsb25naXR1ZGUgKz0gMC4wNCkge1xyXG4gICAgICAgICAgICAgICAgYm94ZXMucHVzaChbbGF0aXR1ZGUsIGxvbmdpdHVkZV0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBNYXAgZWFjaCBib3ggaW50byBhIGJvdW5kcyBvYmplY3RcclxuICAgICAgICBjb25zdCBib3hCb3VuZHMgPSBib3hlcy5tYXAoYm94ID0+IHtcclxuICAgICAgICAgICAgY29uc3Qgbm9ydGggPSBib3hbMF07XHJcbiAgICAgICAgICAgIGNvbnN0IHdlc3QgPSBib3hbMV07XHJcbiAgICAgICAgICAgIGNvbnN0IHNvdXRoID0gbm9ydGggLSAwLjAyO1xyXG4gICAgICAgICAgICBjb25zdCBlYXN0ID0gd2VzdCArIDAuMDQ7XHJcbiAgICAgICAgICAgIHJldHVybiBMLmxhdExuZ0JvdW5kcyhbc291dGgsIHdlc3RdLCBbbm9ydGgsIGVhc3RdKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgcmV0dXJuIGJveEJvdW5kcztcclxuXHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBGZXRjaCBib3hlcyB0aGF0IGFyZSB2aXNpYmxlIG9uIHRoZSBtYXBcclxuICAgICAqL1xyXG4gICAgZ2V0Q3VycmVudFZpZXdCb3hlcygpOiBMLkxhdExuZ0JvdW5kc1tdXHJcbiAgICB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0Qm94ZXNJbkJvdW5kcyh0aGlzLm1hcC5nZXRCb3VuZHMoKSk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBIaWRlIG1hcmtlcnMgdGhhdCBhcmUgb3V0c2lkZSB0aGUgbWFwIGJvdW5kc1xyXG4gICAgICovXHJcbiAgICBoaWRlTWFya2Vyc091dHNpZGVDdXJyZW50VmlldygpIHtcclxuICAgICAgICBjb25zdCBtYXBCb3VuZHMgPSB0aGlzLm1hcC5nZXRCb3VuZHMoKS5wYWQoMC41KTtcclxuICAgICAgICB0aGlzLm1hcmtlckxheWVyLnJlbW92ZU1hcmtlcnNPdXRzaWRlQm91bmRzKG1hcEJvdW5kcyk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBEaXNwbGF5IG1hcmtlcnMgdGhhdCBhcmUgaW5zaWRlIHRoZSBtYXAgYm91bmRzXHJcbiAgICAgKi9cclxuICAgIGFzeW5jIERFUF9kaXNwbGF5TWFya2Vyc0luQ3VycmVudFZpZXcoYXR0ZW1wdDogbnVtYmVyID0gMSkge1xyXG5cclxuICAgICAgICAvKlxyXG4gICAgICAgIGlmICh0aGlzLmRhdGFzdG9yZS5pc1JlYWR5KCkgPT09IGZhbHNlKSB7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBpZiAoYXR0ZW1wdCA+IDEwKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKCdDb3VsZCBub3QgZ2V0IGRhdGFzdG9yZSByZWFkeS4gR2l2aW5nIHVwLicpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBjb25zb2xlLndhcm4oJ0RhdGFzdG9yZSBpcyBub3QgcmVhZHkuIERlbGF5aW5nIGRpc3BsYXlNYXJrZXJzSW5DdXJyZW50VmlldygpJyk7XHJcbiAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4gdGhpcy5kaXNwbGF5TWFya2Vyc0luQ3VycmVudFZpZXcoYXR0ZW1wdCsxKSwgMTAwMCk7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnNvbGUubG9nKCdEaXNwbGF5aW5nIG1hcmtlcnMgaW4gY3VycmVudCB2aWV3Jyk7XHJcbiAgICAgICAgY29uc3QgbWFwQm91bmRzID0gcm91bmRCb3VuZHModGhpcy5tYXAuZ2V0Qm91bmRzKCkpO1xyXG4gICAgICAgIFxyXG4gICAgICAgIGNvbnNvbGUubG9nKCdGZXRjaGluZyBmcm9tIERhdGFzdG9yZScsIG1hcEJvdW5kcyk7XHJcbiAgICAgICAgLy8gdGhpcy5yZWZyZXNoUG9pbnRzRnJvbVN0b3JlKG1hcEJvdW5kcyk7XHJcbiAgICAgICAgKi9cclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIHpvb21Jbldhcm5pbmdDb250cm9sPzogTC5Db250cm9sO1xyXG5cclxuICAgIHNob3dab29tSW5XYXJuaW5nKCkge1xyXG4gICAgICAgIGlmKCF0aGlzLnpvb21Jbldhcm5pbmdDb250cm9sKSB7XHJcbiAgICAgICAgICAgIHRoaXMuem9vbUluV2FybmluZ0NvbnRyb2wgPSBuZXcgTC5Db250cm9sKHsgcG9zaXRpb246ICd0b3ByaWdodCcgfSk7XHJcbiAgICAgICAgICAgIHRoaXMuem9vbUluV2FybmluZ0NvbnRyb2wub25BZGQgPSAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBkaXYgPSBMLkRvbVV0aWwuY3JlYXRlKCdkaXYnLCAnaW5mbyBsZWdlbmQnKTtcclxuICAgICAgICAgICAgICAgIGRpdi5pbm5lckhUTUwgPSAnPGg0IHN0eWxlPVwibWFyZ2luOjBcIj5BcmVhIFRvbyBCaWchPC9oND4nO1xyXG4gICAgICAgICAgICAgICAgZGl2LmlubmVySFRNTCArPSAnPHAgc3R5bGU9XCJtYXJnaW46MFwiPkxvY2F0aW9uIGxvYWRpbmcgaXMgcGF1c2VkIHVudGlsIHlvdSB6b29tIGluLjwvcD4nO1xyXG4gICAgICAgICAgICAgICAgZGl2LnN0eWxlLmJhY2tncm91bmRDb2xvciA9ICcjZmY5ODAwJztcclxuICAgICAgICAgICAgICAgIGRpdi5zdHlsZS5vcGFjaXR5ID0gJzAuOCc7XHJcbiAgICAgICAgICAgICAgICBkaXYuc3R5bGUucGFkZGluZyA9ICcxMHB4IDIwcHgnO1xyXG4gICAgICAgICAgICAgICAgZGl2LnN0eWxlLmNvbG9yID0gJyNmZmZmZmYnO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGRpdjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCB6b29tSW5XYXJuaW5nQ29udHJvbCA9IHRoaXMuem9vbUluV2FybmluZ0NvbnRyb2w7XHJcbiAgICAgICAgc2V0VGltZW91dCgoKSA9PiB0aGlzLm1hcC5hZGRDb250cm9sKHpvb21Jbldhcm5pbmdDb250cm9sKSwgMTAwMCk7XHJcbiAgICB9XHJcbiAgICBoaWRlWm9vbUluV2FybmluZygpIHtcclxuICAgICAgICBpZiAodGhpcy56b29tSW5XYXJuaW5nQ29udHJvbCkge1xyXG4gICAgICAgICAgICB0aGlzLm1hcC5yZW1vdmVDb250cm9sKHRoaXMuem9vbUluV2FybmluZ0NvbnRyb2wpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIGZldGNoZWRCb3hlczogU2V0PHN0cmluZz4gPSBuZXcgU2V0KCk7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBGZXRjaCBkYXRhIGZvciBjdXJyZW50IG1hcCB2aWV3XHJcbiAgICAgKi9cclxuICAgIGFzeW5jIGZldGNoRGF0YUZvckN1cnJlbnRWaWV3KCkge1xyXG5cclxuICAgICAgICBjb25zdCBsb2dnZXIgPSB0aGlzLmxvZ2dlci5zdWIoJ2ZldGNoRGF0YUZvckN1cnJlbnRWaWV3Jyk7XHJcblxyXG4gICAgICAgIC8vdGhpcy5oaWRlTWFya2Vyc091dHNpZGVDdXJyZW50VmlldygpO1xyXG4gICAgICAgIC8vdGhpcy5kaXNwbGF5TWFya2Vyc0luQ3VycmVudFZpZXcoKTtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMubWFwLmdldFpvb20oKSA8IDExKSB7XHJcbiAgICAgICAgICAgIGxvZ2dlci53YXJuKCdab29tIGxldmVsIHRvbyBsb3cuIFNraXBwaW5nLicpO1xyXG4gICAgICAgICAgICB0aGlzLnNob3dab29tSW5XYXJuaW5nKCk7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIEdldCBib3hlcyB0aGF0IGFyZSBjdXJyZW50bHkgdmlzaWJsZVxyXG4gICAgICAgIGNvbnN0IGJveGVzID0gdGhpcy5nZXRDdXJyZW50Vmlld0JveGVzKCk7XHJcbiAgICAgICAgbG9nZ2VyLmRlYnVnKCdDdXJyZW50IHZpZXcgYm94ZXMnLCBib3hlcyk7XHJcblxyXG4gICAgICAgIC8vIEZpbHRlciBvdXQgYm94ZXMgdGhhdCBoYXZlIGFscmVhZHkgYmVlbiBmZXRjaGVkXHJcbiAgICAgICAgY29uc3QgdW5mZXRjaGVkQm94ZXMgPSBib3hlcy5maWx0ZXIoYm94ID0+ICF0aGlzLmZldGNoZWRCb3hlcy5oYXMoYm94LmdldENlbnRlcigpLnRvU3RyaW5nKCkpKTtcclxuXHJcbiAgICAgICAgLy8gSWYgbm8gYm94ZXMgdG8gZmV0Y2gsIHJldHVyblxyXG4gICAgICAgIGlmICh1bmZldGNoZWRCb3hlcy5sZW5ndGggPT0gMCkge1xyXG4gICAgICAgICAgICB0aGlzLmhpZGVab29tSW5XYXJuaW5nKCk7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIERvbid0IGZldGNoIGJveGVzIGlmIG1vcmUgdGhhbiA1MFxyXG4gICAgICAgIGlmICh1bmZldGNoZWRCb3hlcy5sZW5ndGggPiB0aGlzLk1BWF9VTkZFVENIRURfQk9YRVMpIHtcclxuICAgICAgICAgICAgbG9nZ2VyLndhcm4oJ1RvbyBtYW55IGJveGVzIHRvIGZldGNoLiBTa2lwcGluZy4nKTtcclxuICAgICAgICAgICAgdGhpcy5zaG93Wm9vbUluV2FybmluZygpO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBIaWRlIHpvb20gaW4gd2FybmluZ1xyXG4gICAgICAgIHRoaXMuaGlkZVpvb21Jbldhcm5pbmcoKTtcclxuXHJcbiAgICAgICAgLy8gU2V0IHVwZGF0ZSBrZXlcclxuICAgICAgICBjb25zdCB1cGRhdGVLZXkgPSB0aGlzLm1hcC5nZXRDZW50ZXIoKS50b1N0cmluZygpICsgdGhpcy5tYXAuZ2V0Wm9vbSgpO1xyXG5cclxuICAgICAgICAvLyBDcmVhdGUgcHJvZ3Jlc3MgaXRlbVxyXG4gICAgICAgIGNvbnN0IHByb2dyZXNzSXRlbSA9IHRoaXMuY3JlYXRlUHJvZ3Jlc3ModXBkYXRlS2V5LCB1bmZldGNoZWRCb3hlcy5sZW5ndGgsICdGZXRjaGluZyBzZWN0aW9ucy4uLicpO1xyXG4gICAgICAgIHRoaXMucmVuZGVyUHJvZ3Jlc3MoKTtcclxuXHJcbiAgICAgICAgbGV0IGJveGVzUHJvY2Vzc2VkID0gMDtcclxuXHJcbiAgICAgICAgLy8gRm9yIGVhY2ggYm94LCBmZXRjaCBkYXRhXHJcbiAgICAgICAgZm9yIChjb25zdCBib3ggb2YgdW5mZXRjaGVkQm94ZXMpIHtcclxuXHJcbiAgICAgICAgICAgIGlmICh0aGlzLm1hcC5nZXRDZW50ZXIoKS50b1N0cmluZygpICsgdGhpcy5tYXAuZ2V0Wm9vbSgpICE9IHVwZGF0ZUtleSkge1xyXG4gICAgICAgICAgICAgICAgbG9nZ2VyLmRlYnVnKCdNYXAgbW92ZWQuIEZldGNoIHN0b3BwZWQuJyk7XHJcbiAgICAgICAgICAgICAgICBwcm9ncmVzc0l0ZW0udGV4dCA9ICdNYXAgbW92ZWQuIEZldGNoIHN0b3BwZWQuJztcclxuICAgICAgICAgICAgICAgIHRoaXMudXBkYXRlUHJvZ3Jlc3ModXBkYXRlS2V5LCBib3hlc1Byb2Nlc3NlZCwgdHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGF3YWl0IHRoaXMuZmV0Y2hEYXRhKGJveCk7XHJcbiAgICAgICAgICAgIHRoaXMuZmV0Y2hlZEJveGVzLmFkZChib3guZ2V0Q2VudGVyKCkudG9TdHJpbmcoKSk7XHJcbiAgICAgICAgICAgIGJveGVzUHJvY2Vzc2VkKys7XHJcbiAgICAgICAgICAgIHRoaXMudXBkYXRlUHJvZ3Jlc3ModXBkYXRlS2V5LCBib3hlc1Byb2Nlc3NlZCwgZmFsc2UpO1xyXG5cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMudXBkYXRlUHJvZ3Jlc3ModXBkYXRlS2V5LCBib3hlc1Byb2Nlc3NlZCwgdHJ1ZSk7XHJcbiAgICAgICAgbG9nZ2VyLmRlYnVnKCdBbGwgYm94ZXMgZmV0Y2hlZCcpO1xyXG5cclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIHByb2dyZXNzQ29udHJvbCA9IG5ldyBMLkNvbnRyb2woeyBwb3NpdGlvbjogJ2JvdHRvbWxlZnQnIH0pO1xyXG4gICAgcHJpdmF0ZSBwcm9ncmVzc0l0ZW1zOiB7XHJcbiAgICAgICAgW2tleTogc3RyaW5nXToge1xyXG4gICAgICAgICAgICBzdGFydGVkOiBEYXRlLFxyXG4gICAgICAgICAgICBmaW5pc2hlZD86IERhdGUsXHJcbiAgICAgICAgICAgIHRleHQ6IHN0cmluZyxcclxuICAgICAgICAgICAgY29tcGxldGU6IGJvb2xlYW4sXHJcbiAgICAgICAgICAgIHByb2dyZXNzOiBudW1iZXIsXHJcbiAgICAgICAgICAgIHRvdGFsOiBudW1iZXIsXHJcbiAgICAgICAgfVxyXG4gICAgfSA9IHt9O1xyXG5cclxuICAgIHByaXZhdGUgY3JlYXRlUHJvZ3Jlc3Moa2V5OiBzdHJpbmcsIHRvdGFsOiBudW1iZXIsIHRleHQ6IHN0cmluZykge1xyXG4gICAgICAgIC8vIENyZWF0ZSBuZXcgaXRlbVxyXG4gICAgICAgIHRoaXMucHJvZ3Jlc3NJdGVtc1trZXldID0ge1xyXG4gICAgICAgICAgICBzdGFydGVkOiBuZXcgRGF0ZSgpLFxyXG4gICAgICAgICAgICBmaW5pc2hlZDogdW5kZWZpbmVkLFxyXG4gICAgICAgICAgICBjb21wbGV0ZTogZmFsc2UsXHJcbiAgICAgICAgICAgIHByb2dyZXNzOiAwLFxyXG4gICAgICAgICAgICB0b3RhbCwgdGV4dFxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdGhpcy5wcm9ncmVzc0l0ZW1zW2tleV07XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSB1cGRhdGVQcm9ncmVzcyhrZXk6IHN0cmluZywgcHJvZ3Jlc3M6IG51bWJlciwgY29tcGxldGU6IGJvb2xlYW4pIHtcclxuICAgICAgICBpZiAoIXRoaXMucHJvZ3Jlc3NJdGVtc1trZXldKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgUHJvZ3Jlc3MgaXRlbSB3aXRoIGtleSAke2tleX0gZG9lcyBub3QgZXhpc3RgKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5wcm9ncmVzc0l0ZW1zW2tleV0uZmluaXNoZWQgPSBjb21wbGV0ZSA/IG5ldyBEYXRlKCkgOiB1bmRlZmluZWQ7XHJcbiAgICAgICAgdGhpcy5wcm9ncmVzc0l0ZW1zW2tleV0uY29tcGxldGUgPSBjb21wbGV0ZTtcclxuICAgICAgICB0aGlzLnByb2dyZXNzSXRlbXNba2V5XS5wcm9ncmVzcyA9IHByb2dyZXNzO1xyXG4gICAgICAgIHRoaXMucmVuZGVyUHJvZ3Jlc3MoKTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIHJlbmRlclByb2dyZXNzKCkge1xyXG5cclxuICAgICAgICAvLyBEZWxldGUgaXRlbXMgZmluaXNoZWQgbW9yZSB0aGFuIDUgc2Vjb25kcyBhZ29cclxuICAgICAgICBjb25zdCBub3cgPSBuZXcgRGF0ZSgpO1xyXG4gICAgICAgIGNvbnN0IGtleXMgPSBPYmplY3Qua2V5cyh0aGlzLnByb2dyZXNzSXRlbXMpO1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBjb25zdCBrZXkgPSBrZXlzW2ldO1xyXG4gICAgICAgICAgICBpZiAoIXRoaXMucHJvZ3Jlc3NJdGVtc1trZXldKSBjb250aW51ZTtcclxuICAgICAgICAgICAgY29uc3QgZmluaXNoZWQgPSB0aGlzLnByb2dyZXNzSXRlbXNba2V5XS5maW5pc2hlZDtcclxuICAgICAgICAgICAgaWYgKGZpbmlzaGVkKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoKG5vdy5nZXRUaW1lKCkgLSBmaW5pc2hlZC5nZXRUaW1lKCkpID4gNTAwMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGRlbGV0ZSB0aGlzLnByb2dyZXNzSXRlbXNba2V5XTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gSWYgbm8gaXRlbXMsIGhpZGUgcHJvZ3Jlc3NcclxuICAgICAgICBpZiAoT2JqZWN0LmtleXModGhpcy5wcm9ncmVzc0l0ZW1zKS5sZW5ndGggPT0gMCkge1xyXG4gICAgICAgICAgICB0aGlzLmhpZGVQcm9ncmVzcygpO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBSZW5kZXIgcHJvZ3Jlc3NcclxuICAgICAgICB0aGlzLnByb2dyZXNzQ29udHJvbC5vbkFkZCA9ICgpID0+IHtcclxuICAgICAgICAgICAgY29uc3QgZGl2ID0gTC5Eb21VdGlsLmNyZWF0ZSgnZGl2JywgJ2luZm8gbGVnZW5kJyk7XHJcbiAgICAgICAgICAgIGRpdi5pbm5lckhUTUwgPSAnPGg0IHN0eWxlPVwibWFyZ2luOjBcIj5Mb2FkaW5nLi4uPC9oND4nO1xyXG4gICAgICAgICAgICBjb25zdCBpdGVtcyA9IE9iamVjdC52YWx1ZXModGhpcy5wcm9ncmVzc0l0ZW1zKTtcclxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBpdGVtcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgaXRlbSA9IGl0ZW1zW2ldO1xyXG4gICAgICAgICAgICAgICAgLy8gc2tpcCBpdGVtIGlmIGZpbmlzaGVkIG1vcmUgdGhhbiAxMCBzZWNvbmRzIGFnb1xyXG4gICAgICAgICAgICAgICAgaWYgKGl0ZW0uZmluaXNoZWQgJiYgKG5ldyBEYXRlKCkuZ2V0VGltZSgpIC0gaXRlbS5maW5pc2hlZC5nZXRUaW1lKCkgPiAxMDAwMCkpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNvbnN0IHByb2dyZXNzID0gaXRlbS5wcm9ncmVzcyAvIGl0ZW0udG90YWwgKiAxMDA7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBwcm9ncmVzc1RleHQgPSBpdGVtLmNvbXBsZXRlID8gJ0NvbXBsZXRlJyA6IGAke2l0ZW0ucHJvZ3Jlc3N9IG9mICR7aXRlbS50b3RhbH1gO1xyXG4gICAgICAgICAgICAgICAgZGl2LmlubmVySFRNTCArPSBgPHAgc3R5bGU9XCJtYXJnaW46MFwiPiR7aXRlbS50ZXh0fSAoJHtwcm9ncmVzc1RleHR9KTwvcD5gO1xyXG4gICAgICAgICAgICAgICAgZGl2LmlubmVySFRNTCArPSBgPHByb2dyZXNzIHZhbHVlPVwiJHtwcm9ncmVzc31cIiBtYXg9XCIxMDBcIj48L3Byb2dyZXNzPmA7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZGl2LnN0eWxlLmJhY2tncm91bmRDb2xvciA9ICcjMDAwMDAwJztcclxuICAgICAgICAgICAgZGl2LnN0eWxlLm9wYWNpdHkgPSAnMC44JztcclxuICAgICAgICAgICAgZGl2LnN0eWxlLnBhZGRpbmcgPSAnMTBweCAyMHB4JztcclxuICAgICAgICAgICAgZGl2LnN0eWxlLmNvbG9yID0gJyNmZmZmZmYnO1xyXG4gICAgICAgICAgICByZXR1cm4gZGl2O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gQWRkIHByb2dyZXNzIHRvIG1hcFxyXG4gICAgICAgIHRoaXMubWFwLmFkZENvbnRyb2wodGhpcy5wcm9ncmVzc0NvbnRyb2wpO1xyXG5cclxuICAgICAgICAvLyBIaWRlIHByb2dyZXNzIGFmdGVyIDUgc2Vjb25kcyBpZiBhbGwgY29tcGxldGVcclxuICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgICAgICAgaWYgKE9iamVjdC52YWx1ZXModGhpcy5wcm9ncmVzc0l0ZW1zKS5ldmVyeShpdGVtID0+IGl0ZW0uY29tcGxldGUpKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmhpZGVQcm9ncmVzcygpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSwgNTAwMCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBoaWRlUHJvZ3Jlc3MoKSB7XHJcbiAgICAgICAgdGhpcy5tYXAucmVtb3ZlQ29udHJvbCh0aGlzLnByb2dyZXNzQ29udHJvbCk7XHJcbiAgICB9XHJcblxyXG4gICAgYXN5bmMgZmV0Y2hEYXRhKFxyXG4gICAgICAgIGJvdW5kczogTC5MYXRMbmdCb3VuZHMsIHBhZ2U6IG51bWJlciA9IDFcclxuICAgICkgOiBQcm9taXNlPHZvaWQ+XHJcbiAgICB7XHJcbiAgICAgICAgY29uc3QgbG9nZ2VyID0gdGhpcy5sb2dnZXIuc3ViKCdmZXRjaERhdGEnKTtcclxuXHJcbiAgICAgICAgbG9nZ2VyLmRlYnVnKCdGZXRjaGluZyBCb3gnLCBib3VuZHMuZ2V0Q2VudGVyKCkudG9TdHJpbmcoKSwgcGFnZSk7XHJcblxyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBjb25zdCBkYXRhID0gYXdhaXQgdGhpcy5hcGkuZmV0Y2hQYWdlKGJvdW5kcywgcGFnZSwgKCkgPT4gdGhpcy5tYXAuZ2V0Qm91bmRzKCkuaW50ZXJzZWN0cyhib3VuZHMpKTtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIHRoaXMucHJvY2Vzc0ZldGNoUmVzdWx0KGRhdGEsIGJvdW5kcyk7XHJcblxyXG4gICAgICAgICAgICBpZiAoZGF0YS5uZXh0UGFnZSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuZmV0Y2hEYXRhKGJvdW5kcywgZGF0YS5uZXh0UGFnZSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJldHVybjtcclxuXHJcbiAgICAgICAgfSBjYXRjaCAoZXJyb3I6IGFueSkge1xyXG4gICAgICAgICAgICBpZiAoZXJyb3IubWVzc2FnZSA9PSAnUGFnZSBhbHJlYWR5IGxvYWRlZCB0aGlzIHNlc3Npb24uJykge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyb3IpXHJcbiAgICAgICAgfVxyXG5cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFByb2Nlc3MgUmVzdWx0cyBGZXRjaGVkIGZyb20gQVBJXHJcbiAgICAgKiBTdG9yZXMgcGxhY2VzIGluIHBsYWNlIHN0b3JlXHJcbiAgICAgKiBTZW5kcyBwb2ludHMgdG8gbWFya2VyIGxheWVyXHJcbiAgICAgKiBAcGFyYW0gcmVzdWx0IFxyXG4gICAgICogQHBhcmFtIGJvdW5kcyBcclxuICAgICAqL1xyXG4gICAgcHJvY2Vzc0ZldGNoUmVzdWx0KHJlc3VsdDogTmJuUGxhY2VBcGlSZXNwb25zZSwgYm91bmRzOiBMLkxhdExuZ0JvdW5kcykge1xyXG5cclxuICAgICAgICBjb25zdCBsb2dnZXIgPSB0aGlzLmxvZ2dlci5zdWIoJ3Byb2Nlc3NGZXRjaFJlc3VsdCcpO1xyXG5cclxuICAgICAgICBsb2dnZXIuZGVidWcoJ1Byb2Nlc3NpbmcgRmV0Y2ggUmVzdWx0JywgcmVzdWx0LCBib3VuZHMpO1xyXG5cclxuICAgICAgICAvLyBTdG9yZSBwbGFjZXNcclxuICAgICAgICB0aGlzLnBsYWNlU3RvcmUuc3RvcmVQbGFjZXMocmVzdWx0LnBsYWNlcyk7XHJcblxyXG4gICAgICAgIC8vIENyZWF0ZSB0ZW1wIHN0b3JhZ2UgZm9yIHBvaW50c1xyXG4gICAgICAgIGNvbnN0IHBvaW50czogTWFwPHN0cmluZywgUG9pbnRBbmRMb2NpZHM+ID0gbmV3IE1hcCgpO1xyXG5cclxuICAgICAgICAvLyBBZGQgcGxhY2UgbG9jaWRzIHRvIHBvaW50c1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcmVzdWx0LnBsYWNlcy5sZW5ndGg7IGkrKykge1xyXG5cclxuICAgICAgICAgICAgY29uc3QgcGxhY2UgPSByZXN1bHQucGxhY2VzW2ldO1xyXG5cclxuICAgICAgICAgICAgaWYgKCF0aGlzLm1vZGVIYW5kbGVyLmZpbHRlcihwbGFjZSkpIHtcclxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBjb25zdCBsYXRMbmcgPSBgJHtwbGFjZS5sYXRpdHVkZX0sJHtwbGFjZS5sb25naXR1ZGV9YDtcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IHBsYWNlQ29sb3VyID0gdGhpcy5tb2RlSGFuZGxlci5wbGFjZUNvbG91cihwbGFjZSk7XHJcblxyXG4gICAgICAgICAgICAvLyBDcmVhdGUgcG9pbnQgaWYgbm90IGFscmVhZHkgdGhlcmVcclxuICAgICAgICAgICAgY29uc3QgZXhpc3RpbmdQb2ludCA9IHBvaW50cy5nZXQobGF0TG5nKTtcclxuICAgICAgICAgICAgaWYgKCFleGlzdGluZ1BvaW50KSB7XHJcbiAgICAgICAgICAgICAgICBwb2ludHMuc2V0KGxhdExuZywge1xyXG4gICAgICAgICAgICAgICAgICAgIGxhdDogcGxhY2UubGF0aXR1ZGUsXHJcbiAgICAgICAgICAgICAgICAgICAgbG5nOiBwbGFjZS5sb25naXR1ZGUsXHJcbiAgICAgICAgICAgICAgICAgICAgY29sOiBbIHBsYWNlQ29sb3VyIF0sXHJcbiAgICAgICAgICAgICAgICAgICAgYWRkOiBbIHBsYWNlLmFkZHJlc3MxIF0sXHJcbiAgICAgICAgICAgICAgICAgICAgaWRzOiBbIHBsYWNlLmlkIF0sXHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIC8vIEFkZCBsb2NpZCB0byBwb2ludCBpZiBub3QgYWxyZWFkeSB0aGVyZVxyXG4gICAgICAgICAgICAgICAgaWYgKCFleGlzdGluZ1BvaW50Lmlkcy5pbmNsdWRlcyhwbGFjZS5pZCkpIHtcclxuICAgICAgICAgICAgICAgICAgICBleGlzdGluZ1BvaW50Lmlkcy5wdXNoKHBsYWNlLmlkKTtcclxuICAgICAgICAgICAgICAgICAgICBleGlzdGluZ1BvaW50LmFkZC5wdXNoKHBsYWNlLmFkZHJlc3MxKTtcclxuICAgICAgICAgICAgICAgICAgICBleGlzdGluZ1BvaW50LmNvbC5wdXNoKHBsYWNlQ29sb3VyKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIFNlbmQgcG9pbnRzIHRvIG1hcmtlciBsYXllclxyXG4gICAgICAgIGxvZ2dlci5kZWJ1ZygnQWRkaW5nIHBvaW50cyB0byBtYXJrZXIgbGF5ZXInLCBwb2ludHMpO1xyXG4gICAgICAgIHRoaXMubWFya2VyTGF5ZXIuYWRkUG9pbnRzKHBvaW50cyk7XHJcblxyXG4gICAgfVxyXG5cclxuICAgIGFzeW5jIERFUFJfcmVmcmVzaFBvaW50c0Zyb21TdG9yZShib3VuZHM/OiBMLkxhdExuZ0JvdW5kcykge1xyXG5cclxuICAgICAgICBpZiAoIXRoaXMubWFya2VyTGF5ZXIpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdNYXJrZXIgTGF5ZXIgbm90IHNldCcpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gSWYgYm91bmRzIGFyZSBub3QgcGFzc2VkLCB1c2UgbWFwIGJvdW5kc1xyXG4gICAgICAgIGlmICghYm91bmRzKSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdCb3VuZHMgbm90IHBhc3NlZC4gVXNpbmcgbWFwIGJvdW5kcy4nKTtcclxuICAgICAgICAgICAgYm91bmRzID0gdGhpcy5tYXAuZ2V0Qm91bmRzKCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBib3VuZHMgPSByb3VuZEJvdW5kcyhib3VuZHMpO1xyXG4gICAgICAgIC8vdGhpcy5tYXJrZXJMYXllci5yZWZyZXNoTWFya2Vyc0luc2lkZUJvdW5kcyhib3VuZHMsIHRoaXMubWFya2VyRmlsdGVyKTtcclxuXHJcbiAgICAgICAgLypcclxuICAgICAgICAvLyBHZXQgdGhlIGJveGVzXHJcbiAgICAgICAgY29uc29sZS5sb2coJ1JlZnJlc2hpbmcgcG9pbnRzIHdpdGhpbiBib3VuZHMnLCBib3VuZHMudG9CQm94U3RyaW5nKCkpO1xyXG4gICAgICAgIGNvbnN0IHBvaW50cyA9IGF3YWl0IHRoaXMuZGF0YXN0b3JlLmdldFBvaW50c1dpdGhpbkJvdW5kcyhib3VuZHMpO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAvLyBhZGQgcG9pbnRzIHRvIG1hcCB0aGF0IGRvbid0IGFscmVhZHkgZXhpc3QgaW4gbGF5ZXJcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHBvaW50cy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBjb25zdCBwb2ludCA9IHBvaW50c1tpXTtcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IG1hcmtlciA9IEwuY2lyY2xlTWFya2VyKFtwb2ludC5sYXRpdHVkZSwgcG9pbnQubG9uZ2l0dWRlXSwge1xyXG4gICAgICAgICAgICAgICAgcmFkaXVzOiA1LFxyXG4gICAgICAgICAgICAgICAgLy9maWxsQ29sb3I6IHRoaXMuZ2V0UGxhY2VDb2xvdXIocGxhY2UpLFxyXG4gICAgICAgICAgICAgICAgLy9jb2xvcjogXCIjMDAwMDAwXCIsXHJcbiAgICAgICAgICAgICAgICB3ZWlnaHQ6IDEsXHJcbiAgICAgICAgICAgICAgICBvcGFjaXR5OiAxLFxyXG4gICAgICAgICAgICAgICAgZmlsbE9wYWNpdHk6IDAuOCxcclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAvLyBBZGQgcG9wdXBcclxuICAgICAgICAgICAgbWFya2VyLmJpbmRQb3B1cChwb2ludC5sb2NpZHMuam9pbignPGJyIC8+JykpO1xyXG4gICAgICAgICAgICBtYXJrZXIub24oJ3BvcHVwb3BlbicsIChldmVudCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5yZW5kZXJQb3B1cENvbnRlbnQocG9pbnQpXHJcbiAgICAgICAgICAgICAgICAgICAgLnRoZW4oY29udGVudCA9PiBldmVudC5wb3B1cC5zZXRDb250ZW50KGNvbnRlbnQpKTtcclxuICAgICAgICAgICAgfSlcclxuXHJcbiAgICAgICAgICAgIHRoaXMubWFya2VyTGF5ZXIuYWRkTGF5ZXIobWFya2VyKTtcclxuXHJcbiAgICAgICAgfVxyXG4gICAgICAgICovXHJcblxyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgY29udHJvbHM6IHtcclxuICAgICAgICBba2V5OiBzdHJpbmddOiBJQ29udHJvbDtcclxuICAgIH0gPSB7fTtcclxuXHJcbiAgICBhZGRDb250cm9sKGtleTogc3RyaW5nLCBjb250cm9sOiBJQ29udHJvbCkge1xyXG4gICAgICAgIGlmICh0aGlzLmNvbnRyb2xzW2tleV0pIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBDb250cm9sIHdpdGgga2V5ICR7a2V5fSBhbHJlYWR5IGV4aXN0c2ApO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5jb250cm9sc1trZXldID0gY29udHJvbDtcclxuXHJcbiAgICAgICAgdGhpcy5tYXAuYWRkQ29udHJvbChjb250cm9sLmdldENvbnRyb2woKSlcclxuXHJcbiAgICAgICAgY29uc29sZS5sb2coJ0FkZGVkIGNvbnRyb2wnLCBrZXkpO1xyXG4gICAgfVxyXG5cclxuICAgIHNldE1vZGVIYW5kbGVyKG1vZGVIYW5kbGVyOiBJTW9kZSkge1xyXG4gICAgICAgIHRoaXMubW9kZUhhbmRsZXIgPSBtb2RlSGFuZGxlcjtcclxuXHJcbiAgICAgICAgdGhpcy5tYXJrZXJMYXllcj8ucmVtb3ZlQWxsTWFya2VycygpO1xyXG4gICAgICAgIGNvbnNvbGUubG9nKCdDdXJyZW50IEZldGNoZWQgQm94ZXMnLCB0aGlzLmZldGNoZWRCb3hlcyk7XHJcbiAgICAgICAgdGhpcy5mZXRjaGVkQm94ZXMuY2xlYXIoKTtcclxuICAgICAgICBjb25zb2xlLmxvZygnRmV0Y2hlZCBCb3hlcyBDbGVhcmVkJywgdGhpcy5mZXRjaGVkQm94ZXMpO1xyXG4gICAgICAgIHRoaXMubWFya2VyTGF5ZXI/LnNldE1vZGVIYW5kbGVyKG1vZGVIYW5kbGVyLCB0aGlzLnBsYWNlU3RvcmUpO1xyXG4gICAgICAgIHRoaXMuZmV0Y2hEYXRhRm9yQ3VycmVudFZpZXcoKTtcclxuICAgIH1cclxuXHJcbn0iLCJpbXBvcnQgKiBhcyBMIGZyb20gJ2xlYWZsZXQnO1xyXG5pbXBvcnQgSUNvbnRyb2wgZnJvbSBcIi4uL2ludGVyZmFjZXMvY29udHJvbC5pbnRlcmZhY2VcIjtcclxuaW1wb3J0IE5iblRlY2hNYXAgZnJvbSBcIi4uL25ibl90ZWNoX21hcC5jbGFzc1wiO1xyXG5pbXBvcnQgeyBDb250cm9sRXZlbnQgfSBmcm9tIFwiLi4vdHlwZXNcIjtcclxuXHJcblxyXG5leHBvcnQgZGVmYXVsdCBhYnN0cmFjdCBjbGFzcyBBQ29udHJvbCBpbXBsZW1lbnRzIElDb250cm9sIHtcclxuXHJcbiAgICAvL3Byb3RlY3RlZCBtYXA6IE5iblRlY2hNYXA7XHJcbiAgICBwcm90ZWN0ZWQgY29udHJvbDogTC5Db250cm9sO1xyXG4gICAgLy9wcm90ZWN0ZWQga2V5OiBzdHJpbmc7XHJcblxyXG5cclxuICAgIHByb3RlY3RlZCBldmVudEhhbmRsZXJzOiB7XHJcbiAgICAgICAgW2V2ZW50TmFtZTogc3RyaW5nXTogKChlOiBDb250cm9sRXZlbnQpID0+IHZvaWQpW11cclxuICAgIH0gPSB7fTtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcigvKmtleTogc3RyaW5nLyosIG5iblRlY2hNYXA6IE5iblRlY2hNYXAqLykge1xyXG4gICAgICAgIC8vdGhpcy5rZXkgPSBrZXk7XHJcbiAgICAgICAgLy90aGlzLm1hcCA9IG5iblRlY2hNYXA7XHJcbiAgICAgICAgdGhpcy5jb250cm9sID0gbmV3IEwuQ29udHJvbCgpO1xyXG4gICAgfVxyXG5cclxuICAgIG9uKGV2ZW50TmFtZTogc3RyaW5nLCBjYWxsYmFjazogKGU6IENvbnRyb2xFdmVudCkgPT4gdm9pZCkgOiB2b2lkIHtcclxuICAgICAgICBpZiAoIXRoaXMuZXZlbnRIYW5kbGVyc1tldmVudE5hbWVdKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZXZlbnRIYW5kbGVyc1tldmVudE5hbWVdID0gW107XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuZXZlbnRIYW5kbGVyc1tldmVudE5hbWVdLnB1c2goY2FsbGJhY2spO1xyXG4gICAgfVxyXG5cclxuICAgIHByb3RlY3RlZCBlbWl0KGV2ZW50TmFtZTogc3RyaW5nLCBkYXRhOiBhbnkpIDogdm9pZCB7XHJcbiAgICAgICAgY29uc29sZS5kZWJ1ZyhgRW1pdHRpbmcgZXZlbnQ6ICR7ZXZlbnROYW1lfWAsIHtcclxuICAgICAgICAgICAgZGF0YTogZGF0YSxcclxuICAgICAgICAgICAgaGFuZGxlcnM6IHRoaXMuZXZlbnRIYW5kbGVyc1tldmVudE5hbWVdXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgaWYgKHRoaXMuZXZlbnRIYW5kbGVyc1tldmVudE5hbWVdKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZXZlbnRIYW5kbGVyc1tldmVudE5hbWVdLmZvckVhY2goY2FsbGJhY2sgPT4gY2FsbGJhY2soe1xyXG4gICAgICAgICAgICAgICAgbmFtZTogZXZlbnROYW1lLFxyXG4gICAgICAgICAgICAgICAgc3RhdGU6IHRoaXMuZ2V0U3RhdGUoKSxcclxuICAgICAgICAgICAgICAgIGRhdGE6IGRhdGFcclxuICAgICAgICAgICAgfSkpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBhYnN0cmFjdCBnZXRTdGF0ZSgpIDogYW55O1xyXG5cclxuICAgIHB1YmxpYyBnZXRDb250cm9sKCkgOiBMLkNvbnRyb2wge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmNvbnRyb2w7XHJcbiAgICB9XHJcblxyXG59IiwiaW1wb3J0ICogYXMgTCBmcm9tICdsZWFmbGV0JztcclxuLy9pbXBvcnQgTmJuVGVjaE1hcCBmcm9tIFwiLi4vbmJuX3RlY2hfbWFwLmNsYXNzXCI7XHJcbmltcG9ydCBBQ29udHJvbCBmcm9tIFwiLi9jb250cm9sLmFic3RyYWN0XCI7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBDb250cm9EaXNwbGF5TW9kZSBleHRlbmRzIEFDb250cm9sIHtcclxuXHJcbiAgICBwcml2YXRlIGRpc3BsYXlNb2RlID0gJ2FsbCc7XHJcbiAgICBwcml2YXRlIGVsQ29udHJvbERpdjogSFRNTERpdkVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgIHByaXZhdGUgZWxEcm9wZG93bjogSFRNTFNlbGVjdEVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzZWxlY3QnKTtcclxuXHJcbiAgICBjb25zdHJ1Y3RvciAoZGVmYXVsdE1vZGU6IHN0cmluZykge1xyXG4gICAgICAgIHN1cGVyKCk7XHJcblxyXG4gICAgICAgIHRoaXMuZGlzcGxheU1vZGUgPSBkZWZhdWx0TW9kZTtcclxuICAgICAgICB0aGlzLmdlbmVyYXRlQ29udHJvbERpdigpO1xyXG4gICAgICAgIHRoaXMuY29udHJvbC5vbkFkZCA9IChtYXA6IEwuTWFwKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMuZ2VuZXJhdGVEcm9wZG93bigpO1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5lbENvbnRyb2xEaXY7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvL3RoaXMuY29udHJvbC5vbkFkZCA9ICgpID0+IHRoaXMuYWRkQ29udHJvbERpdigpO1xyXG4gICAgICAgIC8vdGhpcy5zaG93KCk7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0U3RhdGUoKSA6IHN0cmluZyB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZGlzcGxheU1vZGU7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIHByaXZhdGUgYWxsTGFiZWw6IGFueSA9IG51bGw7XHJcbiAgICBwcml2YXRlIGFsbFJhZGlvOiBhbnkgPSBudWxsO1xyXG4gICAgcHJpdmF0ZSBhbGxUZXh0OiBhbnkgPSBudWxsO1xyXG4gICAgcHJpdmF0ZSB1cGdyYWRlTGFiZWw6IGFueSA9IG51bGw7XHJcbiAgICBwcml2YXRlIHVwZ3JhZGVSYWRpbzogYW55ID0gbnVsbDtcclxuICAgIHByaXZhdGUgdXBncmFkZVRleHQ6IGFueSA9IG51bGw7XHJcbiAgICBwcml2YXRlIGVlTGFiZWw6IGFueSA9IG51bGw7XHJcbiAgICBwcml2YXRlIGVlUmFkaW86IGFueSA9IG51bGw7XHJcbiAgICBwcml2YXRlIGVlVGV4dDogYW55ID0gbnVsbDtcclxuICAgIFxyXG4gICAgY2hhbmdlTW9kZShtb2RlOiBzdHJpbmcpIHtcclxuICAgICAgICB0aGlzLmRpc3BsYXlNb2RlID0gbW9kZTtcclxuICAgICAgICB0aGlzLmVtaXQoJ2NoYW5nZScsIG1vZGUpO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgZ2VuZXJhdGVDb250cm9sRGl2KCkgOiB2b2lkIHtcclxuICAgICAgICBpZih0aGlzLmVsQ29udHJvbERpdikge1xyXG4gICAgICAgICAgICBjb25zb2xlLndhcm4oJ0NvbnRyb2xEaXYgYWxyZWFkeSBleGlzdHMnKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuZWxDb250cm9sRGl2LmNsYXNzTGlzdC5hZGQoJ2luZm8nLCAnbGVnZW5kJyk7XHJcbiAgICAgICAgdGhpcy5lbENvbnRyb2xEaXYuc3R5bGUuYmFja2dyb3VuZENvbG9yID0gXCIjZmZmZmZmXCI7XHJcbiAgICAgICAgdGhpcy5lbENvbnRyb2xEaXYuc3R5bGUub3BhY2l0eSA9IFwiMC44XCI7XHJcbiAgICAgICAgdGhpcy5lbENvbnRyb2xEaXYuc3R5bGUucGFkZGluZyA9IFwiNXB4XCI7XHJcbiAgICAgICAgdGhpcy5lbENvbnRyb2xEaXYuc3R5bGUuYm9yZGVyUmFkaXVzID0gXCI1cHhcIjtcclxuXHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBnZW5lcmF0ZURyb3Bkb3duKCkgOiB2b2lkIHtcclxuICAgICAgICBpZiAodGhpcy5lbERyb3Bkb3duKSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUud2FybignRHJvcGRvd24gYWxyZWFkeSBleGlzdHMnKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IGRyb3Bkb3duID0gdGhpcy5lbERyb3Bkb3duO1xyXG4gICAgICAgIGRyb3Bkb3duLmNsYXNzTGlzdC5hZGQoJ2NvbnRyb2wtc2VsZWN0Jyk7XHJcblxyXG4gICAgICAgIGNvbnN0IGFsbE9wdGlvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ29wdGlvbicpO1xyXG4gICAgICAgIGFsbE9wdGlvbi52YWx1ZSA9ICdhbGwnO1xyXG4gICAgICAgIGFsbE9wdGlvbi5pbm5lclRleHQgPSAnU2hvdyBBbGwgTG9jYXRpb25zJztcclxuICAgICAgICBkcm9wZG93bi5hcHBlbmRDaGlsZChhbGxPcHRpb24pO1xyXG5cclxuICAgICAgICBcclxuICAgICAgICBjb25zdCB1cGdyYWRlT3B0aW9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnb3B0aW9uJyk7XHJcbiAgICAgICAgdXBncmFkZU9wdGlvbi52YWx1ZSA9ICd1cGdyYWRlJztcclxuICAgICAgICB1cGdyYWRlT3B0aW9uLmlubmVyVGV4dCA9ICdUZWNoIFVwZ3JhZGVzJztcclxuICAgICAgICBkcm9wZG93bi5hcHBlbmRDaGlsZCh1cGdyYWRlT3B0aW9uKTtcclxuICAgICAgICBcclxuICAgICAgICBcclxuICAgICAgICBjb25zdCBlZU9wdGlvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ29wdGlvbicpO1xyXG4gICAgICAgIGVlT3B0aW9uLnZhbHVlID0gJ2VlJztcclxuICAgICAgICBlZU9wdGlvbi5pbm5lclRleHQgPSAnRW50ZXJwcmlzZSBFdGhlcm5ldCc7XHJcbiAgICAgICAgZHJvcGRvd24uYXBwZW5kQ2hpbGQoZWVPcHRpb24pO1xyXG4gICAgICAgIFxyXG5cclxuICAgICAgICBkcm9wZG93bi5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCAoZSkgPT4gdGhpcy5jaGFuZ2VNb2RlKChlLnRhcmdldCBhcyBIVE1MU2VsZWN0RWxlbWVudCkudmFsdWUpKTtcclxuICAgICAgICBkcm9wZG93bi52YWx1ZSA9IHRoaXMuZGlzcGxheU1vZGU7XHJcblxyXG4gICAgICAgIHRoaXMuZWxEcm9wZG93biA9IGRyb3Bkb3duO1xyXG4gICAgICAgIHRoaXMuZWxDb250cm9sRGl2LmFwcGVuZENoaWxkKGRyb3Bkb3duKTtcclxuXHJcbiAgICB9XHJcblxyXG4gICAgLyphZGRDb250cm9sRGl2KCkge1xyXG5cclxuICAgICAgICB0aGlzLmFsbExhYmVsID0gTC5Eb21VdGlsLmNyZWF0ZSgnbGFiZWwnLCAnY29udHJvbC1sYWJlbCcsIHRoaXMuY29udHJvbERpdik7XHJcbiAgICAgICAgdGhpcy5hbGxSYWRpbyA9IEwuRG9tVXRpbC5jcmVhdGUoJ2lucHV0JywgJ2NvbnRyb2wtaW5wdXQnLCB0aGlzLmFsbExhYmVsKTtcclxuICAgICAgICB0aGlzLmFsbFJhZGlvLnR5cGUgPSAncmFkaW8nO1xyXG4gICAgICAgIHRoaXMuYWxsUmFkaW8ubmFtZSA9ICdkaXNwbGF5LW1vZGUnO1xyXG4gICAgICAgIHRoaXMuYWxsUmFkaW8udmFsdWUgPSAnYWxsJztcclxuICAgICAgICB0aGlzLmFsbFJhZGlvLmNoZWNrZWQgPSB0cnVlO1xyXG4gICAgICAgIEwuRG9tRXZlbnQub24odGhpcy5hbGxSYWRpbywgJ2NoYW5nZScsIChlKSA9PiB0aGlzLmNoYW5nZU1vZGUoJ2FsbCcpKTtcclxuICAgICAgICB0aGlzLmFsbFRleHQgPSBMLkRvbVV0aWwuY3JlYXRlKCdzcGFuJywgJ2NvbnRyb2wtdGV4dCcsIHRoaXMuYWxsTGFiZWwpO1xyXG4gICAgICAgIHRoaXMuYWxsVGV4dC5pbm5lclRleHQgPSAnQWxsJztcclxuXHJcbiAgICAgICAgdGhpcy51cGdyYWRlTGFiZWwgPSBMLkRvbVV0aWwuY3JlYXRlKCdsYWJlbCcsICdjb250cm9sLWxhYmVsJywgdGhpcy5jb250cm9sRGl2KTtcclxuICAgICAgICB0aGlzLnVwZ3JhZGVSYWRpbyA9IEwuRG9tVXRpbC5jcmVhdGUoJ2lucHV0JywgJ2NvbnRyb2wtaW5wdXQnLCB0aGlzLnVwZ3JhZGVMYWJlbCk7XHJcbiAgICAgICAgdGhpcy51cGdyYWRlUmFkaW8udHlwZSA9ICdyYWRpbyc7XHJcbiAgICAgICAgdGhpcy51cGdyYWRlUmFkaW8ubmFtZSA9ICdkaXNwbGF5LW1vZGUnO1xyXG4gICAgICAgIHRoaXMudXBncmFkZVJhZGlvLnZhbHVlID0gJ3VwZ3JhZGUnO1xyXG4gICAgICAgIEwuRG9tRXZlbnQub24odGhpcy51cGdyYWRlUmFkaW8sICdjaGFuZ2UnLCAoKSA9PiB0aGlzLmNoYW5nZU1vZGUoJ3VwZ3JhZGUnKSk7XHJcbiAgICAgICAgdGhpcy51cGdyYWRlVGV4dCA9IEwuRG9tVXRpbC5jcmVhdGUoJ3NwYW4nLCAnY29udHJvbC10ZXh0JywgdGhpcy51cGdyYWRlTGFiZWwpO1xyXG4gICAgICAgIHRoaXMudXBncmFkZVRleHQuaW5uZXJUZXh0ID0gJ1RlY2ggVXBncmFkZSc7XHJcblxyXG4gICAgICAgIHRoaXMuZWVMYWJlbCA9IEwuRG9tVXRpbC5jcmVhdGUoJ2xhYmVsJywgJ2NvbnRyb2wtbGFiZWwnLCB0aGlzLmNvbnRyb2xEaXYpO1xyXG4gICAgICAgIHRoaXMuZWVSYWRpbyA9IEwuRG9tVXRpbC5jcmVhdGUoJ2lucHV0JywgJ2NvbnRyb2wtaW5wdXQnLCB0aGlzLmVlTGFiZWwpO1xyXG4gICAgICAgIHRoaXMuZWVSYWRpby50eXBlID0gJ3JhZGlvJztcclxuICAgICAgICB0aGlzLmVlUmFkaW8ubmFtZSA9ICdkaXNwbGF5LW1vZGUnO1xyXG4gICAgICAgIHRoaXMuZWVSYWRpby52YWx1ZSA9ICdlZSc7XHJcbiAgICAgICAgTC5Eb21FdmVudC5vbih0aGlzLmVlUmFkaW8sICdjaGFuZ2UnLCAoKSA9PiB0aGlzLmNoYW5nZU1vZGUoJ2VlJykpO1xyXG4gICAgICAgIHRoaXMuZWVUZXh0ID0gTC5Eb21VdGlsLmNyZWF0ZSgnc3BhbicsICdjb250cm9sLXRleHQnLCB0aGlzLmVlTGFiZWwpO1xyXG4gICAgICAgIHRoaXMuZWVUZXh0LmlubmVyVGV4dCA9ICdFRSc7XHJcblxyXG4gICAgfSovXHJcblxyXG59IiwiaW1wb3J0IElNb2RlIGZyb20gXCIuLi9pbnRlcmZhY2VzL21vZGUuaW50ZXJmYWNlXCI7XHJcbmltcG9ydCB7IExlZ2VuZEl0ZW0sIE5iblBsYWNlLCBQb2ludEFuZFBsYWNlcyB9IGZyb20gXCIuLi90eXBlc1wiO1xyXG5pbXBvcnQgKiBhcyBMIGZyb20gXCJsZWFmbGV0XCI7XHJcblxyXG5pbXBvcnQge1xyXG4gICAgaXNQbGFjZUZUVFAsXHJcbiAgICBpc1BsYWNlRlRUQyxcclxuICAgIGlzUGxhY2VGVFRQQXZhaWwsXHJcbiAgICBpc1BsYWNlRlRUUFNvb24sXHJcbiAgICBpc1BsYWNlRlRUUEZhcixcclxuICAgIGlzRnd0b0ZUVEMsXHJcbiAgICBpc0Z3dG9GVFROLFxyXG4gICAgaXNTYXRUb0ZXLFxyXG4gICAgaXNEZWJ1Z01vZGVcclxufSBmcm9tIFwiLi4vdXRpbHNcIjtcclxuXHJcbmNvbnN0IGNvbG91ckZUVFAgXHRcdD0gJyMxRDcwNDQnO1xyXG5jb25zdCBjb2xvdXJGVFRQQXZhaWwgICA9ICcjNzVBRDZGJztcclxuY29uc3QgY29sb3VyRlRUUFNvb24gICAgPSAnI0M4RTNDNSc7XHJcbmNvbnN0IGNvbG91ckhGQyBcdFx0PSAnI0ZGQkUwMCc7XHJcbmNvbnN0IGNvbG91ckZUVEMgXHRcdD0gJyNGRjdFMDEnO1xyXG5jb25zdCBjb2xvdXJGVFRDQXZhaWwgICA9ICcjRkY3RTAxJztcclxuY29uc3QgY29sb3VyRlRUTkIgXHRcdD0gJyNFMzA3MUQnO1xyXG5jb25zdCBjb2xvdXJGVyBcdFx0ICAgID0gJyMwMkI5RTMnO1xyXG5jb25zdCBjb2xvdXJGV0F2YWlsIFx0PSAnIzAyMkJFMyc7XHJcbmNvbnN0IGNvbG91clNhdCBcdCAgICA9ICcjNkIwMkUzJztcclxuY29uc3QgY29sb3VyVW5rbm93biAgICAgID0gJyM4ODg4ODgnO1xyXG5cclxuZnVuY3Rpb24gZ2V0VGVjaENvbG91cih0ZWNoVHlwZTogc3RyaW5nKSB7XHJcbiAgICBzd2l0Y2godGVjaFR5cGUpIHtcclxuICAgICAgICBjYXNlICdGVFRQJzogcmV0dXJuIGNvbG91ckZUVFA7XHJcbiAgICAgICAgY2FzZSAnRlRUQyc6IHJldHVybiBjb2xvdXJGVFRDO1xyXG4gICAgICAgIGNhc2UgJ0ZUVE4nOlxyXG4gICAgICAgIGNhc2UgJ0ZUVEInOiByZXR1cm4gY29sb3VyRlRUTkI7XHJcbiAgICAgICAgY2FzZSAnSEZDJzogcmV0dXJuIGNvbG91ckhGQztcclxuICAgICAgICBjYXNlICdXSVJFTEVTUyc6IHJldHVybiBjb2xvdXJGVztcclxuICAgICAgICBjYXNlICdTQVRFTExJVEUnOiByZXR1cm4gY29sb3VyU2F0O1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGNvbG91clVua25vd247XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEFsbE1vZGUgaW1wbGVtZW50cyBJTW9kZSB7XHJcblxyXG4gICAgZmlsdGVyKHBsYWNlOiBOYm5QbGFjZSkgOiBib29sZWFuIHtcclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxuXHJcbiAgICBwb2ludENvbG91cihwb2ludDogUG9pbnRBbmRQbGFjZXMpIDogc3RyaW5nIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5wbGFjZUNvbG91cihwb2ludC5wbGFjZXNbMF0pO1xyXG4gICAgfVxyXG5cclxuICAgIHBsYWNlQ29sb3VyKHBsYWNlOiBOYm5QbGFjZSkgOiBzdHJpbmcge1xyXG4gICAgICAgIFxyXG4gICAgICAgIGlmIChpc1BsYWNlRlRUUChwbGFjZSkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGNvbG91ckZUVFA7XHJcbiAgICAgICAgfVxyXG4gICAgXHJcbiAgICAgICAgaWYgKGlzUGxhY2VGVFRQQXZhaWwocGxhY2UpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBjb2xvdXJGVFRQQXZhaWw7XHJcbiAgICAgICAgfVxyXG4gICAgXHJcbiAgICAgICAgaWYgKGlzUGxhY2VGVFRQU29vbihwbGFjZSkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGNvbG91ckZUVFBTb29uO1xyXG4gICAgICAgIH1cclxuICAgIFxyXG4gICAgICAgIGlmIChpc1BsYWNlRlRUUEZhcihwbGFjZSkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGdldFRlY2hDb2xvdXIocGxhY2UudGVjaFR5cGUpO1xyXG4gICAgICAgIH1cclxuICAgIFxyXG4gICAgICAgIGlmIChpc1BsYWNlRlRUQyhwbGFjZSkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGNvbG91ckZUVEM7XHJcbiAgICAgICAgfVxyXG4gICAgXHJcbiAgICAgICAgaWYgKGlzRnd0b0ZUVEMocGxhY2UpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBjb2xvdXJGVFRDQXZhaWw7XHJcbiAgICAgICAgfVxyXG4gICAgXHJcbiAgICAgICAgaWYgKGlzRnd0b0ZUVE4ocGxhY2UpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBjb2xvdXJGVFROQjtcclxuICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICAgICAgaWYgKGlzU2F0VG9GVyhwbGFjZSkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGNvbG91ckZXQXZhaWw7XHJcbiAgICAgICAgfVxyXG4gICAgXHJcbiAgICAgICAgaWYgKHBsYWNlLmFsdFJlYXNvbkNvZGUgJiYgcGxhY2UuYWx0UmVhc29uQ29kZSAhPSAnTlVMTF9OQScpIHtcclxuICAgICAgICAgICAgY29uc29sZS5sb2cocGxhY2UpO1xyXG4gICAgICAgIH1cclxuICAgIFxyXG4gICAgICAgIHJldHVybiBnZXRUZWNoQ29sb3VyKHBsYWNlLnRlY2hUeXBlKTtcclxuXHJcbiAgICB9XHJcblxyXG4gICAgcmVuZGVyUG9wdXBDb250ZW50KHBsYWNlOiBOYm5QbGFjZSkgOiBIVE1MRWxlbWVudCB7XHJcbiAgICAgICAgXHJcbiAgICAgICAgY29uc3QgY29udGVudCA9IEwuRG9tVXRpbC5jcmVhdGUoJ2RpdicpO1xyXG5cclxuICAgICAgICBjb250ZW50LmlubmVySFRNTCA9ICc8Yj4nK3BsYWNlLmlkKyc8L2I+PC9icj4nXHJcbiAgICAgICAgICAgICsgcGxhY2UuYWRkcmVzczEgKyAnPC9icj4nXHJcbiAgICAgICAgICAgICsgcGxhY2UuYWRkcmVzczIgKyAnPC9icj4nXHJcbiAgICAgICAgICAgICsgJzxiciAvPic7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgIGNvbnRlbnQuaW5uZXJIVE1MICs9ICc8Yj5UZWNobm9sb2d5IFBsYW48L2I+PC9icj4nO1xyXG5cclxuICAgICAgICAvKiogVGVjaG5vbG9neSBQbGFuIEZpbmFsIFN0YXRlICovXHJcbiAgICAgICAgaWYgKHBsYWNlLnRlY2hUeXBlID09ICdGVFRQJ1xyXG4gICAgICAgICAgICB8fCAhcGxhY2UuYWx0UmVhc29uQ29kZVxyXG4gICAgICAgICAgICB8fCBwbGFjZS5hbHRSZWFzb25Db2RlID09ICdOVUxMX05BJ1xyXG4gICAgICAgICkge1xyXG4gICAgICAgICAgICBjb250ZW50LmlubmVySFRNTCArPSAnVGVjaG5vbG9neTogJyArIHBsYWNlLnRlY2hUeXBlICsgJzxiciAvPic7XHJcbiAgICAgICAgICAgIGlmIChwbGFjZS50ZWNoVHlwZSAhPSAnRlRUUCcpIHtcclxuICAgICAgICAgICAgICAgIGNvbnRlbnQuaW5uZXJIVE1MICs9ICdObyB0ZWNoIHVwZ3JhZGUgcGxhbm5lZDxiciAvPic7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IFxyXG4gICAgICAgIFxyXG4gICAgICAgIGVsc2UgaWYgKHBsYWNlLmFsdFJlYXNvbkNvZGUgJiYgcGxhY2UuYWx0UmVhc29uQ29kZS5tYXRjaCgvXkZUVFAvKSkge1xyXG4gICAgICAgICAgICBjb250ZW50LmlubmVySFRNTCArPSAnQ3VycmVudDogJyArIHBsYWNlLnRlY2hUeXBlICsgJzxiciAvPic7XHJcbiAgICAgICAgICAgIGNvbnRlbnQuaW5uZXJIVE1MICs9ICdDaGFuZ2U6ICcgKyBwbGFjZS5hbHRSZWFzb25Db2RlICsgJzxiciAvPic7XHJcbiAgICAgICAgICAgIGNvbnRlbnQuaW5uZXJIVE1MICs9ICdTdGF0dXM6ICcgKyBwbGFjZS50ZWNoQ2hhbmdlU3RhdHVzICsgJzxiciAvPic7XHJcbiAgICAgICAgICAgIGNvbnRlbnQuaW5uZXJIVE1MICs9ICdQcm9ncmFtOiAnICsgcGxhY2UucHJvZ3JhbVR5cGUgKyAnPGJyIC8+JztcclxuICAgICAgICAgICAgY29udGVudC5pbm5lckhUTUwgKz0gJ1RhcmdldCBRdHI6ICcgKyBwbGFjZS50YXJnZXRFbGlnaWJpbGl0eVF1YXJ0ZXIgKyAnPGJyIC8+JztcclxuICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGNvbnRlbnQuaW5uZXJIVE1MICs9ICdDdXJyZW50OiAnICsgcGxhY2UudGVjaFR5cGUgKyAnPGJyIC8+JztcclxuICAgICAgICAgICAgY29udGVudC5pbm5lckhUTUwgKz0gJ0NoYW5nZTogJyArIHBsYWNlLmFsdFJlYXNvbkNvZGUgKyAnPGJyIC8+JztcclxuICAgICAgICAgICAgY29udGVudC5pbm5lckhUTUwgKz0gJ1N0YXR1czogJyArIHBsYWNlLnRlY2hDaGFuZ2VTdGF0dXMgKyAnPGJyIC8+JztcclxuICAgICAgICAgICAgY29udGVudC5pbm5lckhUTUwgKz0gJ1Byb2dyYW06ICcgKyBwbGFjZS5wcm9ncmFtVHlwZSArICc8YnIgLz4nO1xyXG4gICAgICAgICAgICBjb250ZW50LmlubmVySFRNTCArPSAnVGFyZ2V0IFF0cjogJyArIHBsYWNlLnRhcmdldEVsaWdpYmlsaXR5UXVhcnRlciArICc8YnIgLz4nO1xyXG4gICAgICAgIH1cclxuXHJcblxyXG4gICAgICAgIGNvbnRlbnQuaW5uZXJIVE1MICs9ICc8YnIgLz4nOyBcclxuICAgICAgICBcclxuICAgICAgICBpZiAocGxhY2UuZWUpIHtcclxuICAgICAgICAgICAgY29udGVudC5pbm5lckhUTUwgICs9ICc8Yj5FbnRlcnByaXNlIEV0aGVybmV0PC9iPjwvYnI+JztcclxuICAgICAgICAgICAgY29udGVudC5pbm5lckhUTUwgICs9ICdQcmljZSBab25lOiAnICsgKCBwbGFjZS5jYmRwcmljaW5nID8gJ0NCRCcgOiAnWm9uZSAxLzIvMycgKSArICc8YnIgLz4nXHJcbiAgICAgICAgICAgIGNvbnRlbnQuaW5uZXJIVE1MICArPSAnQnVpbGQgQ29zdDogJyArICggcGxhY2UuemVyb0J1aWxkQ29zdCA/ICckMCcgOiAnUE9BJyApICsgJzxiciAvPidcclxuICAgICAgICAgICAgY29udGVudC5pbm5lckhUTUwgICs9ICc8YnIgLz4nO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKGlzRGVidWdNb2RlKCkpIHtcclxuICAgICAgICAgICAgY29uc3QgaHIgPSBMLkRvbVV0aWwuY3JlYXRlKCdocicpO1xyXG4gICAgICAgICAgICBjb25zdCBwcmUgPSBMLkRvbVV0aWwuY3JlYXRlKCdwcmUnKTtcclxuICAgICAgICAgICAgcHJlLmlubmVySFRNTCA9IEpTT04uc3RyaW5naWZ5KHBsYWNlLCBudWxsLCAyKTtcclxuICAgICAgICAgICAgY29udGVudC5hcHBlbmRDaGlsZChocik7XHJcbiAgICAgICAgICAgIGNvbnRlbnQuYXBwZW5kQ2hpbGQocHJlKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBjb250ZW50O1xyXG4gICAgfVxyXG5cclxuICAgIHJlbmRlclRvb2x0aXAocGxhY2VzOiBOYm5QbGFjZVtdKSA6IHN0cmluZyB7XHJcbiAgICAgICAgbGV0IGxhYmVsID0gcGxhY2VzWzBdLmFkZHJlc3MxO1xyXG5cclxuICAgICAgICBpZiAocGxhY2VzLmxlbmd0aCA+IDEpIHtcclxuICAgICAgICAgICAgbGFiZWwgKz0gJyAoICsgJyArIChwbGFjZXMubGVuZ3RoIC0gMSkgKyAnIG1vcmUpJztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBsYWJlbDtcclxuXHJcbiAgICB9XHJcblxyXG4gICAgZ2V0TGVnZW5kSXRlbXMoKTogTGVnZW5kSXRlbVtdIHtcclxuICAgICAgICByZXR1cm4gW1xyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBsYWJlbDogJ0ZUVFAnLFxyXG4gICAgICAgICAgICAgICAgY29sb3VyOiBjb2xvdXJGVFRQLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBsYWJlbDogJ0ZUVFAgVXBncmFkZScsXHJcbiAgICAgICAgICAgICAgICBjb2xvdXI6IGNvbG91ckZUVFBBdmFpbCxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgbGFiZWw6ICdGVFRQIFVwZ3JhZGUgU29vbicsXHJcbiAgICAgICAgICAgICAgICBjb2xvdXI6IGNvbG91ckZUVFBTb29uLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBsYWJlbDogJ0hGQycsXHJcbiAgICAgICAgICAgICAgICBjb2xvdXI6IGNvbG91ckhGQyxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgbGFiZWw6ICdGVFRDJyxcclxuICAgICAgICAgICAgICAgIGNvbG91cjogY29sb3VyRlRUQyxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgbGFiZWw6ICdGVFROL0ZUVEInLFxyXG4gICAgICAgICAgICAgICAgY29sb3VyOiBjb2xvdXJGVFROQixcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgbGFiZWw6ICdGVycsXHJcbiAgICAgICAgICAgICAgICBjb2xvdXI6IGNvbG91ckZXLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBsYWJlbDogJ0ZXIFVwZ3JhZGUnLFxyXG4gICAgICAgICAgICAgICAgY29sb3VyOiBjb2xvdXJGV0F2YWlsLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBsYWJlbDogJ1NhdGVsbGl0ZScsXHJcbiAgICAgICAgICAgICAgICBjb2xvdXI6IGNvbG91clNhdCxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgbGFiZWw6ICdVbmtub3duJyxcclxuICAgICAgICAgICAgICAgIGNvbG91cjogY29sb3VyVW5rbm93bixcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIF07XHJcbiAgICB9XHJcblxyXG59IiwiaW1wb3J0IElNb2RlIGZyb20gXCIuLi9pbnRlcmZhY2VzL21vZGUuaW50ZXJmYWNlXCI7XHJcbmltcG9ydCB7IExlZ2VuZEl0ZW0gfSBmcm9tIFwiLi4vdHlwZXNcIjtcclxuaW1wb3J0IEFDb250cm9sIGZyb20gXCIuL2NvbnRyb2wuYWJzdHJhY3RcIjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIENvbnRyb2xMZWdlbmQgZXh0ZW5kcyBBQ29udHJvbCB7XHJcblxyXG4gICAgcHJpdmF0ZSBlbENvbnRyb2xEaXY6IEhUTUxEaXZFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICBcclxuICAgIGNvbnN0cnVjdG9yICgpIHtcclxuICAgICAgICBzdXBlcigpO1xyXG5cclxuICAgICAgICB0aGlzLmNvbnRyb2wuc2V0UG9zaXRpb24oJ2JvdHRvbXJpZ2h0Jyk7XHJcblxyXG4gICAgICAgIHRoaXMuZWxDb250cm9sRGl2LmNsYXNzTGlzdC5hZGQoJ2luZm8nLCAnbGVnZW5kJyk7XHJcbiAgICAgICAgdGhpcy5lbENvbnRyb2xEaXYuc3R5bGUuYmFja2dyb3VuZENvbG9yID0gXCIjZmZmZmZmXCI7XHJcbiAgICAgICAgdGhpcy5lbENvbnRyb2xEaXYuc3R5bGUub3BhY2l0eSA9IFwiMC44XCI7XHJcbiAgICAgICAgdGhpcy5lbENvbnRyb2xEaXYuc3R5bGUucGFkZGluZyA9IFwiNXB4XCI7XHJcbiAgICAgICAgdGhpcy5lbENvbnRyb2xEaXYuc3R5bGUuYm9yZGVyUmFkaXVzID0gXCI1cHhcIjtcclxuXHJcbiAgICAgICAgdGhpcy5jb250cm9sLm9uQWRkID0gKG1hcDogTC5NYXApID0+IHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZWxDb250cm9sRGl2O1xyXG4gICAgICAgIH1cclxuICAgICAgICBcclxuICAgIH1cclxuXHJcbiAgICBnZXRTdGF0ZSgpIHtcclxuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xyXG4gICAgfVxyXG5cclxuICAgIHVwZGF0ZUxlZ2VuZChpdGVtczogTGVnZW5kSXRlbVtdKSB7XHJcblxyXG4gICAgICAgIGxldCBodG1sID0gJyc7XHJcbiAgICAgICAgaXRlbXMuZm9yRWFjaChpdGVtID0+IHtcclxuICAgICAgICAgICAgaHRtbCArPSAnPHN2ZyBoZWlnaHQ9XCIxMFwiIHdpZHRoPVwiMTBcIj48Y2lyY2xlIGN4PVwiNVwiIGN5PVwiNVwiIHI9XCI1XCIgZmlsbD1cIicrIGl0ZW0uY29sb3VyICsnXCIgc3Ryb2tlPVwiIzAwMDAwMFwiIHN0cm9rZS13aWR0aD1cIjFcIiBvcGFjaXR5PVwiMVwiIGZpbGwtb3BhY2l0eT1cIjAuOFwiIC8+PC9zdmc+ICcgKyBpdGVtLmxhYmVsO1xyXG4gICAgICAgICAgICBpZiAoaXRlbS5jb3VudCkge1xyXG4gICAgICAgICAgICAgICAgaHRtbCArPSAnICgnICsgaXRlbS5jb3VudCArICcpJztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBodG1sICs9ICc8YnI+JztcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgdGhpcy5lbENvbnRyb2xEaXYuaW5uZXJIVE1MID0gaHRtbDtcclxuXHJcbiAgICB9XHJcblxyXG5cclxuXHJcblxyXG4gICAgLypcclxuXHJcbiAgICBnZXRMZWdlbmRIVE1MKCkge1xyXG5cclxuICAgICAgICBpZiAodGhpcy5uYm5UZWNoTWFwLmNvbnRyb2xzLmRpc3BsYXlNb2RlPy5kaXNwbGF5TW9kZSA9PSAnZWUnKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAnPHN2ZyBoZWlnaHQ9XCIxMFwiIHdpZHRoPVwiMTBcIj48Y2lyY2xlIGN4PVwiNVwiIGN5PVwiNVwiIHI9XCI1XCIgZmlsbD1cIicrY29sb3VyRUVfQ0JEX1pCQysnXCIgc3Ryb2tlPVwiIzAwMDAwMFwiIHN0cm9rZS13aWR0aD1cIjFcIiBvcGFjaXR5PVwiMVwiIGZpbGwtb3BhY2l0eT1cIjAuOFwiIC8+PC9zdmc+IFpvbmUgQ0JEICgkMCBCdWlsZCk8YnI+J1xyXG4gICAgICAgICAgICArICc8c3ZnIGhlaWdodD1cIjEwXCIgd2lkdGg9XCIxMFwiPjxjaXJjbGUgY3g9XCI1XCIgY3k9XCI1XCIgcj1cIjVcIiBmaWxsPVwiJytjb2xvdXJFRV9DQkRfQkMrJ1wiIHN0cm9rZT1cIiMwMDAwMDBcIiBzdHJva2Utd2lkdGg9XCIxXCIgb3BhY2l0eT1cIjFcIiBmaWxsLW9wYWNpdHk9XCIwLjhcIiAvPjwvc3ZnPiBab25lIENCRCAoQnVpbGQgUE9BKTxicj4nXHJcbiAgICAgICAgICAgICsgJzxzdmcgaGVpZ2h0PVwiMTBcIiB3aWR0aD1cIjEwXCI+PGNpcmNsZSBjeD1cIjVcIiBjeT1cIjVcIiByPVwiNVwiIGZpbGw9XCInK2NvbG91ckVFX1oxMjNfWkJDKydcIiBzdHJva2U9XCIjMDAwMDAwXCIgc3Ryb2tlLXdpZHRoPVwiMVwiIG9wYWNpdHk9XCIxXCIgZmlsbC1vcGFjaXR5PVwiMC44XCIgLz48L3N2Zz4gWm9uZSAxLzIvMyAoJDAgQnVpbGQpPGJyPidcclxuICAgICAgICAgICAgKyAnPHN2ZyBoZWlnaHQ9XCIxMFwiIHdpZHRoPVwiMTBcIj48Y2lyY2xlIGN4PVwiNVwiIGN5PVwiNVwiIHI9XCI1XCIgZmlsbD1cIicrY29sb3VyRUVfWjEyM19CQysnXCIgc3Ryb2tlPVwiIzAwMDAwMFwiIHN0cm9rZS13aWR0aD1cIjFcIiBvcGFjaXR5PVwiMVwiIGZpbGwtb3BhY2l0eT1cIjAuOFwiIC8+PC9zdmc+IFpvbmUgMS8yLzMgKEJ1aWxkIFBPQSk8YnI+J1xyXG4gICAgICAgICAgICArICc8c3ZnIGhlaWdodD1cIjEwXCIgd2lkdGg9XCIxMFwiPjxjaXJjbGUgY3g9XCI1XCIgY3k9XCI1XCIgcj1cIjVcIiBmaWxsPVwiJytjb2xvdXJVbmtub3duKydcIiBzdHJva2U9XCIjMDAwMDAwXCIgc3Ryb2tlLXdpZHRoPVwiMVwiIG9wYWNpdHk9XCIxXCIgZmlsbC1vcGFjaXR5PVwiMC44XCIgLz48L3N2Zz4gVW5rbm93bic7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodGhpcy5uYm5UZWNoTWFwLmNvbnRyb2xzLmRpc3BsYXlNb2RlPy5kaXNwbGF5TW9kZSA9PSAndXBncmFkZScpIHtcclxuICAgICAgICAgICAgcmV0dXJuICc8c3ZnIGhlaWdodD1cIjEwXCIgd2lkdGg9XCIxMFwiPjxjaXJjbGUgY3g9XCI1XCIgY3k9XCI1XCIgcj1cIjVcIiBmaWxsPVwiJysgQ09MX1RFQ0hfQ09NUExFVEUgKydcIiBzdHJva2U9XCIjMDAwMDAwXCIgc3Ryb2tlLXdpZHRoPVwiMVwiIG9wYWNpdHk9XCIxXCIgZmlsbC1vcGFjaXR5PVwiMC44XCIgLz48L3N2Zz4gQ29tcGxldGVkPGJyPidcclxuICAgICAgICAgICAgKyAnPHN2ZyBoZWlnaHQ9XCIxMFwiIHdpZHRoPVwiMTBcIj48Y2lyY2xlIGN4PVwiNVwiIGN5PVwiNVwiIHI9XCI1XCIgZmlsbD1cIicrIENPTF9URUNIX0FWQUlMICsnXCIgc3Ryb2tlPVwiIzAwMDAwMFwiIHN0cm9rZS13aWR0aD1cIjFcIiBvcGFjaXR5PVwiMVwiIGZpbGwtb3BhY2l0eT1cIjAuOFwiIC8+PC9zdmc+IEF2YWlsYWJsZTxicj4nXHJcbiAgICAgICAgICAgICsgJzxzdmcgaGVpZ2h0PVwiMTBcIiB3aWR0aD1cIjEwXCI+PGNpcmNsZSBjeD1cIjVcIiBjeT1cIjVcIiByPVwiNVwiIGZpbGw9XCInKyBDT0xfVEVDSF9CVUlMREZJTkFMSVNFRCArJ1wiIHN0cm9rZT1cIiMwMDAwMDBcIiBzdHJva2Utd2lkdGg9XCIxXCIgb3BhY2l0eT1cIjFcIiBmaWxsLW9wYWNpdHk9XCIwLjhcIiAvPjwvc3ZnPiBCdWlsZCBGaW5hbGlzZWQ8YnI+J1xyXG4gICAgICAgICAgICArICc8c3ZnIGhlaWdodD1cIjEwXCIgd2lkdGg9XCIxMFwiPjxjaXJjbGUgY3g9XCI1XCIgY3k9XCI1XCIgcj1cIjVcIiBmaWxsPVwiJysgQ09MX1RFQ0hfREVTSUdOICsnXCIgc3Ryb2tlPVwiIzAwMDAwMFwiIHN0cm9rZS13aWR0aD1cIjFcIiBvcGFjaXR5PVwiMVwiIGZpbGwtb3BhY2l0eT1cIjAuOFwiIC8+PC9zdmc+IEluIERlc2lnbjxicj4nXHJcbiAgICAgICAgICAgICsgJzxzdmcgaGVpZ2h0PVwiMTBcIiB3aWR0aD1cIjEwXCI+PGNpcmNsZSBjeD1cIjVcIiBjeT1cIjVcIiByPVwiNVwiIGZpbGw9XCInKyBDT0xfVEVDSF9DT01NSVRURUQgKydcIiBzdHJva2U9XCIjMDAwMDAwXCIgc3Ryb2tlLXdpZHRoPVwiMVwiIG9wYWNpdHk9XCIxXCIgZmlsbC1vcGFjaXR5PVwiMC44XCIgLz48L3N2Zz4gQ29tbWl0dGVkPGJyPidcclxuICAgICAgICAgICAgKyAnPGI+TXVsdGkgRHdlbGxpbmcgVW5pdHM8L2I+PGJyPidcclxuICAgICAgICAgICAgKyAnPHN2ZyBoZWlnaHQ9XCIxMFwiIHdpZHRoPVwiMTBcIj48Y2lyY2xlIGN4PVwiNVwiIGN5PVwiNVwiIHI9XCI1XCIgZmlsbD1cIicrIENPTF9URUNIX01EVV9JTkJVSUxEICsnXCIgc3Ryb2tlPVwiIzAwMDAwMFwiIHN0cm9rZS13aWR0aD1cIjFcIiBvcGFjaXR5PVwiMVwiIGZpbGwtb3BhY2l0eT1cIjAuOFwiIC8+PC9zdmc+IEluIEJ1aWxkPGJyPidcclxuICAgICAgICAgICAgKyAnPHN2ZyBoZWlnaHQ9XCIxMFwiIHdpZHRoPVwiMTBcIj48Y2lyY2xlIGN4PVwiNVwiIGN5PVwiNVwiIHI9XCI1XCIgZmlsbD1cIicrIENPTF9URUNIX01EVV9FTElHSUJMRSArJ1wiIHN0cm9rZT1cIiMwMDAwMDBcIiBzdHJva2Utd2lkdGg9XCIxXCIgb3BhY2l0eT1cIjFcIiBmaWxsLW9wYWNpdHk9XCIwLjhcIiAvPjwvc3ZnPiBFbGxpZ2libGU8YnI+J1xyXG4gICAgICAgICAgICArICc8c3ZnIGhlaWdodD1cIjEwXCIgd2lkdGg9XCIxMFwiPjxjaXJjbGUgY3g9XCI1XCIgY3k9XCI1XCIgcj1cIjVcIiBmaWxsPVwiJytjb2xvdXJVbmtub3duKydcIiBzdHJva2U9XCIjMDAwMDAwXCIgc3Ryb2tlLXdpZHRoPVwiMVwiIG9wYWNpdHk9XCIxXCIgZmlsbC1vcGFjaXR5PVwiMC44XCIgLz48L3N2Zz4gVW5rbm93bic7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gJzxzdmcgaGVpZ2h0PVwiMTBcIiB3aWR0aD1cIjEwXCI+PGNpcmNsZSBjeD1cIjVcIiBjeT1cIjVcIiByPVwiNVwiIGZpbGw9XCInK2NvbG91ckZUVFArJ1wiIHN0cm9rZT1cIiMwMDAwMDBcIiBzdHJva2Utd2lkdGg9XCIxXCIgb3BhY2l0eT1cIjFcIiBmaWxsLW9wYWNpdHk9XCIwLjhcIiAvPjwvc3ZnPiBGVFRQPGJyPicgKyBcclxuICAgICAgICAgICAgJzxzdmcgaGVpZ2h0PVwiMTBcIiB3aWR0aD1cIjEwXCI+PGNpcmNsZSBjeD1cIjVcIiBjeT1cIjVcIiByPVwiNVwiIGZpbGw9XCInK2NvbG91ckZUVFBBdmFpbCsnXCIgc3Ryb2tlPVwiIzAwMDAwMFwiIHN0cm9rZS13aWR0aD1cIjFcIiBvcGFjaXR5PVwiMVwiIGZpbGwtb3BhY2l0eT1cIjAuOFwiIC8+PC9zdmc+IEZUVFAgVXBncmFkZTxicj4nICtcclxuICAgICAgICAgICAgJzxzdmcgaGVpZ2h0PVwiMTBcIiB3aWR0aD1cIjEwXCI+PGNpcmNsZSBjeD1cIjVcIiBjeT1cIjVcIiByPVwiNVwiIGZpbGw9XCInK2NvbG91ckZUVFBTb29uKydcIiBzdHJva2U9XCIjMDAwMDAwXCIgc3Ryb2tlLXdpZHRoPVwiMVwiIG9wYWNpdHk9XCIxXCIgZmlsbC1vcGFjaXR5PVwiMC44XCIgLz48L3N2Zz4gRlRUUCBVcGdyYWRlIFNvb248YnI+JyArXHJcbiAgICAgICAgICAgICc8c3ZnIGhlaWdodD1cIjEwXCIgd2lkdGg9XCIxMFwiPjxjaXJjbGUgY3g9XCI1XCIgY3k9XCI1XCIgcj1cIjVcIiBmaWxsPVwiJytjb2xvdXJIRkMrJ1wiIHN0cm9rZT1cIiMwMDAwMDBcIiBzdHJva2Utd2lkdGg9XCIxXCIgb3BhY2l0eT1cIjFcIiBmaWxsLW9wYWNpdHk9XCIwLjhcIiAvPjwvc3ZnPiBIRkM8YnI+JyArIFxyXG4gICAgICAgICAgICAnPHN2ZyBoZWlnaHQ9XCIxMFwiIHdpZHRoPVwiMTBcIj48Y2lyY2xlIGN4PVwiNVwiIGN5PVwiNVwiIHI9XCI1XCIgZmlsbD1cIicrY29sb3VyRlRUQysnXCIgc3Ryb2tlPVwiIzAwMDAwMFwiIHN0cm9rZS13aWR0aD1cIjFcIiBvcGFjaXR5PVwiMVwiIGZpbGwtb3BhY2l0eT1cIjAuOFwiIC8+PC9zdmc+IEZUVEM8YnI+JyArXHJcbiAgICAgICAgICAgICc8c3ZnIGhlaWdodD1cIjEwXCIgd2lkdGg9XCIxMFwiPjxjaXJjbGUgY3g9XCI1XCIgY3k9XCI1XCIgcj1cIjVcIiBmaWxsPVwiJytjb2xvdXJGVFROQisnXCIgc3Ryb2tlPVwiIzAwMDAwMFwiIHN0cm9rZS13aWR0aD1cIjFcIiBvcGFjaXR5PVwiMVwiIGZpbGwtb3BhY2l0eT1cIjAuOFwiIC8+PC9zdmc+IEZUVE4vRlRUQjxicj4nICtcclxuICAgICAgICAgICAgJzxzdmcgaGVpZ2h0PVwiMTBcIiB3aWR0aD1cIjEwXCI+PGNpcmNsZSBjeD1cIjVcIiBjeT1cIjVcIiByPVwiNVwiIGZpbGw9XCInK2NvbG91ckZXKydcIiBzdHJva2U9XCIjMDAwMDAwXCIgc3Ryb2tlLXdpZHRoPVwiMVwiIG9wYWNpdHk9XCIxXCIgZmlsbC1vcGFjaXR5PVwiMC44XCIgLz48L3N2Zz4gRlc8YnI+JyArXHJcbiAgICAgICAgICAgICc8c3ZnIGhlaWdodD1cIjEwXCIgd2lkdGg9XCIxMFwiPjxjaXJjbGUgY3g9XCI1XCIgY3k9XCI1XCIgcj1cIjVcIiBmaWxsPVwiJytjb2xvdXJGV0F2YWlsKydcIiBzdHJva2U9XCIjMDAwMDAwXCIgc3Ryb2tlLXdpZHRoPVwiMVwiIG9wYWNpdHk9XCIxXCIgZmlsbC1vcGFjaXR5PVwiMC44XCIgLz48L3N2Zz4gRlcgVXBncmFkZTxicj4nICtcclxuICAgICAgICAgICAgJzxzdmcgaGVpZ2h0PVwiMTBcIiB3aWR0aD1cIjEwXCI+PGNpcmNsZSBjeD1cIjVcIiBjeT1cIjVcIiByPVwiNVwiIGZpbGw9XCInK2NvbG91clNhdCsnXCIgc3Ryb2tlPVwiIzAwMDAwMFwiIHN0cm9rZS13aWR0aD1cIjFcIiBvcGFjaXR5PVwiMVwiIGZpbGwtb3BhY2l0eT1cIjAuOFwiIC8+PC9zdmc+IFNhdGVsbGl0ZTxicj4nICtcclxuICAgICAgICAgICAgJzxzdmcgaGVpZ2h0PVwiMTBcIiB3aWR0aD1cIjEwXCI+PGNpcmNsZSBjeD1cIjVcIiBjeT1cIjVcIiByPVwiNVwiIGZpbGw9XCInK2NvbG91clVua25vd24rJ1wiIHN0cm9rZT1cIiMwMDAwMDBcIiBzdHJva2Utd2lkdGg9XCIxXCIgb3BhY2l0eT1cIjFcIiBmaWxsLW9wYWNpdHk9XCIwLjhcIiAvPjwvc3ZnPiBVbmtub3duJztcclxuICAgIH1cclxuXHJcbiAgICBhZGRDb250cm9sRGl2KG1hcCkge1xyXG5cclxuICAgICAgICBpZiAoIXRoaXMuY29udHJvbERpdikge1xyXG4gICAgICAgICAgICB0aGlzLmNvbnRyb2xEaXYgPSBMLkRvbVV0aWwuY3JlYXRlKCdkaXYnLCAnaW5mbyBsZWdlbmQnKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuY29udHJvbERpdi5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSBcIiNmZmZmZmZcIjtcclxuICAgICAgICB0aGlzLmNvbnRyb2xEaXYuc3R5bGUub3BhY2l0eSA9IFwiMC44XCI7XHJcbiAgICAgICAgdGhpcy5jb250cm9sRGl2LnN0eWxlLnBhZGRpbmcgPSBcIjVweFwiO1xyXG4gICAgICAgIHRoaXMuY29udHJvbERpdi5zdHlsZS5ib3JkZXJSYWRpdXMgPSBcIjVweFwiO1xyXG4gICAgICAgIHRoaXMuY29udHJvbERpdi5zdHlsZS53aWR0aCA9IFwiMTUwcHhcIjtcclxuXHJcbiAgICAgICAgdGhpcy5jb250cm9sRGl2LmlubmVySFRNTCA9IHRoaXMuZ2V0TGVnZW5kSFRNTCgpO1xyXG5cclxuICAgICAgICByZXR1cm4gdGhpcy5jb250cm9sRGl2O1xyXG4gICAgfVxyXG5cclxuICAgIHJlZnJlc2goKSB7XHJcbiAgICAgICAgdGhpcy5jb250cm9sRGl2LmlubmVySFRNTCA9IHRoaXMuZ2V0TGVnZW5kSFRNTCgpO1xyXG4gICAgfVxyXG5cclxuICAgIHNob3coKSB7XHJcbiAgICAgICAgdGhpcy5jb250cm9sLmFkZFRvKHRoaXMubmJuVGVjaE1hcC5tYXApO1xyXG4gICAgfVxyXG5cclxuICAgIHJlbW92ZSgpIHtcclxuICAgICAgICB0aGlzLmNvbnRyb2wucmVtb3ZlKCk7XHJcbiAgICB9XHJcblxyXG4gICAgKi9cclxufSIsImltcG9ydCBJUGxhY2VTdG9yZSBmcm9tICcuLi9pbnRlcmZhY2VzL3BsYWNlc3RvcmUuaW50ZXJmYWNlJztcclxuaW1wb3J0IHsgTmJuUGxhY2UgfSBmcm9tIFwiLi4vdHlwZXNcIjtcclxuaW1wb3J0IHsgREJTY2hlbWEsIElEQlBEYXRhYmFzZSwgb3BlbkRCIH0gZnJvbSAnaWRiJztcclxuaW1wb3J0IHsgTG9nZ2VyIH0gZnJvbSAnLi4vdXRpbHMnO1xyXG5cclxuZXhwb3J0IGludGVyZmFjZSBOQk5UZWNoTWFwREIgZXh0ZW5kcyBEQlNjaGVtYSB7XHJcbiAgICBuYm5QbGFjZVN0b3JlOiB7XHJcbiAgICAgICAga2V5OiBzdHJpbmc7XHJcbiAgICAgICAgdmFsdWU6IE5iblBsYWNlO1xyXG4gICAgICAgIGluZGV4ZXM6IHtcclxuICAgICAgICAgICAgLy9sb2NpZDogc3RyaW5nO1xyXG4gICAgICAgICAgICAvL2xhdGxuZzogW251bWJlciwgbnVtYmVyXTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgSW5kZXhEQlBsYWNlU3RvcmUgaW1wbGVtZW50cyBJUGxhY2VTdG9yZSB7XHJcblxyXG4gICAgcHJpdmF0ZSBEQl9OQU1FID0gJ25zbS1wbGFjZXN0b3JlJztcclxuXHJcbiAgICBwcml2YXRlIGxvZ2dlciA9IG5ldyBMb2dnZXIoJ0luZGV4REJQbGFjZVN0b3JlJyk7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBUaGUgZGF0YWJhc2UuXHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgZGI/OiBJREJQRGF0YWJhc2U8TkJOVGVjaE1hcERCPjtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFNldHVwIGRhdGFiYXNlLlxyXG4gICAgICovXHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICBcclxuICAgICAgICB0aGlzLmxvZ2dlci5pbmZvKCdTZXR0aW5nIHVwIGRhdGFiYXNlLi4uJyk7XHJcblxyXG4gICAgICAgIG9wZW5EQjxOQk5UZWNoTWFwREI+KHRoaXMuREJfTkFNRSwgMSwge1xyXG5cclxuICAgICAgICAgICAgdXBncmFkZShkYiwgb2xkVmVyc2lvbiwgbmV3VmVyc2lvbiwgdHJhbnNhY3Rpb24sIGV2ZW50KSB7XHJcblxyXG4gICAgICAgICAgICAgICAgY29uc3Qgb2JqZWN0U3RvcmVOYW1lcyA9IGRiLm9iamVjdFN0b3JlTmFtZXM7XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gQ3JlYXRlIG5ibiBwbGFjZSBzdG9yZSBpZiBpdCBkb2Vzbid0IGV4aXN0XHJcbiAgICAgICAgICAgICAgICBpZiAoIW9iamVjdFN0b3JlTmFtZXMuY29udGFpbnMoJ25iblBsYWNlU3RvcmUnKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGRiLmNyZWF0ZU9iamVjdFN0b3JlKCduYm5QbGFjZVN0b3JlJywgeyBrZXlQYXRoOiAnbG9jaWQnIH0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgfSxcclxuXHJcbiAgICAgICAgICAgIGJsb2NrZWQ6IChjdXJyZW50VmVyc2lvbiwgYmxvY2tlZFZlcnNpb24sIGV2ZW50KSA9PiB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmxvZ2dlci53YXJuKCdEYXRhYmFzZSBibG9ja2VkIScsIHtcclxuICAgICAgICAgICAgICAgICAgICBjdXJyZW50VmVyc2lvbiwgYmxvY2tlZFZlcnNpb24sIGV2ZW50LFxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0sXHJcblxyXG4gICAgICAgICAgICBibG9ja2luZzogKGN1cnJlbnRWZXJzaW9uLCBibG9ja2VkVmVyc2lvbiwgZXZlbnQpID0+IHtcclxuICAgICAgICAgICAgICAgIHRoaXMubG9nZ2VyLndhcm4oJ0RhdGFiYXNlIGJsb2NraW5nIScsIHtcclxuICAgICAgICAgICAgICAgICAgICBjdXJyZW50VmVyc2lvbiwgYmxvY2tlZFZlcnNpb24sIGV2ZW50XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfSxcclxuXHJcbiAgICAgICAgICAgIHRlcm1pbmF0ZWQ6ICgpID0+IHtcclxuICAgICAgICAgICAgICAgIHRoaXMubG9nZ2VyLndhcm4oJ0RhdGFiYXNlIHRlcm1pbmF0ZWQhJyk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgfSlcclxuICAgICAgICBcclxuICAgICAgICAudGhlbigoZGIpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5kYiA9IGRiO1xyXG4gICAgICAgICAgICB0aGlzLmxvZ2dlci5pbmZvKCdEYXRhYmFzZSByZWFkeSEnKTtcclxuICAgICAgICB9KVxyXG4gICAgICAgIFxyXG4gICAgICAgIC5jYXRjaCgoZXJyKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMubG9nZ2VyLmVycm9yKCdGYWlsZWQgdG8gb3BlbiBkYXRhYmFzZTogJywgZXJyKTtcclxuICAgICAgICB9KVxyXG5cclxuICAgICAgICAuZmluYWxseSgoKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMubG9nZ2VyLmluZm8oJ0RhdGFiYXNlIHNldHVwIGNvbXBsZXRlLicpO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIENoZWNrIGlmIHRoZSBkYXRhYmFzZSBpcyByZWFkeS5cclxuICAgICAqIEByZXR1cm5zIFxyXG4gICAgICovXHJcbiAgICBpc1JlYWR5KCkgOiBib29sZWFuIHtcclxuICAgICAgICByZXR1cm4gISF0aGlzLmRiO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogV2FpdCB1bnRpbCB0aGUgZGF0YWJhc2UgaXMgcmVhZHkuXHJcbiAgICAgKiBAcGFyYW0gdGltZW91dFNlY29uZHMgXHJcbiAgICAgKiBAcmV0dXJucyBcclxuICAgICAqL1xyXG4gICAgYXN5bmMgd2FpdFVudGlsUmVhZHkodGltZW91dFNlY29uZHM6IG51bWJlcikgOiBQcm9taXNlPHZvaWQ+IHtcclxuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCBzdGFydFRpbWUgPSBEYXRlLm5vdygpO1xyXG4gICAgICAgICAgICBjb25zdCBpbnRlcnZhbCA9IHNldEludGVydmFsKCgpID0+IHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHRpbWVFbGFwc2VkID0gRGF0ZS5ub3coKSAtIHN0YXJ0VGltZTtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLmlzUmVhZHkoKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNsZWFySW50ZXJ2YWwoaW50ZXJ2YWwpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmUoKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodGltZUVsYXBzZWQgPiB0aW1lb3V0U2Vjb25kcyAqIDEwMDApIHtcclxuICAgICAgICAgICAgICAgICAgICBjbGVhckludGVydmFsKGludGVydmFsKTtcclxuICAgICAgICAgICAgICAgICAgICByZWplY3QobmV3IEVycm9yKGBEYXRhYmFzZSBub3QgcmVhZHkgYWZ0ZXIgJHt0aW1lb3V0U2Vjb25kc30gc2Vjb25kcy5gKSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0sIDEwMCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBTdG9yZSBhIHNpbmdsZSBwbGFjZS5cclxuICAgICAqIEBwYXJhbSBwbGFjZSBcclxuICAgICAqL1xyXG4gICAgYXN5bmMgc3RvcmVQbGFjZShwbGFjZTogTmJuUGxhY2UpOiBQcm9taXNlPHZvaWQ+IHtcclxuICAgICAgICBjb25zdCBkYiA9IGF3YWl0IHRoaXMuZ2V0RGIoKTtcclxuICAgICAgICBhd2FpdCBkYi5wdXQoJ25iblBsYWNlU3RvcmUnLCBwbGFjZSk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBTdG9yZSBhIGJhdGNoIG9mIHBsYWNlcy5cclxuICAgICAqIFVzZXMgYSB0cmFuc2FjdGlvbiB0byBwcm92aWRlIGJldHRlciBwZXJmb3JtYW5jZS5cclxuICAgICAqIEBwYXJhbSBwbGFjZXMgXHJcbiAgICAgKi9cclxuICAgIGFzeW5jIHN0b3JlUGxhY2VzKHBsYWNlczogTmJuUGxhY2VbXSkgOiBQcm9taXNlPHZvaWQ+IHtcclxuXHJcbiAgICAgICAgLy8gR2V0IHRoZSBkYXRhYmFzZVxyXG4gICAgICAgIGNvbnN0IGRiID0gYXdhaXQgdGhpcy5nZXREYigpO1xyXG5cclxuICAgICAgICAvLyBDcmVhdGUgYSB0cmFuc2FjdGlvblxyXG4gICAgICAgIGNvbnN0IHR4ID0gZGIudHJhbnNhY3Rpb24oWyduYm5QbGFjZVN0b3JlJ10sICdyZWFkd3JpdGUnLCB7XHJcbiAgICAgICAgICAgICdkdXJhYmlsaXR5JzogJ3JlbGF4ZWQnLFxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICAvLyBHZXQgdGhlIG9iamVjdCBzdG9yZVxyXG4gICAgICAgIGNvbnN0IHBsYWNlU3RvcmUgPSB0eC5vYmplY3RTdG9yZSgnbmJuUGxhY2VTdG9yZScpO1xyXG5cclxuICAgICAgICAvLyBQdXQgZWFjaCBwbGFjZSBpbnRvIHRoZSBzdG9yZVxyXG4gICAgICAgIGF3YWl0IHBsYWNlcy5tYXAocGxhY2UgPT4gcGxhY2VTdG9yZS5wdXQocGxhY2UpKVxyXG4gICAgICAgIFxyXG4gICAgICAgIC8vIFdhaXQgZm9yIHRoZSB0cmFuc2FjdGlvbiB0byBjb21wbGV0ZVxyXG4gICAgICAgIGF3YWl0IHR4LmRvbmU7XHJcblxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogR2V0IGEgc2luZ2xlIHBsYWNlLlxyXG4gICAgICogQHBhcmFtIGxvY2lkIFxyXG4gICAgICogQHJldHVybnMgXHJcbiAgICAgKi9cclxuICAgIGFzeW5jIGdldFBsYWNlKGxvY2lkOiBzdHJpbmcpIDogUHJvbWlzZTxOYm5QbGFjZSB8IHVuZGVmaW5lZD4ge1xyXG5cclxuICAgICAgICAvLyBHZXQgdGhlIGRhdGFiYXNlXHJcbiAgICAgICAgY29uc3QgZGIgPSBhd2FpdCB0aGlzLmdldERiKCk7XHJcblxyXG4gICAgICAgIC8vIEdldCB0aGUgcGxhY2VcclxuICAgICAgICByZXR1cm4gYXdhaXQgZGIuZ2V0KCduYm5QbGFjZVN0b3JlJywgbG9jaWQpO1xyXG5cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEdldCBhIGJhdGNoIG9mIHBsYWNlcy5cclxuICAgICAqIFVzZXMgYSB0cmFuc2FjdGlvbiB0byBwcm92aWRlIGJldHRlciBwZXJmb3JtYW5jZS5cclxuICAgICAqIEBwYXJhbSBsb2NpZHMgXHJcbiAgICAgKiBAcmV0dXJucyBcclxuICAgICAqL1xyXG4gICAgYXN5bmMgZ2V0UGxhY2VzKGxvY2lkczogc3RyaW5nW10pOiBQcm9taXNlPE5iblBsYWNlW10+IHtcclxuXHJcbiAgICAgICAgLy8gR2V0IHRoZSBkYXRhYmFzZVxyXG4gICAgICAgIGNvbnN0IGRiID0gYXdhaXQgdGhpcy5nZXREYigpO1xyXG4gICAgICAgIFxyXG4gICAgICAgIC8vIE9wZW4gYSB0cmFuc2FjdGlvblxyXG4gICAgICAgIGNvbnN0IHR4ID0gZGIudHJhbnNhY3Rpb24oWyduYm5QbGFjZVN0b3JlJ10sICdyZWFkb25seScpO1xyXG5cclxuICAgICAgICAvLyBHZXQgdGhlIG9iamVjdCBzdG9yZVxyXG4gICAgICAgIGNvbnN0IHBsYWNlU3RvcmUgPSB0eC5vYmplY3RTdG9yZSgnbmJuUGxhY2VTdG9yZScpO1xyXG5cclxuICAgICAgICAvLyBHZXQgdGhlIHBsYWNlc1xyXG4gICAgICAgIGNvbnN0IHBsYWNlcyA9IGF3YWl0IFByb21pc2UuYWxsKGxvY2lkcy5tYXAobG9jaWQgPT4gcGxhY2VTdG9yZS5nZXQobG9jaWQpKSk7XHJcblxyXG4gICAgICAgIC8vIFdhaXQgZm9yIHRoZSB0cmFuc2FjdGlvbiB0byBjb21wbGV0ZVxyXG4gICAgICAgIGF3YWl0IHR4LmRvbmU7XHJcblxyXG4gICAgICAgIC8vIFJldHVybiB0aGUgcGxhY2VzXHJcbiAgICAgICAgcmV0dXJuIHBsYWNlcy5maWx0ZXIocGxhY2UgPT4gISFwbGFjZSkgYXMgTmJuUGxhY2VbXTtcclxuXHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXQgdGhlIGRhdGFiYXNlLlxyXG4gICAgICogQHBhcmFtIHRpbWVvdXQgXHJcbiAgICAgKiBAcmV0dXJucyBQcm9taXNlPElEQlBEYXRhYmFzZTxOQk5UZWNoTWFwREI+PlxyXG4gICAgICovXHJcbiAgICBwcml2YXRlIGFzeW5jIGdldERiKHRpbWVvdXQgPSA1KSA6IFByb21pc2U8SURCUERhdGFiYXNlPE5CTlRlY2hNYXBEQj4+IHtcclxuICAgICAgICBhd2FpdCB0aGlzLndhaXRVbnRpbFJlYWR5KHRpbWVvdXQpO1xyXG4gICAgICAgIGlmICghdGhpcy5kYikge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0RhdGFiYXNlIG5vdCByZWFkeS4nKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZGI7XHJcbiAgICB9XHJcblxyXG59IiwiaW1wb3J0IElNb2RlIGZyb20gXCIuLi9pbnRlcmZhY2VzL21vZGUuaW50ZXJmYWNlXCI7XHJcbmltcG9ydCB7IExlZ2VuZEl0ZW0sIE5iblBsYWNlLCBQb2ludEFuZFBsYWNlcyB9IGZyb20gXCIuLi90eXBlc1wiO1xyXG5pbXBvcnQgKiBhcyBMIGZyb20gXCJsZWFmbGV0XCI7XHJcblxyXG5pbXBvcnQge1xyXG4gICAgaXNQbGFjZUZUVFAsXHJcbiAgICBpc1BsYWNlRlRUQyxcclxuICAgIGlzUGxhY2VGVFRQQXZhaWwsXHJcbiAgICBpc1BsYWNlRlRUUFNvb24sXHJcbiAgICBpc1BsYWNlRlRUUEZhcixcclxuICAgIGlzRnd0b0ZUVEMsXHJcbiAgICBpc0Z3dG9GVFROLFxyXG4gICAgaXNTYXRUb0ZXLFxyXG4gICAgaXNEZWJ1Z01vZGVcclxufSBmcm9tIFwiLi4vdXRpbHNcIjtcclxuXHJcbmNvbnN0IENPTF9URUNIX0NPTVBMRVRFICAgICAgICAgPSAnIzFENzA0NCc7XHJcbmNvbnN0IENPTF9URUNIX0FWQUlMICAgICAgICAgICAgPSAnIzAyQjlFMyc7XHJcbmNvbnN0IENPTF9URUNIX0JVSUxERklOQUxJU0VEICAgPSAnI0ZGQkUwMCc7XHJcbmNvbnN0IENPTF9URUNIX0RFU0lHTiAgICAgICAgICAgPSAnI0ZGN0UwMSc7XHJcbmNvbnN0IENPTF9URUNIX0NPTU1JVFRFRCAgICAgICAgPSAnI0UzMDcxRCc7XHJcbmNvbnN0IENPTF9URUNIX01EVV9JTkJVSUxEICAgICAgPSAnIzAyMkJFMyc7XHJcbmNvbnN0IENPTF9URUNIX01EVV9FTElHSUJMRSAgICAgPSAnIzZCMDJFMyc7XHJcbmNvbnN0IENPTF9VTktOT1dOICAgICAgICAgICAgICAgPSAnIzg4ODg4OCc7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBUZWNoVXBncmFkZU1vZGUgaW1wbGVtZW50cyBJTW9kZSB7XHJcblxyXG4gICAgZmlsdGVyKHBsYWNlOiBOYm5QbGFjZSkgOiBib29sZWFuIHtcclxuXHJcbiAgICAgICAgaWYgKHBsYWNlLnRlY2hDaGFuZ2VTdGF0dXMgPT0gJ05vdCBQbGFubmVkJykge1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAocGxhY2UudGVjaENoYW5nZVN0YXR1cykge1xyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuXHJcbiAgICB9XHJcblxyXG4gICAgcG9pbnRDb2xvdXIocG9pbnQ6IFBvaW50QW5kUGxhY2VzKSA6IHN0cmluZyB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMucGxhY2VDb2xvdXIocG9pbnQucGxhY2VzWzBdKTtcclxuICAgIH1cclxuXHJcbiAgICBwbGFjZUNvbG91cihwbGFjZTogTmJuUGxhY2UpIDogc3RyaW5nIHtcclxuXHJcbiAgICAgICAgc3dpdGNoKHBsYWNlLnRlY2hDaGFuZ2VTdGF0dXMpIHtcclxuICAgICAgICAgICAgY2FzZSAnUHJldmlvdXMgVGVjaCBEaXNjb25uZWN0ZWQnOiByZXR1cm4gQ09MX1RFQ0hfQ09NUExFVEU7XHJcbiAgICAgICAgICAgIGNhc2UgJ05ldyBUZWNoIENvbm5lY3RlZCcgOiByZXR1cm4gQ09MX1RFQ0hfQ09NUExFVEU7XHJcbiAgICAgICAgICAgIGNhc2UgJ0luIERlc2lnbic6IHJldHVybiBDT0xfVEVDSF9ERVNJR047XHJcbiAgICAgICAgICAgIGNhc2UgJ0J1aWxkIEZpbmFsaXNlZCc6IHJldHVybiBDT0xfVEVDSF9CVUlMREZJTkFMSVNFRDtcclxuICAgICAgICAgICAgY2FzZSAnQ29tbWl0dGVkJzogcmV0dXJuIENPTF9URUNIX0NPTU1JVFRFRDtcclxuICAgICAgICAgICAgY2FzZSAnRWxpZ2libGUgVG8gT3JkZXInOiByZXR1cm4gQ09MX1RFQ0hfQVZBSUw7XHJcbiAgICAgICAgICAgIGNhc2UgJ01EVSBDb21wbGV4IEVsaWdpYmxlIFRvIEFwcGx5JzogcmV0dXJuIENPTF9URUNIX01EVV9FTElHSUJMRTtcclxuICAgICAgICAgICAgY2FzZSAnTURVIENvbXBsZXggUHJlbWlzZXMgSW4gQnVpbGQnOiByZXR1cm4gQ09MX1RFQ0hfTURVX0lOQlVJTEQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIFxyXG4gICAgICAgIHJldHVybiBDT0xfVU5LTk9XTjtcclxuXHJcbiAgICB9XHJcblxyXG4gICAgcmVuZGVyUG9wdXBDb250ZW50KHBsYWNlOiBOYm5QbGFjZSkgOiBIVE1MRWxlbWVudCB7XHJcbiAgICAgICAgXHJcbiAgICAgICAgY29uc3QgY29udGVudCA9IEwuRG9tVXRpbC5jcmVhdGUoJ2RpdicpO1xyXG5cclxuICAgICAgICBjb250ZW50LmlubmVySFRNTCA9ICc8Yj4nK3BsYWNlLmlkKyc8L2I+PC9icj4nXHJcbiAgICAgICAgICAgICsgcGxhY2UuYWRkcmVzczEgKyAnPC9icj4nXHJcbiAgICAgICAgICAgICsgcGxhY2UuYWRkcmVzczIgKyAnPC9icj4nXHJcbiAgICAgICAgICAgICsgJzxiciAvPic7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgIGNvbnRlbnQuaW5uZXJIVE1MICs9ICc8Yj5UZWNobm9sb2d5IFBsYW48L2I+PC9icj4nO1xyXG5cclxuICAgICAgICAvKiogVGVjaG5vbG9neSBQbGFuIEZpbmFsIFN0YXRlICovXHJcbiAgICAgICAgaWYgKHBsYWNlLnRlY2hUeXBlID09ICdGVFRQJ1xyXG4gICAgICAgICAgICB8fCAhcGxhY2UuYWx0UmVhc29uQ29kZVxyXG4gICAgICAgICAgICB8fCBwbGFjZS5hbHRSZWFzb25Db2RlID09ICdOVUxMX05BJ1xyXG4gICAgICAgICkge1xyXG4gICAgICAgICAgICBjb250ZW50LmlubmVySFRNTCArPSAnVGVjaG5vbG9neTogJyArIHBsYWNlLnRlY2hUeXBlICsgJzxiciAvPic7XHJcbiAgICAgICAgICAgIGlmIChwbGFjZS50ZWNoVHlwZSAhPSAnRlRUUCcpIHtcclxuICAgICAgICAgICAgICAgIGNvbnRlbnQuaW5uZXJIVE1MICs9ICdObyB0ZWNoIHVwZ3JhZGUgcGxhbm5lZDxiciAvPic7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IFxyXG4gICAgICAgIFxyXG4gICAgICAgIGVsc2UgaWYgKHBsYWNlLmFsdFJlYXNvbkNvZGUgJiYgcGxhY2UuYWx0UmVhc29uQ29kZS5tYXRjaCgvXkZUVFAvKSkge1xyXG4gICAgICAgICAgICBjb250ZW50LmlubmVySFRNTCArPSAnQ3VycmVudDogJyArIHBsYWNlLnRlY2hUeXBlICsgJzxiciAvPic7XHJcbiAgICAgICAgICAgIGNvbnRlbnQuaW5uZXJIVE1MICs9ICdDaGFuZ2U6ICcgKyBwbGFjZS5hbHRSZWFzb25Db2RlICsgJzxiciAvPic7XHJcbiAgICAgICAgICAgIGNvbnRlbnQuaW5uZXJIVE1MICs9ICdTdGF0dXM6ICcgKyBwbGFjZS50ZWNoQ2hhbmdlU3RhdHVzICsgJzxiciAvPic7XHJcbiAgICAgICAgICAgIGNvbnRlbnQuaW5uZXJIVE1MICs9ICdQcm9ncmFtOiAnICsgcGxhY2UucHJvZ3JhbVR5cGUgKyAnPGJyIC8+JztcclxuICAgICAgICAgICAgY29udGVudC5pbm5lckhUTUwgKz0gJ1RhcmdldCBRdHI6ICcgKyBwbGFjZS50YXJnZXRFbGlnaWJpbGl0eVF1YXJ0ZXIgKyAnPGJyIC8+JztcclxuICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGNvbnRlbnQuaW5uZXJIVE1MICs9ICdDdXJyZW50OiAnICsgcGxhY2UudGVjaFR5cGUgKyAnPGJyIC8+JztcclxuICAgICAgICAgICAgY29udGVudC5pbm5lckhUTUwgKz0gJ0NoYW5nZTogJyArIHBsYWNlLmFsdFJlYXNvbkNvZGUgKyAnPGJyIC8+JztcclxuICAgICAgICAgICAgY29udGVudC5pbm5lckhUTUwgKz0gJ1N0YXR1czogJyArIHBsYWNlLnRlY2hDaGFuZ2VTdGF0dXMgKyAnPGJyIC8+JztcclxuICAgICAgICAgICAgY29udGVudC5pbm5lckhUTUwgKz0gJ1Byb2dyYW06ICcgKyBwbGFjZS5wcm9ncmFtVHlwZSArICc8YnIgLz4nO1xyXG4gICAgICAgICAgICBjb250ZW50LmlubmVySFRNTCArPSAnVGFyZ2V0IFF0cjogJyArIHBsYWNlLnRhcmdldEVsaWdpYmlsaXR5UXVhcnRlciArICc8YnIgLz4nO1xyXG4gICAgICAgIH1cclxuICAgICAgICBcclxuICAgICAgICBpZiAocGxhY2UubG9jYXRpb24udGVjaG5vbG9neVBsYW4/LmZvcmVjYXN0UlRDRGF0ZSkge1xyXG4gICAgICAgICAgICBjb250ZW50LmlubmVySFRNTCArPSAnRm9yZWNhc3QgUlRDOiAnICsgcGxhY2UubG9jYXRpb24udGVjaG5vbG9neVBsYW4uZm9yZWNhc3RSVENEYXRlICsgJzxiciAvPic7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChwbGFjZS5sb2NhdGlvbi50ZWNobm9sb2d5UGxhbj8uY2hhbmdlRGF0ZSkge1xyXG4gICAgICAgICAgICBjb250ZW50LmlubmVySFRNTCArPSAnQ2hhbmdlIERhdGU6ICcgKyBwbGFjZS5sb2NhdGlvbi50ZWNobm9sb2d5UGxhbi5jaGFuZ2VEYXRlICsgJzxiciAvPic7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb250ZW50LmlubmVySFRNTCArPSAnPGJyIC8+JzsgXHJcbiAgICAgICAgXHJcbiAgICAgICAgaWYgKGlzRGVidWdNb2RlKCkpIHtcclxuICAgICAgICAgICAgY29uc3QgaHIgPSBMLkRvbVV0aWwuY3JlYXRlKCdocicpO1xyXG4gICAgICAgICAgICBjb25zdCBwcmUgPSBMLkRvbVV0aWwuY3JlYXRlKCdwcmUnKTtcclxuICAgICAgICAgICAgcHJlLmlubmVySFRNTCA9IEpTT04uc3RyaW5naWZ5KHBsYWNlLCBudWxsLCAyKTtcclxuICAgICAgICAgICAgY29udGVudC5hcHBlbmRDaGlsZChocik7XHJcbiAgICAgICAgICAgIGNvbnRlbnQuYXBwZW5kQ2hpbGQocHJlKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBjb250ZW50O1xyXG4gICAgfVxyXG5cclxuICAgIHJlbmRlclRvb2x0aXAocGxhY2VzOiBOYm5QbGFjZVtdKSA6IHN0cmluZyB7XHJcbiAgICAgICAgbGV0IGxhYmVsID0gcGxhY2VzWzBdLmFkZHJlc3MxO1xyXG5cclxuICAgICAgICBpZiAocGxhY2VzLmxlbmd0aCA+IDEpIHtcclxuICAgICAgICAgICAgbGFiZWwgKz0gJyAoICsgJyArIChwbGFjZXMubGVuZ3RoIC0gMSkgKyAnIG1vcmUpJztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBsYWJlbDtcclxuXHJcbiAgICB9XHJcblxyXG4gICAgZ2V0TGVnZW5kSXRlbXMoKTogTGVnZW5kSXRlbVtdIHtcclxuICAgICAgICByZXR1cm4gW1xyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBsYWJlbDogJ1ByZXZpb3VzIFRlY2ggRGlzY29ubmVjdGVkJyxcclxuICAgICAgICAgICAgICAgIGNvbG91cjogQ09MX1RFQ0hfQ09NUExFVEVcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgbGFiZWw6ICdOZXcgVGVjaCBDb25uZWN0ZWQnLFxyXG4gICAgICAgICAgICAgICAgY29sb3VyOiBDT0xfVEVDSF9DT01QTEVURVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBsYWJlbDogJ0VsaWdpYmxlIFRvIE9yZGVyJyxcclxuICAgICAgICAgICAgICAgIGNvbG91cjogQ09MX1RFQ0hfQVZBSUxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgbGFiZWw6ICdCdWlsZCBGaW5hbGlzZWQnLFxyXG4gICAgICAgICAgICAgICAgY29sb3VyOiBDT0xfVEVDSF9CVUlMREZJTkFMSVNFRFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBsYWJlbDogJ0luIERlc2lnbicsXHJcbiAgICAgICAgICAgICAgICBjb2xvdXI6IENPTF9URUNIX0RFU0lHTlxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBsYWJlbDogJ0NvbW1pdHRlZCcsXHJcbiAgICAgICAgICAgICAgICBjb2xvdXI6IENPTF9URUNIX0NPTU1JVFRFRFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBsYWJlbDogJ01EVSBDb21wbGV4IEVsaWdpYmxlIFRvIEFwcGx5JyxcclxuICAgICAgICAgICAgICAgIGNvbG91cjogQ09MX1RFQ0hfTURVX0VMSUdJQkxFXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGxhYmVsOiAnTURVIENvbXBsZXggUHJlbWlzZXMgSW4gQnVpbGQnLFxyXG4gICAgICAgICAgICAgICAgY29sb3VyOiBDT0xfVEVDSF9NRFVfSU5CVUlMRFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBsYWJlbDogJ1Vua25vd24nLFxyXG4gICAgICAgICAgICAgICAgY29sb3VyOiBDT0xfVU5LTk9XTlxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgXTtcclxuICAgIH1cclxuXHJcbn0iLCJpbXBvcnQgSU1vZGUgZnJvbSBcIi4uL2ludGVyZmFjZXMvbW9kZS5pbnRlcmZhY2VcIjtcclxuaW1wb3J0IHsgTGVnZW5kSXRlbSwgTmJuUGxhY2UsIFBvaW50QW5kUGxhY2VzIH0gZnJvbSBcIi4uL3R5cGVzXCI7XHJcbmltcG9ydCAqIGFzIEwgZnJvbSBcImxlYWZsZXRcIjtcclxuXHJcbmltcG9ydCB7XHJcbiAgICBpc1BsYWNlRlRUUCxcclxuICAgIGlzUGxhY2VGVFRDLFxyXG4gICAgaXNQbGFjZUZUVFBBdmFpbCxcclxuICAgIGlzUGxhY2VGVFRQU29vbixcclxuICAgIGlzUGxhY2VGVFRQRmFyLFxyXG4gICAgaXNGd3RvRlRUQyxcclxuICAgIGlzRnd0b0ZUVE4sXHJcbiAgICBpc1NhdFRvRlcsXHJcbiAgICBpc0RlYnVnTW9kZVxyXG59IGZyb20gXCIuLi91dGlsc1wiO1xyXG5cclxuY29uc3QgQ09MX0VFX0NCRF9aQkMgICAgPSAnIzFENzA0NCc7XHJcbmNvbnN0IENPTF9FRV9DQkRfQkMgICAgID0gJyMwMkI5RTMnO1xyXG5jb25zdCBDT0xfRUVfWjEyM19aQkMgICA9ICcjRkY3RTAxJztcclxuY29uc3QgQ09MX0VFX1oxMjNfQkMgICAgPSAnI0UzMDcxRCc7XHJcbmNvbnN0IENPTF9VTktOT1dOICAgICAgID0gJyM4ODg4ODgnO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRUVNb2RlIGltcGxlbWVudHMgSU1vZGUge1xyXG5cclxuICAgIGZpbHRlcihwbGFjZTogTmJuUGxhY2UpIDogYm9vbGVhbiB7XHJcbiAgICAgICAgcmV0dXJuIHBsYWNlLmVlO1xyXG4gICAgfVxyXG5cclxuICAgIHBvaW50Q29sb3VyKHBvaW50OiBQb2ludEFuZFBsYWNlcykgOiBzdHJpbmcge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnBsYWNlQ29sb3VyKHBvaW50LnBsYWNlc1swXSk7XHJcbiAgICB9XHJcblxyXG4gICAgcGxhY2VDb2xvdXIocGxhY2U6IE5iblBsYWNlKSA6IHN0cmluZyB7XHJcblxyXG4gICAgICAgIGlmKHBsYWNlLmNiZHByaWNpbmcgJiYgcGxhY2UuemVyb0J1aWxkQ29zdCkge1xyXG4gICAgICAgICAgICByZXR1cm4gQ09MX0VFX0NCRF9aQkM7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZihwbGFjZS5jYmRwcmljaW5nICYmICFwbGFjZS56ZXJvQnVpbGRDb3N0KSB7XHJcbiAgICAgICAgICAgIHJldHVybiBDT0xfRUVfQ0JEX0JDO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYoIXBsYWNlLmNiZHByaWNpbmcgJiYgcGxhY2UuemVyb0J1aWxkQ29zdCkge1xyXG4gICAgICAgICAgICByZXR1cm4gQ09MX0VFX1oxMjNfWkJDO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYoIXBsYWNlLmNiZHByaWNpbmcgJiYgIXBsYWNlLnplcm9CdWlsZENvc3QpIHtcclxuICAgICAgICAgICAgcmV0dXJuIENPTF9FRV9aMTIzX0JDO1xyXG4gICAgICAgIH1cclxuICAgICAgICBcclxuICAgICAgICByZXR1cm4gQ09MX1VOS05PV047XHJcblxyXG4gICAgfVxyXG5cclxuICAgIHJlbmRlclBvcHVwQ29udGVudChwbGFjZTogTmJuUGxhY2UpIDogSFRNTEVsZW1lbnQge1xyXG4gICAgICAgIFxyXG4gICAgICAgIGNvbnN0IGNvbnRlbnQgPSBMLkRvbVV0aWwuY3JlYXRlKCdkaXYnKTtcclxuXHJcbiAgICAgICAgY29udGVudC5pbm5lckhUTUwgPSAnPGI+JytwbGFjZS5pZCsnPC9iPjwvYnI+J1xyXG4gICAgICAgICAgICArIHBsYWNlLmFkZHJlc3MxICsgJzwvYnI+J1xyXG4gICAgICAgICAgICArIHBsYWNlLmFkZHJlc3MyICsgJzwvYnI+J1xyXG4gICAgICAgICAgICArICc8YnIgLz4nO1xyXG5cclxuICAgICAgICBjb250ZW50LmlubmVySFRNTCAgKz0gJzxiPkVudGVycHJpc2UgRXRoZXJuZXQ8L2I+PC9icj4nO1xyXG4gICAgICAgIGNvbnRlbnQuaW5uZXJIVE1MICArPSAnUHJpY2UgWm9uZTogJyArICggcGxhY2UuY2JkcHJpY2luZyA/ICdDQkQnIDogJ1pvbmUgMS8yLzMnICkgKyAnPGJyIC8+J1xyXG4gICAgICAgIGNvbnRlbnQuaW5uZXJIVE1MICArPSAnQnVpbGQgQ29zdDogJyArICggcGxhY2UuemVyb0J1aWxkQ29zdCA/ICckMCcgOiAnUE9BJyApICsgJzxiciAvPidcclxuICAgICAgICBjb250ZW50LmlubmVySFRNTCAgKz0gJzxiciAvPic7XHJcbiAgICAgICAgXHJcbiAgICAgICAgaWYgKGlzRGVidWdNb2RlKCkpIHtcclxuICAgICAgICAgICAgY29uc3QgaHIgPSBMLkRvbVV0aWwuY3JlYXRlKCdocicpO1xyXG4gICAgICAgICAgICBjb25zdCBwcmUgPSBMLkRvbVV0aWwuY3JlYXRlKCdwcmUnKTtcclxuICAgICAgICAgICAgcHJlLmlubmVySFRNTCA9IEpTT04uc3RyaW5naWZ5KHBsYWNlLCBudWxsLCAyKTtcclxuICAgICAgICAgICAgY29udGVudC5hcHBlbmRDaGlsZChocik7XHJcbiAgICAgICAgICAgIGNvbnRlbnQuYXBwZW5kQ2hpbGQocHJlKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBjb250ZW50O1xyXG4gICAgfVxyXG5cclxuICAgIHJlbmRlclRvb2x0aXAocGxhY2VzOiBOYm5QbGFjZVtdKSA6IHN0cmluZyB7XHJcbiAgICAgICAgbGV0IGxhYmVsID0gcGxhY2VzWzBdLmFkZHJlc3MxO1xyXG5cclxuICAgICAgICBpZiAocGxhY2VzLmxlbmd0aCA+IDEpIHtcclxuICAgICAgICAgICAgbGFiZWwgKz0gJyAoICsgJyArIChwbGFjZXMubGVuZ3RoIC0gMSkgKyAnIG1vcmUpJztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBsYWJlbDtcclxuXHJcbiAgICB9XHJcblxyXG4gICAgZ2V0TGVnZW5kSXRlbXMoKTogTGVnZW5kSXRlbVtdIHtcclxuICAgICAgICByZXR1cm4gW1xyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBsYWJlbDogJ0VFIENCRCAkMCcsXHJcbiAgICAgICAgICAgICAgICBjb2xvdXI6IENPTF9FRV9DQkRfWkJDXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGxhYmVsOiAnRUUgQ0JEIFBPQScsXHJcbiAgICAgICAgICAgICAgICBjb2xvdXI6IENPTF9FRV9DQkRfQkNcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgbGFiZWw6ICdFRSBaMTIzICQwJyxcclxuICAgICAgICAgICAgICAgIGNvbG91cjogQ09MX0VFX1oxMjNfWkJDXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGxhYmVsOiAnRUUgWm9uZSAxLzIvMyBQT0EnLFxyXG4gICAgICAgICAgICAgICAgY29sb3VyOiBDT0xfRUVfWjEyM19CQ1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBsYWJlbDogJ1Vua25vd24nLFxyXG4gICAgICAgICAgICAgICAgY29sb3VyOiBDT0xfVU5LTk9XTlxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgXTtcclxuICAgIH1cclxuXHJcbn0iLCIvKipcclxuICogQGZpbGUgTWFpbiBlbnRyeSBwb2ludCBmb3IgbWFwIHNjcmlwdHMuXHJcbiAqIEBtb2R1bGUgaW5kZXgudHNcclxuICogQHZlcnNpb24gMS4wLjBcclxuICogQGF1dGhvciBLb2FsYUdcclxuICogQGxpY2Vuc2UgTUlUXHJcbiAqL1xyXG5cclxuaW1wb3J0IExpcEFwaSBmcm9tIFwiLi9hcGkvbGlwX2FwaS5jbGFzc1wiO1xyXG5pbXBvcnQgTmJuVGVjaE1hcCBmcm9tIFwiLi9uYm5fdGVjaF9tYXAuY2xhc3NcIjtcclxuaW1wb3J0IENvbnRyb0Rpc3BsYXlNb2RlIGZyb20gXCIuL2NvbnRyb2xzL2NvbnRyb2xfZGlzcGxheV9tb2RlLmNsYXNzXCI7XHJcbmltcG9ydCB7IE1lbW9yeURhdGFzdG9yZSB9IGZyb20gXCIuL2RhdGFzdG9yZS9kYXRhc3RvcmUubWVtb3J5LmNsYXNzXCI7XHJcbmltcG9ydCBBbGxNb2RlIGZyb20gXCIuL21vZGVzL21vZGUuYWxsXCI7XHJcbmltcG9ydCBDb250cm9sTGVnZW5kIGZyb20gXCIuL2NvbnRyb2xzL2NvbnRyb2xfbGVnZW5kLmNsYXNzXCI7XHJcblxyXG5pbXBvcnQgJy4vYXNzZXRzL1NjcmVlbnNob3QxLnBuZyc7XHJcbmltcG9ydCAnLi9hc3NldHMvU2NyZWVuc2hvdDIucG5nJztcclxuaW1wb3J0ICcuL2Fzc2V0cy9TY3JlZW5zaG90My5wbmcnO1xyXG5cclxuaW1wb3J0IHsgTG9nZ2VyIH0gZnJvbSBcIi4vdXRpbHNcIjtcclxuaW1wb3J0IHsgTmJuUGxhY2UgfSBmcm9tIFwiLi90eXBlc1wiO1xyXG5pbXBvcnQgeyBJbmRleERCUGxhY2VTdG9yZSB9IGZyb20gXCIuL3BsYWNlc3RvcmUvaW5kZXhkYi5wbGFjZXN0b3JlXCI7XHJcbmltcG9ydCBUZWNoVXBncmFkZU1vZGUgZnJvbSBcIi4vbW9kZXMvdGVjaHVwZ3JhZGUubW9kZVwiO1xyXG5pbXBvcnQgRUVNb2RlIGZyb20gXCIuL21vZGVzL2VlLm1vZGVcIjtcclxuY29uc3QgbG9nZ2VyID0gbmV3IExvZ2dlcignaW5kZXgudHMnKTtcclxuXHJcbmNvbnN0IGlzRGV2ZWxvcG1lbnQgPSAoKCkgPT4ge1xyXG4gICAgdHJ5IHtcclxuICAgICAgICByZXR1cm4gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdkZXZlbG9wbWVudCcgfHwgcHJvY2Vzcy5hcmd2LmluY2x1ZGVzKCdkZXZlbG9wbWVudCcpO1xyXG4gICAgfSBjYXRjaCAoZSkge1xyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxufSkoKTtcclxubG9nZ2VyLmRlYnVnKCdpc0RldmVsb3BtZW50JywgaXNEZXZlbG9wbWVudCk7XHJcblxyXG5pZiAoJ3NlcnZpY2VXb3JrZXInIGluIG5hdmlnYXRvciAmJiAhaXNEZXZlbG9wbWVudCkge1xyXG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ2xvYWQnLCAoKSA9PiB7XHJcbiAgICAgICAgbmF2aWdhdG9yLnNlcnZpY2VXb3JrZXIucmVnaXN0ZXIoJy4vc2VydmljZS13b3JrZXIuanMnKS50aGVuKHJlZ2lzdHJhdGlvbiA9PiB7XHJcbiAgICAgICAgICAgIGxvZ2dlci5pbmZvKCdTVyByZWdpc3RlcmVkOiAnLCByZWdpc3RyYXRpb24pO1xyXG4gICAgICAgIH0pLmNhdGNoKHJlZ2lzdHJhdGlvbkVycm9yID0+IHtcclxuICAgICAgICAgICAgbG9nZ2VyLndhcm4oJ1NXIHJlZ2lzdHJhdGlvbiBmYWlsZWQ6ICcsIHJlZ2lzdHJhdGlvbkVycm9yKTtcclxuICAgICAgICB9KTtcclxuICAgIH0pO1xyXG59XHJcblxyXG5cclxuLyoqXHJcbiAqIEBmdW5jdGlvbiByZWFkeVxyXG4gKiBAZGVzY3JpcHRpb24gRXhlY3V0ZXMgYSBmdW5jdGlvbiB3aGVuIHRoZSBET00gaXMgcmVhZHkuXHJcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IGZuIC0gRnVuY3Rpb24gdG8gZXhlY3V0ZS5cclxuICogQHJldHVybnMge3ZvaWR9XHJcbiAqIEBzZWUge0BsaW5rIGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vYS85ODk5NzAxLzEyOTMyNTZ9XHJcbiAqL1xyXG5mdW5jdGlvbiByZWFkeShmbjogKCkgPT4gdm9pZCkge1xyXG4gICAgLy8gc2VlIGlmIERPTSBpcyBhbHJlYWR5IGF2YWlsYWJsZVxyXG4gICAgaWYgKGRvY3VtZW50LnJlYWR5U3RhdGUgPT09IFwiY29tcGxldGVcIiB8fCBkb2N1bWVudC5yZWFkeVN0YXRlID09PSBcImludGVyYWN0aXZlXCIpIHtcclxuICAgICAgICAvLyBjYWxsIG9uIG5leHQgYXZhaWxhYmxlIHRpY2tcclxuICAgICAgICBzZXRUaW1lb3V0KGZuLCAxKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcIkRPTUNvbnRlbnRMb2FkZWRcIiwgZm4pO1xyXG4gICAgfVxyXG59XHJcblxyXG4vLyBFeGVjdXRlIHdoZW4gRE9NIGlzIHJlYWR5LlxyXG5yZWFkeShmdW5jdGlvbigpIHtcclxuXHJcbiAgICBjb25zdCBtYXBBcGkgPSBuZXcgTGlwQXBpKCk7XHJcbiAgICAvL2NvbnN0IGRhdGFzdG9yZSA9IG5ldyBJbmRleERCRGF0YXN0b3JlKCk7XHJcbiAgICAvLyBjb25zdCBkYXRhc3RvcmUgPSBuZXcgTWVtb3J5RGF0YXN0b3JlKCk7XHJcbiAgICAvL2NvbnN0IG1hcmtlckxheWVyID0gbmV3IE1hcmtlckxheWVyQ2x1c3RlcigpO1xyXG5cclxuICAgIGNvbnN0IG1vZGVBbGwgPSBuZXcgQWxsTW9kZSgpO1xyXG4gICAgY29uc3QgbW9kZVRlY2hVcGdyYWRlID0gbmV3IFRlY2hVcGdyYWRlTW9kZSgpO1xyXG4gICAgY29uc3QgbW9kZUVFID0gbmV3IEVFTW9kZSgpO1xyXG5cclxuICAgIGNvbnN0IGdldERlZmF1bHRNb2RlU3RyaW5nID0gKCkgPT4ge1xyXG4gICAgICAgIGNvbnN0IHVybFBhcmFtcyA9IG5ldyBVUkxTZWFyY2hQYXJhbXMod2luZG93LmxvY2F0aW9uLnNlYXJjaCk7XHJcbiAgICAgICAgY29uc3QgbW9kZUZyb21VcmwgPSB1cmxQYXJhbXMuZ2V0KCdtb2RlJyk7XHJcblxyXG4gICAgICAgIGlmIChtb2RlRnJvbVVybCkge1xyXG4gICAgICAgICAgICByZXR1cm4gbW9kZUZyb21Vcmw7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zdCBtb2RlRnJvbVN0b3JhZ2UgPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgnbW9kZScpO1xyXG4gICAgICAgIGlmIChtb2RlRnJvbVN0b3JhZ2UpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG1vZGVGcm9tU3RvcmFnZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiAnYWxsJztcclxuICAgIH07XHJcbiAgICBjb25zdCBnZXRNb2RlID0gKG1vZGU/OiBzdHJpbmcpID0+IHtcclxuXHJcbiAgICAgICAgaWYgKCFtb2RlKSB7XHJcbiAgICAgICAgICAgIG1vZGUgPSBnZXREZWZhdWx0TW9kZVN0cmluZygpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgc3dpdGNoIChtb2RlKSB7XHJcbiAgICAgICAgICAgIGNhc2UgJ2FsbCc6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbW9kZUFsbDtcclxuICAgICAgICAgICAgY2FzZSAndXBncmFkZSc6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbW9kZVRlY2hVcGdyYWRlO1xyXG4gICAgICAgICAgICBjYXNlICdlZSc6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbW9kZUVFO1xyXG4gICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG1vZGVBbGw7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IGRlZmF1bHRNb2RlID0gZ2V0TW9kZSgpO1xyXG5cclxuICAgIGNvbnN0IHBsYWNlU3RvcmUgPSBuZXcgSW5kZXhEQlBsYWNlU3RvcmUoKTtcclxuXHJcbiAgICBjb25zdCBuYm5UZWNoTWFwID0gbmV3IE5iblRlY2hNYXAoe1xyXG4gICAgICAgIG1hcENvbnRhaW5lcklkOiAnbWFwJyxcclxuICAgICAgICBhcGk6IG1hcEFwaSxcclxuICAgICAgICAvL2RhdGFzdG9yZTogZGF0YXN0b3JlLFxyXG4gICAgICAgIC8vbWFya2VyTGF5ZXI6IG1hcmtlckxheWVyLFxyXG4gICAgICAgIGRlZmF1bHRNb2RlSGFuZGxlcjogZGVmYXVsdE1vZGUsXHJcbiAgICAgICAgcGxhY2VzdG9yZTogcGxhY2VTdG9yZSxcclxuICAgIH0pO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQWRkIENvbnRyb2xzIHRvIE1hcFxyXG4gICAgICovXHJcblxyXG4gICAgLy8gRGlzcGxheSBNb2RlIENvbnRyb2xcclxuICAgIGNvbnN0IGNEaXNwbGF5TW9kZSA9IG5ldyBDb250cm9EaXNwbGF5TW9kZShnZXREZWZhdWx0TW9kZVN0cmluZygpKTtcclxuICAgIG5iblRlY2hNYXAuYWRkQ29udHJvbCgnZGlzcGxheW1vZGUnLCBjRGlzcGxheU1vZGUpO1xyXG5cclxuICAgIC8vIExlZ2VuZCBDb250cm9sXHJcbiAgICBjb25zdCBjTGVnZW5kID0gbmV3IENvbnRyb2xMZWdlbmQoKTtcclxuICAgIGNMZWdlbmQudXBkYXRlTGVnZW5kKGRlZmF1bHRNb2RlLmdldExlZ2VuZEl0ZW1zKCkpO1xyXG4gICAgbmJuVGVjaE1hcC5hZGRDb250cm9sKCdsZWdlbmQnLCBjTGVnZW5kKTtcclxuXHJcbiAgICAvLyBTZWFyY2ggQ29udHJvbFxyXG5cclxuICAgIC8vIFByb2dyZXNzIENvbnRyb2xcclxuXHJcbiAgICAvLyBBZGQgZXZlbnQgTGlzdGVuZXJzXHJcbiAgICBjRGlzcGxheU1vZGUub24oJ2NoYW5nZScsIChlKSA9PiB7XHJcbiAgICAgICAgY29uc3QgbW9kZSA9IGdldE1vZGUoZS5zdGF0ZSk7XHJcbiAgICAgICAgaWYgKCFtb2RlKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICAgICAgbmJuVGVjaE1hcC5zZXRNb2RlSGFuZGxlcihtb2RlKTtcclxuICAgICAgICBjTGVnZW5kLnVwZGF0ZUxlZ2VuZChtb2RlLmdldExlZ2VuZEl0ZW1zKCkpO1xyXG5cclxuICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgnbW9kZScsIGUuc3RhdGUpO1xyXG5cclxuICAgICAgICAvLyBBZGQgbW9kZSBwYXJhbSB0byBleGlzdGluZyB1cmxcclxuICAgICAgICBjb25zdCB1cmwgPSBuZXcgVVJMKHdpbmRvdy5sb2NhdGlvbi5ocmVmKTtcclxuICAgICAgICB1cmwuc2VhcmNoUGFyYW1zLnNldCgnbW9kZScsIGUuc3RhdGUpO1xyXG4gICAgICAgIHdpbmRvdy5oaXN0b3J5LnB1c2hTdGF0ZSh7fSwgJycsIHVybC50b1N0cmluZygpKTtcclxuICAgICAgICBcclxuICAgIH0pO1xyXG5cclxufSkiLCIvLyBUaGUgbW9kdWxlIGNhY2hlXG52YXIgX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fID0ge307XG5cbi8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG5mdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuXHR2YXIgY2FjaGVkTW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXTtcblx0aWYgKGNhY2hlZE1vZHVsZSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0cmV0dXJuIGNhY2hlZE1vZHVsZS5leHBvcnRzO1xuXHR9XG5cdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG5cdHZhciBtb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdID0ge1xuXHRcdGlkOiBtb2R1bGVJZCxcblx0XHQvLyBubyBtb2R1bGUubG9hZGVkIG5lZWRlZFxuXHRcdGV4cG9ydHM6IHt9XG5cdH07XG5cblx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG5cdF9fd2VicGFja19tb2R1bGVzX19bbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG5cdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG5cdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn1cblxuLy8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbl9fd2VicGFja19yZXF1aXJlX18ubSA9IF9fd2VicGFja19tb2R1bGVzX187XG5cbiIsIi8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSAobW9kdWxlKSA9PiB7XG5cdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuXHRcdCgpID0+IChtb2R1bGVbJ2RlZmF1bHQnXSkgOlxuXHRcdCgpID0+IChtb2R1bGUpO1xuXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCB7IGE6IGdldHRlciB9KTtcblx0cmV0dXJuIGdldHRlcjtcbn07IiwiLy8gZGVmaW5lIGdldHRlciBmdW5jdGlvbnMgZm9yIGhhcm1vbnkgZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5kID0gKGV4cG9ydHMsIGRlZmluaXRpb24pID0+IHtcblx0Zm9yKHZhciBrZXkgaW4gZGVmaW5pdGlvbikge1xuXHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhkZWZpbml0aW9uLCBrZXkpICYmICFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywga2V5KSkge1xuXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGRlZmluaXRpb25ba2V5XSB9KTtcblx0XHR9XG5cdH1cbn07IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5nID0gKGZ1bmN0aW9uKCkge1xuXHRpZiAodHlwZW9mIGdsb2JhbFRoaXMgPT09ICdvYmplY3QnKSByZXR1cm4gZ2xvYmFsVGhpcztcblx0dHJ5IHtcblx0XHRyZXR1cm4gdGhpcyB8fCBuZXcgRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcblx0fSBjYXRjaCAoZSkge1xuXHRcdGlmICh0eXBlb2Ygd2luZG93ID09PSAnb2JqZWN0JykgcmV0dXJuIHdpbmRvdztcblx0fVxufSkoKTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSAob2JqLCBwcm9wKSA9PiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcHJvcCkpIiwidmFyIHNjcmlwdFVybDtcbmlmIChfX3dlYnBhY2tfcmVxdWlyZV9fLmcuaW1wb3J0U2NyaXB0cykgc2NyaXB0VXJsID0gX193ZWJwYWNrX3JlcXVpcmVfXy5nLmxvY2F0aW9uICsgXCJcIjtcbnZhciBkb2N1bWVudCA9IF9fd2VicGFja19yZXF1aXJlX18uZy5kb2N1bWVudDtcbmlmICghc2NyaXB0VXJsICYmIGRvY3VtZW50KSB7XG5cdGlmIChkb2N1bWVudC5jdXJyZW50U2NyaXB0KVxuXHRcdHNjcmlwdFVybCA9IGRvY3VtZW50LmN1cnJlbnRTY3JpcHQuc3JjO1xuXHRpZiAoIXNjcmlwdFVybCkge1xuXHRcdHZhciBzY3JpcHRzID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJzY3JpcHRcIik7XG5cdFx0aWYoc2NyaXB0cy5sZW5ndGgpIHtcblx0XHRcdHZhciBpID0gc2NyaXB0cy5sZW5ndGggLSAxO1xuXHRcdFx0d2hpbGUgKGkgPiAtMSAmJiAhc2NyaXB0VXJsKSBzY3JpcHRVcmwgPSBzY3JpcHRzW2ktLV0uc3JjO1xuXHRcdH1cblx0fVxufVxuLy8gV2hlbiBzdXBwb3J0aW5nIGJyb3dzZXJzIHdoZXJlIGFuIGF1dG9tYXRpYyBwdWJsaWNQYXRoIGlzIG5vdCBzdXBwb3J0ZWQgeW91IG11c3Qgc3BlY2lmeSBhbiBvdXRwdXQucHVibGljUGF0aCBtYW51YWxseSB2aWEgY29uZmlndXJhdGlvblxuLy8gb3IgcGFzcyBhbiBlbXB0eSBzdHJpbmcgKFwiXCIpIGFuZCBzZXQgdGhlIF9fd2VicGFja19wdWJsaWNfcGF0aF9fIHZhcmlhYmxlIGZyb20geW91ciBjb2RlIHRvIHVzZSB5b3VyIG93biBsb2dpYy5cbmlmICghc2NyaXB0VXJsKSB0aHJvdyBuZXcgRXJyb3IoXCJBdXRvbWF0aWMgcHVibGljUGF0aCBpcyBub3Qgc3VwcG9ydGVkIGluIHRoaXMgYnJvd3NlclwiKTtcbnNjcmlwdFVybCA9IHNjcmlwdFVybC5yZXBsYWNlKC8jLiokLywgXCJcIikucmVwbGFjZSgvXFw/LiokLywgXCJcIikucmVwbGFjZSgvXFwvW15cXC9dKyQvLCBcIi9cIik7XG5fX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBzY3JpcHRVcmw7IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5iID0gZG9jdW1lbnQuYmFzZVVSSSB8fCBzZWxmLmxvY2F0aW9uLmhyZWY7XG5cbi8vIG9iamVjdCB0byBzdG9yZSBsb2FkZWQgYW5kIGxvYWRpbmcgY2h1bmtzXG4vLyB1bmRlZmluZWQgPSBjaHVuayBub3QgbG9hZGVkLCBudWxsID0gY2h1bmsgcHJlbG9hZGVkL3ByZWZldGNoZWRcbi8vIFtyZXNvbHZlLCByZWplY3QsIFByb21pc2VdID0gY2h1bmsgbG9hZGluZywgMCA9IGNodW5rIGxvYWRlZFxudmFyIGluc3RhbGxlZENodW5rcyA9IHtcblx0MTQzOiAwXG59O1xuXG4vLyBubyBjaHVuayBvbiBkZW1hbmQgbG9hZGluZ1xuXG4vLyBubyBwcmVmZXRjaGluZ1xuXG4vLyBubyBwcmVsb2FkZWRcblxuLy8gbm8gSE1SXG5cbi8vIG5vIEhNUiBtYW5pZmVzdFxuXG5fX3dlYnBhY2tfcmVxdWlyZV9fLk8uaiA9IChjaHVua0lkKSA9PiAoaW5zdGFsbGVkQ2h1bmtzW2NodW5rSWRdID09PSAwKTtcblxuLy8gaW5zdGFsbCBhIEpTT05QIGNhbGxiYWNrIGZvciBjaHVuayBsb2FkaW5nXG52YXIgd2VicGFja0pzb25wQ2FsbGJhY2sgPSAocGFyZW50Q2h1bmtMb2FkaW5nRnVuY3Rpb24sIGRhdGEpID0+IHtcblx0dmFyIFtjaHVua0lkcywgbW9yZU1vZHVsZXMsIHJ1bnRpbWVdID0gZGF0YTtcblx0Ly8gYWRkIFwibW9yZU1vZHVsZXNcIiB0byB0aGUgbW9kdWxlcyBvYmplY3QsXG5cdC8vIHRoZW4gZmxhZyBhbGwgXCJjaHVua0lkc1wiIGFzIGxvYWRlZCBhbmQgZmlyZSBjYWxsYmFja1xuXHR2YXIgbW9kdWxlSWQsIGNodW5rSWQsIGkgPSAwO1xuXHRpZihjaHVua0lkcy5zb21lKChpZCkgPT4gKGluc3RhbGxlZENodW5rc1tpZF0gIT09IDApKSkge1xuXHRcdGZvcihtb2R1bGVJZCBpbiBtb3JlTW9kdWxlcykge1xuXHRcdFx0aWYoX193ZWJwYWNrX3JlcXVpcmVfXy5vKG1vcmVNb2R1bGVzLCBtb2R1bGVJZCkpIHtcblx0XHRcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tW21vZHVsZUlkXSA9IG1vcmVNb2R1bGVzW21vZHVsZUlkXTtcblx0XHRcdH1cblx0XHR9XG5cdFx0aWYocnVudGltZSkgdmFyIHJlc3VsdCA9IHJ1bnRpbWUoX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cdH1cblx0aWYocGFyZW50Q2h1bmtMb2FkaW5nRnVuY3Rpb24pIHBhcmVudENodW5rTG9hZGluZ0Z1bmN0aW9uKGRhdGEpO1xuXHRmb3IoO2kgPCBjaHVua0lkcy5sZW5ndGg7IGkrKykge1xuXHRcdGNodW5rSWQgPSBjaHVua0lkc1tpXTtcblx0XHRpZihfX3dlYnBhY2tfcmVxdWlyZV9fLm8oaW5zdGFsbGVkQ2h1bmtzLCBjaHVua0lkKSAmJiBpbnN0YWxsZWRDaHVua3NbY2h1bmtJZF0pIHtcblx0XHRcdGluc3RhbGxlZENodW5rc1tjaHVua0lkXVswXSgpO1xuXHRcdH1cblx0XHRpbnN0YWxsZWRDaHVua3NbY2h1bmtJZF0gPSAwO1xuXHR9XG5cdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fLk8ocmVzdWx0KTtcbn1cblxudmFyIGNodW5rTG9hZGluZ0dsb2JhbCA9IHNlbGZbXCJ3ZWJwYWNrQ2h1bmtcIl0gPSBzZWxmW1wid2VicGFja0NodW5rXCJdIHx8IFtdO1xuY2h1bmtMb2FkaW5nR2xvYmFsLmZvckVhY2god2VicGFja0pzb25wQ2FsbGJhY2suYmluZChudWxsLCAwKSk7XG5jaHVua0xvYWRpbmdHbG9iYWwucHVzaCA9IHdlYnBhY2tKc29ucENhbGxiYWNrLmJpbmQobnVsbCwgY2h1bmtMb2FkaW5nR2xvYmFsLnB1c2guYmluZChjaHVua0xvYWRpbmdHbG9iYWwpKTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLm5jID0gdW5kZWZpbmVkOyIsIi8vIHN0YXJ0dXBcbi8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuLy8gVGhpcyBlbnRyeSBtb2R1bGUgZGVwZW5kcyBvbiBvdGhlciBsb2FkZWQgY2h1bmtzIGFuZCBleGVjdXRpb24gbmVlZCB0byBiZSBkZWxheWVkXG52YXIgX193ZWJwYWNrX2V4cG9ydHNfXyA9IF9fd2VicGFja19yZXF1aXJlX18uTyh1bmRlZmluZWQsIFs1NzhdLCAoKSA9PiAoX193ZWJwYWNrX3JlcXVpcmVfXyg2MDkpKSlcbl9fd2VicGFja19leHBvcnRzX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fLk8oX193ZWJwYWNrX2V4cG9ydHNfXyk7XG4iXSwibmFtZXMiOlsiZGVmZXJyZWQiLCJuYW1lIiwic3ViIiwiTG9nZ2VyIiwidGhpcyIsImVycm9yIiwiY29uc29sZSIsImFyZ3MiLCJ3YXJuIiwiZGVidWciLCJpc0RlYnVnTW9kZSIsImluZm8iLCJsb2ciLCJ3aW5kb3ciLCJsb2NhdGlvbiIsImhyZWYiLCJpbmNsdWRlcyIsInVybEJhc2UiLCJmZXRjaFBhZ2UiLCJib3VuZHMiLCJwYWdlIiwicHJvY2VlZCIsIm5vcnRoIiwiZ2V0Tm9ydGgiLCJ0b0ZpeGVkIiwiZWFzdCIsImdldEVhc3QiLCJzb3V0aCIsImdldFNvdXRoIiwid2VzdCIsImdldFdlc3QiLCJFcnJvciIsIk1hdGgiLCJtYXgiLCJOdW1iZXIiLCJwYWdlVXJsIiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJmZXRjaCIsIm1ldGhvZCIsInJlZGlyZWN0IiwidGhlbiIsInJlc3BvbnNlIiwidGV4dCIsInJlc3VsdCIsInBhcnNlZFJlc3VsdCIsIkpTT04iLCJwYXJzZSIsImRhdGEiLCJjYXRjaCIsIm1hcCIsIm1vZGVIYW5kbGVyIiwicGxhY2VTdG9yZSIsImxvZ2dlciIsInBvaW50TWFwIiwiTWFwIiwibWFya2VycyIsIm1heENsdXN0ZXJSYWRpdXMiLCJtYXJrZXJDbHVzdGVyUmFkaXVzIiwic3BpZGVyZnlPbk1heFpvb20iLCJkaXNhYmxlQ2x1c3RlcmluZ0F0Wm9vbSIsInNob3dDb3ZlcmFnZU9uSG92ZXIiLCJ6b29tVG9Cb3VuZHNPbkNsaWNrIiwicmVtb3ZlT3V0c2lkZVZpc2libGVCb3VuZHMiLCJpY29uQ3JlYXRlRnVuY3Rpb24iLCJjaHVua2VkTG9hZGluZyIsImNodW5rSW50ZXJ2YWwiLCJjaHVua0RlbGF5IiwiY2h1bmtQcm9ncmVzcyIsInByb2Nlc3NlZCIsInRvdGFsIiwiZWxhcHNlZCIsImFkZFRvIiwib24iLCJldmVudCIsInRhcmdldCIsImdldFpvb20iLCJhZGRQb2ludHMiLCJwb2ludHMiLCJuZXdMYXllcnMiLCJmb3JFYWNoIiwicG9pbnQiLCJsYXRMbmdTdHJpbmciLCJsYXQiLCJsbmciLCJnZXQiLCJuZXdMYXllciIsInJlbmRlclBvaW50IiwicHVzaCIsInNldCIsImxheWVyIiwibGVuZ3RoIiwiYWRkTGF5ZXJzIiwicmVtb3ZlQWxsUG9pbnRzIiwiY2xlYXJMYXllcnMiLCJjbGVhciIsInJlbW92ZUFsbE1hcmtlcnMiLCJ6b29tIiwidXBkYXRlUG9pbnRTdHlsZSIsInBsYWNlcyIsInNldFN0eWxlIiwiZmlsbENvbG9yIiwicGxhY2VDb2xvdXIiLCJzZXRUb29sdGlwQ29udGVudCIsInJlbmRlclRvb2x0aXAiLCJyZWRyYXciLCJzZXRNb2RlSGFuZGxlciIsInBsYWNlc3RvcmUiLCJERVBfcmVmcmVzaE1hcmtlcnNJbnNpZGVCb3VuZHMiLCJtRmlsdGVyIiwicmVtb3ZlTWFya2Vyc091dHNpZGVCb3VuZHMiLCJjaXJjbGVNYXJrZXJMYXllciIsInJhZGl1cyIsImNvbCIsInVuZGVmaW5lZCIsImNvbG9yIiwid2VpZ2h0Iiwib3BhY2l0eSIsImZpbGxPcGFjaXR5IiwiYmluZFBvcHVwIiwiZ2V0UGxhY2VzIiwiaWRzIiwicG9wdXAiLCJyZW5kZXJQb3B1cCIsInNldFBvcHVwQ29udGVudCIsImxvYWRpbmdQb3B1cCIsImRvY3VtZW50IiwiY3JlYXRlRWxlbWVudCIsImlubmVySFRNTCIsImF1dG9QYW4iLCJhdXRvQ2xvc2UiLCJiaW5kVG9vbHRpcCIsImxhYmVsIiwiYWRkIiwicmVuZGVyUG9wdXBDb250ZW50IiwicmVuZG9yUG9wdXBNdWx0aSIsImdyb3VwRGl2IiwicGxhY2VDb250YWluZXJzIiwic29ydCIsImEiLCJiIiwiYWRkcmVzczEiLCJwbGFjZSIsInBsYWNlQ29udGFpbmVyIiwiYnV0dG9uIiwiY2xhc3NMaXN0IiwidHlwZSIsInBhbmVsIiwiYXBwZW5kQ2hpbGQiLCJhZGRFdmVudExpc3RlbmVyIiwiY3VycmVudGx5QWN0aXZlIiwiY29udGFpbnMiLCJyZW1vdmUiLCJjbHVzdGVyIiwiY29sb3JBcnJheSIsImdldEFsbENoaWxkTWFya2VycyIsIm1hcmtlciIsIm9wdGlvbnMiLCJjb2xvckNvdW50cyIsImNvbG9yQXJyYXlTb3J0ZWQiLCJPYmplY3QiLCJrZXlzIiwiYmFja2dyb3VuZCIsImxhc3RDb2xvdXJQZXJjZW50IiwiaW5kZXgiLCJ0aGlzQ29sb3VyUGVyY2VudCIsInJhbmRvbUlkIiwicmFuZG9tIiwidG9TdHJpbmciLCJzdWJzdHJpbmciLCJodG1sIiwiZ2V0Q2hpbGRDb3VudCIsImNsYXNzTmFtZSIsIk1BWF9VTkZFVENIRURfQk9YRVMiLCJpbml0aWFsVmlld1NldCIsImZldGNoZWRCb3hlcyIsIlNldCIsInByb2dyZXNzQ29udHJvbCIsInBvc2l0aW9uIiwicHJvZ3Jlc3NJdGVtcyIsImNvbnRyb2xzIiwiTmJuVGVjaE1hcCIsIkRFRkFVTFRfT1BUSU9OUyIsImFwaSIsImRlZmF1bHRNb2RlSGFuZGxlciIsIm1hcENvbnRhaW5lcklkIiwicHJlZmVyQ2FudmFzIiwibWFya2VyTGF5ZXIiLCJtYXBUaWxlTGF5ZXIiLCJhdHRyaWJ1dGlvbiIsInN1YmRvbWFpbnMiLCJjcm9zc09yaWdpbiIsIm1pblpvb20iLCJtYXhab29tIiwiTCIsIkdlb2NvZGVyIiwiZ2VvY29kZXIiLCJtYXBHZW9jb2RlciIsIkFyY0dpcyIsImFwaUtleSIsImdlb2NvZGluZ1F1ZXJ5UGFyYW1zIiwiY291bnRyeUNvZGUiLCJjYXRlZ29yeSIsIm1hcFNlYXJjaCIsImNvbGxhcHNlZCIsImRlZmF1bHRNYXJrR2VvY29kZSIsInN1Z2dlc3RNaW5MZW5ndGgiLCJzdWdnZXN0VGltZW91dCIsImJib3giLCJnZW9jb2RlIiwiZml0Qm91bmRzIiwibWFwTG9jYXRlIiwibG9jYXRlIiwibG9jYXRlT3B0aW9ucyIsInNldFZpZXciLCJrZWVwQ3VycmVudFpvb21MZXZlbCIsImluaXRpYWxab29tTGV2ZWwiLCJjYWNoZUxvY2F0aW9uIiwibG9jYWxTdG9yYWdlIiwic2V0SXRlbSIsInJlbW92ZUl0ZW0iLCJzZXRJbml0aWFsTWFwVmlldyIsImNlbnRlciIsImdldENlbnRlciIsInN0cmluZ2lmeSIsInB1c2hCcm93c2VySGlzdG9yeSIsImZldGNoRGF0YUZvckN1cnJlbnRWaWV3IiwidXJsUGFyYW1zIiwiVVJMU2VhcmNoUGFyYW1zIiwic2VhcmNoIiwicGFyc2VJbnQiLCJuZXdVcmwiLCJwYXRobmFtZSIsImhpc3RvcnkiLCJwdXNoU3RhdGUiLCJnZXRTdGFydFBvcyIsInN0YXJ0UG9zU3RyaW5nIiwiZ2V0SXRlbSIsImdlb0ZsYWciLCJzdGFydFBvcyIsInN0YXJ0Iiwic2V0Wm9vbSIsImdldEJveGVzSW5Cb3VuZHMiLCJub3J0aG1vc3QiLCJjZWlsIiwid2VzdG1tb3N0IiwiZmxvb3IiLCJib3hlcyIsImxhdGl0dWRlIiwibG9uZ2l0dWRlIiwiYm94IiwiZ2V0Q3VycmVudFZpZXdCb3hlcyIsImdldEJvdW5kcyIsImhpZGVNYXJrZXJzT3V0c2lkZUN1cnJlbnRWaWV3IiwibWFwQm91bmRzIiwicGFkIiwiREVQX2Rpc3BsYXlNYXJrZXJzSW5DdXJyZW50VmlldyIsImF0dGVtcHQiLCJzaG93Wm9vbUluV2FybmluZyIsInpvb21Jbldhcm5pbmdDb250cm9sIiwib25BZGQiLCJkaXYiLCJjcmVhdGUiLCJzdHlsZSIsImJhY2tncm91bmRDb2xvciIsInBhZGRpbmciLCJzZXRUaW1lb3V0IiwiYWRkQ29udHJvbCIsImhpZGVab29tSW5XYXJuaW5nIiwicmVtb3ZlQ29udHJvbCIsInVuZmV0Y2hlZEJveGVzIiwiZmlsdGVyIiwiaGFzIiwidXBkYXRlS2V5IiwicHJvZ3Jlc3NJdGVtIiwiY3JlYXRlUHJvZ3Jlc3MiLCJyZW5kZXJQcm9ncmVzcyIsImJveGVzUHJvY2Vzc2VkIiwidXBkYXRlUHJvZ3Jlc3MiLCJmZXRjaERhdGEiLCJrZXkiLCJzdGFydGVkIiwiRGF0ZSIsImZpbmlzaGVkIiwiY29tcGxldGUiLCJwcm9ncmVzcyIsIm5vdyIsImkiLCJnZXRUaW1lIiwiaXRlbXMiLCJ2YWx1ZXMiLCJpdGVtIiwicHJvZ3Jlc3NUZXh0IiwiZXZlcnkiLCJoaWRlUHJvZ3Jlc3MiLCJpbnRlcnNlY3RzIiwicHJvY2Vzc0ZldGNoUmVzdWx0IiwibmV4dFBhZ2UiLCJtZXNzYWdlIiwic3RvcmVQbGFjZXMiLCJsYXRMbmciLCJleGlzdGluZ1BvaW50IiwiaWQiLCJERVBSX3JlZnJlc2hQb2ludHNGcm9tU3RvcmUiLCJyb3VuZEJvdW5kcyIsImNvbnRyb2wiLCJnZXRDb250cm9sIiwiZXZlbnRIYW5kbGVycyIsImV2ZW50TmFtZSIsImNhbGxiYWNrIiwiZW1pdCIsImhhbmRsZXJzIiwic3RhdGUiLCJnZXRTdGF0ZSIsImRlZmF1bHRNb2RlIiwiZGlzcGxheU1vZGUiLCJlbENvbnRyb2xEaXYiLCJlbERyb3Bkb3duIiwiYWxsTGFiZWwiLCJhbGxSYWRpbyIsImFsbFRleHQiLCJ1cGdyYWRlTGFiZWwiLCJ1cGdyYWRlUmFkaW8iLCJ1cGdyYWRlVGV4dCIsImVlTGFiZWwiLCJlZVJhZGlvIiwiZWVUZXh0IiwiZ2VuZXJhdGVDb250cm9sRGl2IiwiZ2VuZXJhdGVEcm9wZG93biIsImNoYW5nZU1vZGUiLCJtb2RlIiwiYm9yZGVyUmFkaXVzIiwiZHJvcGRvd24iLCJhbGxPcHRpb24iLCJ2YWx1ZSIsImlubmVyVGV4dCIsInVwZ3JhZGVPcHRpb24iLCJlZU9wdGlvbiIsImUiLCJnZXRUZWNoQ29sb3VyIiwidGVjaFR5cGUiLCJwb2ludENvbG91ciIsImlzUGxhY2VGVFRQIiwiYWx0UmVhc29uQ29kZSIsIm1hdGNoIiwidGVjaENoYW5nZVN0YXR1cyIsImlzUGxhY2VGVFRQQXZhaWwiLCJpc1BsYWNlRlRUUFNvb24iLCJpc1BsYWNlRlRUUEZhciIsInJlYXNvbkNvZGUiLCJpc1BsYWNlRlRUQyIsImlzRnd0b0ZUVEMiLCJpc0Z3dG9GVFROIiwiaXNTYXRUb0ZXIiwiY29udGVudCIsImFkZHJlc3MyIiwicHJvZ3JhbVR5cGUiLCJ0YXJnZXRFbGlnaWJpbGl0eVF1YXJ0ZXIiLCJlZSIsImNiZHByaWNpbmciLCJ6ZXJvQnVpbGRDb3N0IiwiaHIiLCJwcmUiLCJnZXRMZWdlbmRJdGVtcyIsImNvbG91ciIsInNldFBvc2l0aW9uIiwidXBkYXRlTGVnZW5kIiwiY291bnQiLCJEQl9OQU1FIiwidXBncmFkZSIsImRiIiwib2xkVmVyc2lvbiIsIm5ld1ZlcnNpb24iLCJ0cmFuc2FjdGlvbiIsIm9iamVjdFN0b3JlTmFtZXMiLCJjcmVhdGVPYmplY3RTdG9yZSIsImtleVBhdGgiLCJibG9ja2VkIiwiY3VycmVudFZlcnNpb24iLCJibG9ja2VkVmVyc2lvbiIsImJsb2NraW5nIiwidGVybWluYXRlZCIsImVyciIsImZpbmFsbHkiLCJpc1JlYWR5Iiwid2FpdFVudGlsUmVhZHkiLCJ0aW1lb3V0U2Vjb25kcyIsInN0YXJ0VGltZSIsImludGVydmFsIiwic2V0SW50ZXJ2YWwiLCJ0aW1lRWxhcHNlZCIsImNsZWFySW50ZXJ2YWwiLCJzdG9yZVBsYWNlIiwiZ2V0RGIiLCJwdXQiLCJ0eCIsIm9iamVjdFN0b3JlIiwiZG9uZSIsImdldFBsYWNlIiwibG9jaWQiLCJsb2NpZHMiLCJhbGwiLCJ0aW1lb3V0IiwiQ09MX1VOS05PV04iLCJ0ZWNobm9sb2d5UGxhbiIsImZvcmVjYXN0UlRDRGF0ZSIsImNoYW5nZURhdGUiLCJDT0xfRUVfQ0JEX1pCQyIsIkNPTF9FRV9DQkRfQkMiLCJDT0xfRUVfWjEyM19aQkMiLCJDT0xfRUVfWjEyM19CQyIsImZuIiwiaXNEZXZlbG9wbWVudCIsInByb2Nlc3MiLCJhcmd2IiwibmF2aWdhdG9yIiwic2VydmljZVdvcmtlciIsInJlZ2lzdGVyIiwicmVnaXN0cmF0aW9uIiwicmVnaXN0cmF0aW9uRXJyb3IiLCJtYXBBcGkiLCJtb2RlQWxsIiwibW9kZVRlY2hVcGdyYWRlIiwibW9kZUVFIiwiZ2V0RGVmYXVsdE1vZGVTdHJpbmciLCJtb2RlRnJvbVVybCIsImdldE1vZGUiLCJJbmRleERCUGxhY2VTdG9yZSIsIm5iblRlY2hNYXAiLCJjRGlzcGxheU1vZGUiLCJjTGVnZW5kIiwidXJsIiwiVVJMIiwic2VhcmNoUGFyYW1zIiwicmVhZHlTdGF0ZSIsIl9fd2VicGFja19tb2R1bGVfY2FjaGVfXyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImNhY2hlZE1vZHVsZSIsImV4cG9ydHMiLCJtb2R1bGUiLCJfX3dlYnBhY2tfbW9kdWxlc19fIiwiY2FsbCIsIm0iLCJPIiwiY2h1bmtJZHMiLCJwcmlvcml0eSIsIm5vdEZ1bGZpbGxlZCIsIkluZmluaXR5IiwiZnVsZmlsbGVkIiwiaiIsInNwbGljZSIsInIiLCJuIiwiZ2V0dGVyIiwiX19lc01vZHVsZSIsImQiLCJkZWZpbml0aW9uIiwibyIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImciLCJnbG9iYWxUaGlzIiwiRnVuY3Rpb24iLCJvYmoiLCJwcm9wIiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJzY3JpcHRVcmwiLCJpbXBvcnRTY3JpcHRzIiwiY3VycmVudFNjcmlwdCIsInNyYyIsInNjcmlwdHMiLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsInJlcGxhY2UiLCJwIiwiYmFzZVVSSSIsInNlbGYiLCJpbnN0YWxsZWRDaHVua3MiLCJjaHVua0lkIiwid2VicGFja0pzb25wQ2FsbGJhY2siLCJwYXJlbnRDaHVua0xvYWRpbmdGdW5jdGlvbiIsIm1vcmVNb2R1bGVzIiwicnVudGltZSIsInNvbWUiLCJjaHVua0xvYWRpbmdHbG9iYWwiLCJiaW5kIiwibmMiLCJfX3dlYnBhY2tfZXhwb3J0c19fIl0sInNvdXJjZVJvb3QiOiIifQ==