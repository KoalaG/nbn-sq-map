/*! For license information please see app.d1060ddd63dc5e53819c.js.LICENSE.txt */
(()=>{"use strict";var e,t={609:(e,t,n)=>{const r=function(){function e(){}return e.prototype.fetchPage=function(e,t,n){return void 0===t&&(t=1),void 0===n&&(n=function(){return!0}),r=this,o=void 0,a=function(){var r,o,i,a,s;return function(e,t){var n,r,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(s){return function(l){return function(s){if(n)throw new TypeError("Generator is already executing.");for(;i&&(i=0,s[0]&&(a=0)),a;)try{if(n=1,r&&(o=2&s[0]?r.return:s[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,s[1])).done)return o;switch(r=0,o&&(s=[2&s[0],o.value]),s[0]){case 0:case 1:o=s;break;case 4:return a.label++,{value:s[1],done:!1};case 5:a.label++,r=s[1],s=[0];continue;case 7:s=a.ops.pop(),a.trys.pop();continue;default:if(!((o=(o=a.trys).length>0&&o[o.length-1])||6!==s[0]&&2!==s[0])){a=0;continue}if(3===s[0]&&(!o||s[1]>o[0]&&s[1]<o[3])){a.label=s[1];break}if(6===s[0]&&a.label<o[1]){a.label=o[1],o=s;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(s);break}o[2]&&a.ops.pop(),a.trys.pop();continue}s=t.call(e,a)}catch(e){s=[6,e],r=0}finally{n=o=0}if(5&s[0])throw s[1];return{value:s[0]?s[1]:void 0,done:!0}}([s,l])}}}(this,(function(l){switch(l.label){case 0:if(r=e.getNorth().toFixed(2),o=e.getWest().toFixed(2),!n())throw new Error("Proceed function returned false. Stopping fetch.");return i=new URLSearchParams(window.location.search),a=i.get("apiServer")||"https://api.lip.net.au",t=Math.max(1,Number(t)),s="".concat(a,"/nbn-bulk/map/").concat(r,"/").concat(o,"?page=").concat(t),[4,new Promise((function(e,t){fetch(s,{method:"GET",redirect:"follow"}).then((function(e){return e.text()})).then((function(t){var n=JSON.parse(t);e(n.data)})).catch(t)}))];case 1:return[2,l.sent()]}}))},new((i=void 0)||(i=Promise))((function(e,t){function n(e){try{l(a.next(e))}catch(e){t(e)}}function s(e){try{l(a.throw(e))}catch(e){t(e)}}function l(t){var r;t.done?e(t.value):(r=t.value,r instanceof i?r:new i((function(e){e(r)}))).then(n,s)}l((a=a.apply(r,o||[])).next())}));var r,o,i,a},e}();n(623);var o=n(243),i=(n(664),n(687),n(634),n(817)),a=(n(732),n(256),function(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,o,i=n.call(e),a=[];try{for(;(void 0===t||t-- >0)&&!(r=i.next()).done;)a.push(r.value)}catch(e){o={error:e}}finally{try{r&&!r.done&&(n=i.return)&&n.call(i)}finally{if(o)throw o.error}}return a}),s=function(e,t,n){if(n||2===arguments.length)for(var r,o=0,i=t.length;o<i;o++)!r&&o in t||(r||(r=Array.prototype.slice.call(t,0,o)),r[o]=t[o]);return e.concat(r||Array.prototype.slice.call(t))},l=function(){function e(e){this.name=e}return e.prototype.sub=function(t){return new e("".concat(this.name,".").concat(t))},e.prototype.error=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];console.error.apply(console,s(["[".concat(this.name,"]")],a(e),!1))},e.prototype.warn=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];console.warn.apply(console,s(["[".concat(this.name,"]")],a(e),!1))},e.prototype.debug=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];c()&&console.debug.apply(console,s(["[".concat(this.name,"]")],a(e),!1))},e.prototype.info=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];console.info.apply(console,s(["[".concat(this.name,"]")],a(e),!1))},e.prototype.log=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];console.log.apply(console,s(["[".concat(this.name,"]")],a(e),!1))},e}();function c(){return window.location.href.includes("localhost")||window.location.href.includes("debug=true")}var u=function(e,t,n,r){return new(n||(n=Promise))((function(o,i){function a(e){try{l(r.next(e))}catch(e){i(e)}}function s(e){try{l(r.throw(e))}catch(e){i(e)}}function l(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,s)}l((r=r.apply(e,t||[])).next())}))},p=function(e,t){var n,r,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(s){return function(l){return function(s){if(n)throw new TypeError("Generator is already executing.");for(;i&&(i=0,s[0]&&(a=0)),a;)try{if(n=1,r&&(o=2&s[0]?r.return:s[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,s[1])).done)return o;switch(r=0,o&&(s=[2&s[0],o.value]),s[0]){case 0:case 1:o=s;break;case 4:return a.label++,{value:s[1],done:!1};case 5:a.label++,r=s[1],s=[0];continue;case 7:s=a.ops.pop(),a.trys.pop();continue;default:if(!((o=(o=a.trys).length>0&&o[o.length-1])||6!==s[0]&&2!==s[0])){a=0;continue}if(3===s[0]&&(!o||s[1]>o[0]&&s[1]<o[3])){a.label=s[1];break}if(6===s[0]&&a.label<o[1]){a.label=o[1],o=s;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(s);break}o[2]&&a.ops.pop(),a.trys.pop();continue}s=t.call(e,a)}catch(e){s=[6,e],r=0}finally{n=o=0}if(5&s[0])throw s[1];return{value:s[0]?s[1]:void 0,done:!0}}([s,l])}}},d=function(){function e(e,t,n){this.logger=new l("MarkerLayerCluster"),this.pointMap=new Map,this.map=e,this.placeStore=n,this.modeHandler=t,this.markers=new o.MarkerClusterGroup({maxClusterRadius:this.markerClusterRadius,spiderfyOnMaxZoom:!1,disableClusteringAtZoom:18,showCoverageOnHover:!0,zoomToBoundsOnClick:!0,removeOutsideVisibleBounds:!0,iconCreateFunction:this.iconCreateFunction,chunkedLoading:!0,chunkInterval:150,chunkDelay:150,chunkProgress:function(e,t,n){console.log("chunkProgress",{processed:e,total:t,elapsed:n})}}),this.markers.addTo(this.map),this.map.on("zoomend",(function(e){console.log("zoomend",e.target.getZoom())}))}return e.prototype.addPoints=function(e){var t=this,n=this.logger.sub("addPoints"),r=[];e.forEach((function(e){var n=e.lat+","+e.lng,o=t.pointMap.get(n);if(o)o.point=e;else{var i=t.renderPoint(e);r.push(i),t.pointMap.set(n,{layer:i,point:e})}})),n.debug("Adding new layers",r.length),r.length&&this.markers.addLayers(r)},e.prototype.removeAllPoints=function(){this.logger.sub("removeAllPoints").debug("Removing all points",this.pointMap),this.markers.clearLayers(),this.pointMap.clear(),this.logger.sub("removeAllPoints").debug("Removed all points",this.pointMap)},e.prototype.removeAllMarkers=function(){return u(this,void 0,void 0,(function(){return p(this,(function(e){return this.removeAllPoints(),[2]}))}))},e.prototype.markerClusterRadius=function(e){switch(e){case 0:case 1:case 2:case 3:case 4:case 5:case 6:case 7:case 8:case 9:case 10:case 11:case 12:case 13:return 150;case 14:return 100;default:return 0}},e.prototype.updatePointStyle=function(e,t){t.setStyle({fillColor:this.modeHandler.placeColour(e[0])}),t.setTooltipContent(this.modeHandler.renderTooltip(e)),t.redraw()},e.prototype.setModeHandler=function(e,t){return this.modeHandler=e,this},e.prototype.DEP_refreshMarkersInsideBounds=function(e,t){return u(this,void 0,void 0,(function(){return p(this,(function(e){return[2]}))}))},e.prototype.removeMarkersOutsideBounds=function(e){return u(this,void 0,void 0,(function(){return p(this,(function(e){return[2]}))}))},e.prototype.renderPoint=function(e){var t=this,n=o.circleMarker([e.lat,e.lng],{radius:5,fillColor:e.col?e.col[0]:void 0,color:"#000000",weight:1,opacity:1,fillOpacity:.8});return n.bindPopup((function(n){t.placeStore.getPlaces(e.ids).then((function(e){var r=t.renderPopup(e);n.setPopupContent(r)}));var r=document.createElement("div");return r.innerHTML='<div class="loading">Loading...</div>',r}),{autoPan:!0,autoClose:!1}),n.bindTooltip((function(t){var n=e.add[0];return e.add.length>1&&(n+=" ( + "+(e.add.length-1)+" more)"),n}),{}),n},e.prototype.renderPopup=function(e){return 1==e.length?this.modeHandler.renderPopupContent(e[0]):this.rendorPopupMulti(e)},e.prototype.rendorPopupMulti=function(e){var t,n,r=document.createElement("div"),o=[];e.sort((function(e,t){return e.address1<t.address1?-1:e.address1>t.address1?1:0}));var i=function(e){var t=document.createElement("div"),n=a.modeHandler.placeColour(e),i=document.createElement("button");i.classList.add("accordion"),i.type="button",i.innerHTML='<svg height="15" width="15" style="margin-right:3px">'+'<circle class="circle" cx="7.5" cy="9" r="5" stroke="#000" stroke-width="1" fill="'.concat(n,'" />')+"</svg>"+"<span>".concat(e.address1,"</span>");var s=document.createElement("div");s.classList.add("panel"),s.appendChild(a.modeHandler.renderPopupContent(e)),i.addEventListener("click",(function(){var e=t.classList.contains("active");o.forEach((function(e){e.classList.remove("active")})),e||t.classList.add("active")})),t.appendChild(i),t.appendChild(s),r.appendChild(t),o.push(t)},a=this;try{for(var s=function(e){var t="function"==typeof Symbol&&Symbol.iterator,n=t&&e[t],r=0;if(n)return n.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&r>=e.length&&(e=void 0),{value:e&&e[r++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")}(e),l=s.next();!l.done;l=s.next())i(l.value)}catch(e){t={error:e}}finally{try{l&&!l.done&&(n=s.return)&&n.call(s)}finally{if(t)throw t.error}}return r},e.prototype.iconCreateFunction=function(e){var t=e.getAllChildMarkers().map((function(e){return e.options.fillColor})),n={};t.forEach((function(e){n[e]||(n[e]=0),n[e]++}));var r=Object.keys(n).sort((function(e,t){return n[t]-n[e]})),i="background: conic-gradient(",a=0;r.forEach((function(e,r){0==r&&(i+="\n"+e+" 0%");var o=n[e]/t.length*100;i+=", \n"+e+" "+a+"%",i+=", \n"+e+" "+(a+o)+"%",a+=o})),i+="\n);";var s=Math.random().toString(36).substring(7);return o.divIcon({html:"<style>#cluster_".concat(s,"::before { ").concat(i," }</style> <div id='cluster_").concat(s,"'><span>")+e.getChildCount()+"</span></div>",className:"marker-cluster"})},e}();const h=d;var f=function(){return f=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e},f.apply(this,arguments)},g=function(e,t,n,r){return new(n||(n=Promise))((function(o,i){function a(e){try{l(r.next(e))}catch(e){i(e)}}function s(e){try{l(r.throw(e))}catch(e){i(e)}}function l(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,s)}l((r=r.apply(e,t||[])).next())}))},m=function(e,t){var n,r,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(s){return function(l){return function(s){if(n)throw new TypeError("Generator is already executing.");for(;i&&(i=0,s[0]&&(a=0)),a;)try{if(n=1,r&&(o=2&s[0]?r.return:s[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,s[1])).done)return o;switch(r=0,o&&(s=[2&s[0],o.value]),s[0]){case 0:case 1:o=s;break;case 4:return a.label++,{value:s[1],done:!1};case 5:a.label++,r=s[1],s=[0];continue;case 7:s=a.ops.pop(),a.trys.pop();continue;default:if(!((o=(o=a.trys).length>0&&o[o.length-1])||6!==s[0]&&2!==s[0])){a=0;continue}if(3===s[0]&&(!o||s[1]>o[0]&&s[1]<o[3])){a.label=s[1];break}if(6===s[0]&&a.label<o[1]){a.label=o[1],o=s;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(s);break}o[2]&&a.ops.pop(),a.trys.pop();continue}s=t.call(e,a)}catch(e){s=[6,e],r=0}finally{n=o=0}if(5&s[0])throw s[1];return{value:s[0]?s[1]:void 0,done:!0}}([s,l])}}},v=function(){function e(t){var n=this;this.MAX_UNFETCHED_BOXES=100,this.logger=new l("NbnTechMap"),this.initialViewSet=!1,this.debugBoxes=[],this.fetchedBoxes=new Set,this.progressControl=new o.Control({position:"bottomleft"}),this.progressItems={},this.controls={},t=f(f({},e.DEFAULT_OPTIONS),t),this.api=t.api,this.placeStore=t.placestore,this.modeHandler=t.defaultModeHandler,this.map=o.map(t.mapContainerId,{preferCanvas:!0}),this.markerLayer=new h(this.map,this.modeHandler,this.placeStore),this.mapTileLayer=o.tileLayer("https://{s}.basemaps.cartocdn.com/rastertiles/voyager/{z}/{x}/{y}{r}.png",{attribution:'&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors &copy; <a href="https://carto.com/attributions">CARTO</a>',subdomains:"abcd",crossOrigin:!0,minZoom:5,maxZoom:20}),this.mapTileLayer.addTo(this.map),console.log({L:o,Geocoder:i.Ms,geocoder:i.yK});var r=new i.d2.ArcGis({apiKey:"AAPKa97b8a5374db4fa9b0fdd8e55361cba4Z9fEuw3ckAOIFHK1CP_VbzTv3OTeUz3ggrFAzVPzjyn3Q7bQFzbwkDMvDxaJ-JzG",geocodingQueryParams:{countryCode:"AU",category:"Address,LatLong,Neighborhood,District,City,Metro Area"}});this.mapSearch=o.Control.geocoder({position:"topleft",collapsed:!0,defaultMarkGeocode:!1,geocoder:r,suggestMinLength:5,suggestTimeout:1e3}),this.mapSearch.on("markgeocode",(function(e){var t=e.geocode.bbox;n.map.fitBounds(t,{maxZoom:16})})),this.mapSearch.addTo(this.map),this.mapLocate=o.control.locate({position:"topleft",locateOptions:{maxZoom:16},setView:"untilPan",keepCurrentZoomLevel:!0,initialZoomLevel:17,cacheLocation:!0}),this.mapLocate.addTo(this.map),this.map.on("locateactivate",(function(){localStorage.setItem("geolocate","1")})),this.map.on("locatedeactivate",(function(){localStorage.removeItem("geolocate")})),this.setInitialMapView(),this.map.on("moveend",(function(){return g(n,void 0,void 0,(function(){var e,t;return m(this,(function(n){return e=this.map.getCenter(),t=this.map.getZoom(),localStorage.setItem("startpos",JSON.stringify({lat:e.lat,lng:e.lng,zoom:t})),this.pushBrowserHistory(),r.options.geocodingQueryParams&&(r.options.geocodingQueryParams.location="".concat(e.lng,",").concat(e.lat)),this.fetchDataForCurrentView(),[2]}))}))})),this.fetchDataForCurrentView(),window.addEventListener("popstate",(function(){var e=new URLSearchParams(window.location.search),t=e.get("lat"),r=e.get("lng"),o=e.get("zoom");t&&r&&o&&(n.map.setView([Number(t),Number(r)],parseInt(o)),n.initialViewSet=!0)}))}return e.prototype.pushBrowserHistory=function(){var e=this.map.getCenter(),t=this.map.getZoom(),n=new URLSearchParams(window.location.search);n.set("lat",e.lat.toString()),n.set("lng",e.lng.toString()),n.set("zoom",t.toString());var r=window.location.pathname+"?"+n.toString();window.history.pushState({},"",r)},e.prototype.getStartPos=function(){var e=localStorage.getItem("startpos");if(!e)return null;try{return JSON.parse(e)}catch(e){return null}},e.prototype.setInitialMapView=function(){var e=this.logger.sub("setInitialMapView");if(this.initialViewSet)e.warn("Initial map view already set");else{var t=new URLSearchParams(window.location.search),n=t.get("lat"),r=t.get("lng"),o=t.get("zoom");if(n&&r&&o)return this.map.setView([Number(n),Number(r)],parseInt(o)),void(this.initialViewSet=!0);var i=localStorage.getItem("geolocate"),a=this.getStartPos();a&&(this.map.setView([a.lat,a.lng],a.zoom),this.initialViewSet=!0),a||(this.map.setView([-26.1772288,133.4170119],10),this.initialViewSet=!0),!i&&a||(this.mapLocate.start(),this.map.setZoom(17),this.initialViewSet=!0),this.initialViewSet||e.error("Could not set initial map view")}},e.prototype.getBoxesInBounds=function(e){for(var t=this,n=.02*Math.ceil(e.getNorth()/.02),r=.02*Math.floor(e.getWest()/.02),i=[],a=n;a>e.getSouth();a-=.02)for(var s=r;s<e.getEast();s+=.02)i.push([Number(a.toFixed(2)),Number(s.toFixed(2))]);c()&&(console.log("Bounds",e),console.log("Boxes",i));var l=i.map((function(e){var t=e[0],n=e[1],r=t-.02,i=n+.02;return o.latLngBounds([r,n],[t,i])}));return c()&&(this.debugBoxes.forEach((function(e){return t.map.removeLayer(e)})),this.debugBoxes=l.map((function(e){return o.rectangle(e,{color:"#000000",weight:2,fillColor:"#ff7800",fillOpacity:.01}).addTo(t.map)}))),l},e.prototype.getCurrentViewBoxes=function(){return this.getBoxesInBounds(this.map.getBounds())},e.prototype.hideMarkersOutsideCurrentView=function(){var e=this.map.getBounds().pad(.5);this.markerLayer.removeMarkersOutsideBounds(e)},e.prototype.DEP_displayMarkersInCurrentView=function(e){return void 0===e&&(e=1),g(this,void 0,void 0,(function(){return m(this,(function(e){return[2]}))}))},e.prototype.showZoomInWarning=function(){var e=this;this.zoomInWarningControl||(this.zoomInWarningControl=new o.Control({position:"topright"}),this.zoomInWarningControl.onAdd=function(){var e=o.DomUtil.create("div","info legend");return e.innerHTML='<h4 style="margin:0">Area Too Big!</h4>',e.innerHTML+='<p style="margin:0">Location loading is paused until you zoom in.</p>',e.style.backgroundColor="#ff9800",e.style.opacity="0.8",e.style.padding="10px 20px",e.style.color="#ffffff",e});var t=this.zoomInWarningControl;setTimeout((function(){return e.map.addControl(t)}),1e3)},e.prototype.hideZoomInWarning=function(){this.zoomInWarningControl&&this.map.removeControl(this.zoomInWarningControl)},e.prototype.fetchDataForCurrentView=function(){return g(this,void 0,void 0,(function(){var e,t,n,r,o,i,a,s,l,c,u,p,d=this;return m(this,(function(h){switch(h.label){case 0:if(e=this.logger.sub("fetchDataForCurrentView"),this.map.getZoom()<11)return e.warn("Zoom level too low. Skipping."),this.showZoomInWarning(),[2];if(t=this.getCurrentViewBoxes(),e.debug("Current view boxes",t),n=t.filter((function(e){return!d.fetchedBoxes.has(e.getCenter().toString())})),0==n.length)return this.hideZoomInWarning(),[2];if(n.length>this.MAX_UNFETCHED_BOXES)return e.warn("Too many boxes to fetch. Skipping."),this.showZoomInWarning(),[2];this.hideZoomInWarning(),r=this.map.getCenter().toString()+this.map.getZoom(),o=this.createProgress(r,n.length,"Fetching sections..."),this.renderProgress(),i=0,h.label=1;case 1:h.trys.push([1,6,7,8]),a=function(e){var t="function"==typeof Symbol&&Symbol.iterator,n=t&&e[t],r=0;if(n)return n.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&r>=e.length&&(e=void 0),{value:e&&e[r++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")}(n),s=a.next(),h.label=2;case 2:return s.done?[3,5]:(l=s.value,this.map.getCenter().toString()+this.map.getZoom()!=r?(e.debug("Map moved. Fetch stopped."),o.text="Map moved. Fetch stopped.",this.updateProgress(r,i,!0),[2]):[4,this.fetchData(l)]);case 3:h.sent(),this.fetchedBoxes.add(l.getCenter().toString()),i++,this.updateProgress(r,i,!1),h.label=4;case 4:return s=a.next(),[3,2];case 5:return[3,8];case 6:return c=h.sent(),u={error:c},[3,8];case 7:try{s&&!s.done&&(p=a.return)&&p.call(a)}finally{if(u)throw u.error}return[7];case 8:return this.updateProgress(r,i,!0),e.debug("All boxes fetched"),[2]}}))}))},e.prototype.createProgress=function(e,t,n){return this.progressItems[e]={started:new Date,finished:void 0,complete:!1,progress:0,total:t,text:n},this.progressItems[e]},e.prototype.updateProgress=function(e,t,n){if(!this.progressItems[e])throw new Error("Progress item with key ".concat(e," does not exist"));this.progressItems[e].finished=n?new Date:void 0,this.progressItems[e].complete=n,this.progressItems[e].progress=t,this.renderProgress()},e.prototype.renderProgress=function(){for(var e=this,t=new Date,n=Object.keys(this.progressItems),r=0;r<n.length;r++){var i=n[r];if(this.progressItems[i]){var a=this.progressItems[i].finished;a&&t.getTime()-a.getTime()>5e3&&delete this.progressItems[i]}}0!=Object.keys(this.progressItems).length?(this.progressControl.onAdd=function(){var t=o.DomUtil.create("div","info legend");t.innerHTML='<h4 style="margin:0">Loading...</h4>';for(var n=Object.values(e.progressItems),r=0;r<n.length;r++){var i=n[r];if(!(i.finished&&(new Date).getTime()-i.finished.getTime()>1e4)){var a=i.progress/i.total*100,s=i.complete?"Complete":"".concat(i.progress," of ").concat(i.total);t.innerHTML+='<p style="margin:0">'.concat(i.text," (").concat(s,")</p>"),t.innerHTML+='<progress value="'.concat(a,'" max="100"></progress>')}}return t.style.backgroundColor="#000000",t.style.opacity="0.8",t.style.padding="10px 20px",t.style.color="#ffffff",t},this.map.addControl(this.progressControl),setTimeout((function(){Object.values(e.progressItems).every((function(e){return e.complete}))&&e.hideProgress()}),5e3)):this.hideProgress()},e.prototype.hideProgress=function(){this.map.removeControl(this.progressControl)},e.prototype.fetchData=function(e,t){return void 0===t&&(t=1),g(this,void 0,void 0,(function(){var n,r,o=this;return m(this,(function(i){switch(i.label){case 0:this.logger.sub("fetchData").debug("Fetching Box",e.getCenter().toString(),t),i.label=1;case 1:return i.trys.push([1,5,,6]),[4,this.api.fetchPage(e,t,(function(){return o.map.getBounds().intersects(e)}))];case 2:return n=i.sent(),this.processFetchResult(n,e),n.next?[4,this.fetchData(e,n.next)]:[3,4];case 3:return[2,i.sent()];case 4:return[2];case 5:return"Page already loaded this session."==(r=i.sent()).message?[2]:(console.error(r),[3,6]);case 6:return[2]}}))}))},e.prototype.processFetchResult=function(e,t){var n=this.logger.sub("processFetchResult");n.debug("Processing Fetch Result",e,t),this.placeStore.storePlaces(e.places);for(var r=new Map,o=0;o<e.places.length;o++){var i=e.places[o];if(this.modeHandler.filter(i)){var a="".concat(i.latitude,",").concat(i.longitude),s=this.modeHandler.placeColour(i),l=r.get(a);l?l.ids.includes(i.locid)||(l.ids.push(i.locid),l.add.push(i.address1),l.col.push(s)):r.set(a,{lat:i.latitude,lng:i.longitude,col:[s],add:[i.address1],ids:[i.locid]})}}n.debug("Adding points to marker layer",r),this.markerLayer.addPoints(r)},e.prototype.DEPR_refreshPointsFromStore=function(e){return g(this,void 0,void 0,(function(){return m(this,(function(t){if(!this.markerLayer)throw new Error("Marker Layer not set");return e||(console.log("Bounds not passed. Using map bounds."),e=this.map.getBounds()),e=function(e){var t=Math.ceil(50*e.getNorth())/50,n=Math.floor(25*e.getWest())/25,r=Math.floor(50*e.getSouth())/50,i=Math.ceil(25*e.getEast())/25;return o.latLngBounds([r,n],[t,i])}(e),[2]}))}))},e.prototype.addControl=function(e,t){if(this.controls[e])throw new Error("Control with key ".concat(e," already exists"));this.controls[e]=t,this.map.addControl(t.getControl()),console.log("Added control",e)},e.prototype.setModeHandler=function(e){var t,n;this.modeHandler=e,null===(t=this.markerLayer)||void 0===t||t.removeAllMarkers(),console.log("Current Fetched Boxes",this.fetchedBoxes),this.fetchedBoxes.clear(),console.log("Fetched Boxes Cleared",this.fetchedBoxes),null===(n=this.markerLayer)||void 0===n||n.setModeHandler(e,this.placeStore),this.fetchDataForCurrentView()},e.DEFAULT_OPTIONS={mapContainerId:"map"},e}();const y=v,b=function(){function e(){this.eventHandlers={},this.control=new o.Control}return e.prototype.on=function(e,t){this.eventHandlers[e]||(this.eventHandlers[e]=[]),this.eventHandlers[e].push(t)},e.prototype.emit=function(e,t){var n=this;console.debug("Emitting event: ".concat(e),{data:t,handlers:this.eventHandlers[e]}),this.eventHandlers[e]&&this.eventHandlers[e].forEach((function(r){return r({name:e,state:n.getState(),data:t})}))},e.prototype.getControl=function(){return this.control},e}();var w,C=(w=function(e,t){return w=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])},w(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function n(){this.constructor=e}w(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});const T=function(e){function t(){var t=e.call(this)||this;return t.displayMode="all",t.elControlDiv=document.createElement("div"),t.elDropdown=document.createElement("select"),t.allLabel=null,t.allRadio=null,t.allText=null,t.upgradeLabel=null,t.upgradeRadio=null,t.upgradeText=null,t.eeLabel=null,t.eeRadio=null,t.eeText=null,t.generateControlDiv(),t.control.onAdd=function(e){return t.generateDropdown(),t.elControlDiv},t}return C(t,e),t.prototype.getState=function(){return this.displayMode},t.prototype.changeMode=function(e){this.displayMode=e,this.emit("change",e)},t.prototype.generateControlDiv=function(){this.elControlDiv&&console.warn("ControlDiv already exists"),this.elControlDiv.classList.add("info","legend"),this.elControlDiv.style.backgroundColor="#ffffff",this.elControlDiv.style.opacity="0.8",this.elControlDiv.style.padding="5px",this.elControlDiv.style.borderRadius="5px"},t.prototype.generateDropdown=function(){var e=this;this.elDropdown&&console.warn("Dropdown already exists");var t=this.elDropdown;t.classList.add("control-select");var n=document.createElement("option");n.value="all",n.innerText="Show All Locations",t.appendChild(n);var r=document.createElement("option");r.value="upgrade",r.innerText="Tech Upgrades",t.appendChild(r);var o=document.createElement("option");o.value="ee",o.innerText="Enterprise Ethernet",t.appendChild(o),t.addEventListener("change",(function(t){return e.changeMode(t.target.value)})),this.elDropdown=t,this.elControlDiv.appendChild(t)},t}(b);var S="#1D7044",x="#75AD6F",E="#C8E3C5",P="#FFBE00",M="#FF7E01",L="#E3071D",k="#02B9E3",D="#022BE3",F="#6B02E3",B="#888888";function H(e){switch(e){case"FTTP":return S;case"FTTC":return M;case"FTTN":case"FTTB":return L;case"HFC":return P;case"WIRELESS":return k;case"SATELLITE":return F}return B}const I=function(){function e(){}return e.prototype.filter=function(e){return!0},e.prototype.pointColour=function(e){return this.placeColour(e.places[0])},e.prototype.placeColour=function(e){return function(e){return"FTTP"===e.techType}(e)?S:function(e){return!(!e.altReasonCode||!e.altReasonCode.match(/^FTTP/)||"Eligible To Order"!==e.techChangeStatus)}(e)?x:function(e){if(e.altReasonCode&&e.altReasonCode.match(/^FTTP/))switch(e.techChangeStatus){case"In Design":case"Build Finalised":case"Planned":case"MDU Complex Eligible To Apply":case"MDU Complex Premises In Build":return!0}return!1}(e)?E:function(e){if(e.altReasonCode&&e.altReasonCode.match(/^FTTP/)&&"Committed"===e.techChangeStatus)return!0}(e)?H(e.techType):function(e){return!("FTTC"!=e.techType||!e.reasonCode||!e.reasonCode.match(/^FTTC/)||"New Tech Connected"!=e.techChangeStatus)}(e)?M:function(e){return"FTTC"==e.techType&&"FTTC_SA"==e.reasonCode&&"FW_CT"==e.altReasonCode&&"Eligible To Order"==e.techChangeStatus}(e)?"#FF7E01":function(e){return"FTTN"==e.techType&&"FTTN_SA"==e.reasonCode&&"FW_CT"==e.altReasonCode&&"Eligible To Order"==e.techChangeStatus}(e)?L:function(e){return"WIRELESS"==e.techType&&"FW_SA"==e.reasonCode&&"Eligible To Order"==e.techChangeStatus}(e)?D:(e.altReasonCode&&"NULL_NA"!=e.altReasonCode&&console.log(e),H(e.techType))},e.prototype.renderPopupContent=function(e){var t=o.DomUtil.create("div");if(t.innerHTML="<b>"+e.locid+"</b></br>"+e.address1+"</br>"+e.address2+"</br><br />",t.innerHTML+="<b>Technology Plan</b></br>","FTTP"!=e.techType&&e.altReasonCode&&"NULL_NA"!=e.altReasonCode?(e.altReasonCode&&e.altReasonCode.match(/^FTTP/),t.innerHTML+="Current: "+e.techType+"<br />",t.innerHTML+="Change: "+e.altReasonCode+"<br />",t.innerHTML+="Status: "+e.techChangeStatus+"<br />",t.innerHTML+="Program: "+e.programType+"<br />",t.innerHTML+="Target Qtr: "+e.targetEligibilityQuarter+"<br />"):(t.innerHTML+="Technology: "+e.techType+"<br />","FTTP"!=e.techType&&(t.innerHTML+="No tech upgrade planned<br />")),t.innerHTML+="<br />",e.ee&&(t.innerHTML+="<b>Enterprise Ethernet</b></br>",t.innerHTML+="Price Zone: "+(e.cbdpricing?"CBD":"Zone 1/2/3")+"<br />",t.innerHTML+="Build Cost: "+(e.zeroBuildCost?"$0":"POA")+"<br />",t.innerHTML+="<br />"),c()){var n=o.DomUtil.create("hr"),r=o.DomUtil.create("pre");r.innerHTML=JSON.stringify(e,null,2),t.appendChild(n),t.appendChild(r)}return t},e.prototype.renderTooltip=function(e){var t=e[0].address1;return e.length>1&&(t+=" ( + "+(e.length-1)+" more)"),t},e.prototype.getLegendItems=function(){return[{label:"FTTP",colour:S},{label:"FTTP Upgrade",colour:x},{label:"FTTP Upgrade Soon",colour:E},{label:"HFC",colour:P},{label:"FTTC",colour:M},{label:"FTTN/FTTB",colour:L},{label:"FW",colour:k},{label:"FW Upgrade",colour:D},{label:"Satellite",colour:F},{label:"Unknown",colour:B}]},e}();var O=function(){var e=function(t,n){return e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])},e(t,n)};return function(t,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}();const A=function(e){function t(){var t=e.call(this)||this;return t.elControlDiv=document.createElement("div"),t.control.setPosition("bottomright"),t.elControlDiv.classList.add("info","legend"),t.elControlDiv.style.backgroundColor="#ffffff",t.elControlDiv.style.opacity="0.8",t.elControlDiv.style.padding="5px",t.elControlDiv.style.borderRadius="5px",t.control.onAdd=function(e){return t.elControlDiv},t}return O(t,e),t.prototype.getState=function(){},t.prototype.updateLegend=function(e){var t="";e.forEach((function(e){t+='<svg height="10" width="10"><circle cx="5" cy="5" r="5" fill="'+e.colour+'" stroke="#000000" stroke-width="1" opacity="1" fill-opacity="0.8" /></svg> '+e.label,e.count&&(t+=" ("+e.count+")"),t+="<br>"})),this.elControlDiv.innerHTML=t},t}(b);n.p,n.p,n.p;var R=n(269),U=function(e,t,n,r){return new(n||(n=Promise))((function(o,i){function a(e){try{l(r.next(e))}catch(e){i(e)}}function s(e){try{l(r.throw(e))}catch(e){i(e)}}function l(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,s)}l((r=r.apply(e,t||[])).next())}))},N=function(e,t){var n,r,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(s){return function(l){return function(s){if(n)throw new TypeError("Generator is already executing.");for(;i&&(i=0,s[0]&&(a=0)),a;)try{if(n=1,r&&(o=2&s[0]?r.return:s[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,s[1])).done)return o;switch(r=0,o&&(s=[2&s[0],o.value]),s[0]){case 0:case 1:o=s;break;case 4:return a.label++,{value:s[1],done:!1};case 5:a.label++,r=s[1],s=[0];continue;case 7:s=a.ops.pop(),a.trys.pop();continue;default:if(!((o=(o=a.trys).length>0&&o[o.length-1])||6!==s[0]&&2!==s[0])){a=0;continue}if(3===s[0]&&(!o||s[1]>o[0]&&s[1]<o[3])){a.label=s[1];break}if(6===s[0]&&a.label<o[1]){a.label=o[1],o=s;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(s);break}o[2]&&a.ops.pop(),a.trys.pop();continue}s=t.call(e,a)}catch(e){s=[6,e],r=0}finally{n=o=0}if(5&s[0])throw s[1];return{value:s[0]?s[1]:void 0,done:!0}}([s,l])}}},_=function(){function e(){var e=this;this.DB_NAME="nsm-placestore",this.logger=new l("IndexDBPlaceStore"),this.logger.info("Setting up database..."),(0,R.X3)(this.DB_NAME,1,{upgrade:function(e,t,n,r,o){e.objectStoreNames.contains("nbnPlaceStore")||e.createObjectStore("nbnPlaceStore",{keyPath:"locid"})},blocked:function(t,n,r){e.logger.warn("Database blocked!",{currentVersion:t,blockedVersion:n,event:r})},blocking:function(t,n,r){e.logger.warn("Database blocking!",{currentVersion:t,blockedVersion:n,event:r})},terminated:function(){e.logger.warn("Database terminated!")}}).then((function(t){e.db=t,e.logger.info("Database ready!")})).catch((function(t){e.logger.error("Failed to open database: ",t)})).finally((function(){e.logger.info("Database setup complete.")}))}return e.prototype.isReady=function(){return!!this.db},e.prototype.waitUntilReady=function(e){return U(this,void 0,void 0,(function(){var t=this;return N(this,(function(n){return[2,new Promise((function(n,r){var o=Date.now(),i=setInterval((function(){var a=Date.now()-o;t.isReady()?(clearInterval(i),n()):a>1e3*e&&(clearInterval(i),r(new Error("Database not ready after ".concat(e," seconds."))))}),100)}))]}))}))},e.prototype.storePlace=function(e){return U(this,void 0,void 0,(function(){return N(this,(function(t){switch(t.label){case 0:return[4,this.getDb()];case 1:return[4,t.sent().put("nbnPlaceStore",e)];case 2:return t.sent(),[2]}}))}))},e.prototype.storePlaces=function(e){return U(this,void 0,void 0,(function(){var t,n,r;return N(this,(function(o){switch(o.label){case 0:return[4,this.getDb()];case 1:return t=o.sent(),n=t.transaction(["nbnPlaceStore"],"readwrite",{durability:"relaxed"}),r=n.objectStore("nbnPlaceStore"),[4,e.map((function(e){return r.put(e)}))];case 2:return o.sent(),[4,n.done];case 3:return o.sent(),[2]}}))}))},e.prototype.getPlace=function(e){return U(this,void 0,void 0,(function(){return N(this,(function(t){switch(t.label){case 0:return[4,this.getDb()];case 1:return[4,t.sent().get("nbnPlaceStore",e)];case 2:return[2,t.sent()]}}))}))},e.prototype.getPlaces=function(e){return U(this,void 0,void 0,(function(){var t,n,r,o;return N(this,(function(i){switch(i.label){case 0:return[4,this.getDb()];case 1:return t=i.sent(),n=t.transaction(["nbnPlaceStore"],"readonly"),r=n.objectStore("nbnPlaceStore"),[4,Promise.all(e.map((function(e){return r.get(e)})))];case 2:return o=i.sent(),[4,n.done];case 3:return i.sent(),[2,o.filter((function(e){return!!e}))]}}))}))},e.prototype.getDb=function(e){return void 0===e&&(e=5),U(this,void 0,void 0,(function(){return N(this,(function(t){switch(t.label){case 0:return[4,this.waitUntilReady(e)];case 1:if(t.sent(),!this.db)throw new Error("Database not ready.");return[2,this.db]}}))}))},e}(),z="#1D7044",V="#02B9E3",Z="#FFBE00",j="#FF7E01",W="#E3071D",G="#022BE3",Q="#6B02E3",J="#888888";const $=function(){function e(){}return e.prototype.filter=function(e){return"Not Planned"!=e.techChangeStatus&&!!e.techChangeStatus},e.prototype.pointColour=function(e){return this.placeColour(e.places[0])},e.prototype.placeColour=function(e){switch(e.techChangeStatus){case"Previous Tech Disconnected":case"New Tech Connected":return z;case"In Design":return j;case"Build Finalised":return Z;case"Committed":return W;case"Eligible To Order":return V;case"MDU Complex Eligible To Apply":return Q;case"MDU Complex Premises In Build":return G}return J},e.prototype.renderPopupContent=function(e){var t=o.DomUtil.create("div");if(t.innerHTML="<b>"+e.locid+"</b></br>"+e.address1+"</br>"+e.address2+"</br><br />",t.innerHTML+="<b>Technology Plan</b></br>","FTTP"!=e.techType&&e.altReasonCode&&"NULL_NA"!=e.altReasonCode?(e.altReasonCode&&e.altReasonCode.match(/^FTTP/),t.innerHTML+="Current: "+e.techType+"<br />",t.innerHTML+="Change: "+e.altReasonCode+"<br />",t.innerHTML+="Status: "+e.techChangeStatus+"<br />",t.innerHTML+="Program: "+e.programType+"<br />",t.innerHTML+="Target Qtr: "+e.targetEligibilityQuarter+"<br />"):(t.innerHTML+="Technology: "+e.techType+"<br />","FTTP"!=e.techType&&(t.innerHTML+="No tech upgrade planned<br />")),t.innerHTML+="<br />",c()){var n=o.DomUtil.create("hr"),r=o.DomUtil.create("pre");r.innerHTML=JSON.stringify(e,null,2),t.appendChild(n),t.appendChild(r)}return t},e.prototype.renderTooltip=function(e){var t=e[0].address1;return e.length>1&&(t+=" ( + "+(e.length-1)+" more)"),t},e.prototype.getLegendItems=function(){return[{label:"Previous Tech Disconnected",colour:z},{label:"New Tech Connected",colour:z},{label:"Eligible To Order",colour:V},{label:"Build Finalised",colour:Z},{label:"In Design",colour:j},{label:"Committed",colour:W},{label:"MDU Complex Eligible To Apply",colour:Q},{label:"MDU Complex Premises In Build",colour:G},{label:"Unknown",colour:J}]},e}();var X="#1D7044",K="#02B9E3",q="#FF7E01",Y="#E3071D",ee="#888888";const te=function(){function e(){}return e.prototype.filter=function(e){return e.ee},e.prototype.pointColour=function(e){return this.placeColour(e.places[0])},e.prototype.placeColour=function(e){return e.cbdpricing&&e.zeroBuildCost?X:e.cbdpricing&&!e.zeroBuildCost?K:!e.cbdpricing&&e.zeroBuildCost?q:e.cbdpricing||e.zeroBuildCost?ee:Y},e.prototype.renderPopupContent=function(e){var t=o.DomUtil.create("div");if(t.innerHTML="<b>"+e.locid+"</b></br>"+e.address1+"</br>"+e.address2+"</br><br />",t.innerHTML+="<b>Enterprise Ethernet</b></br>",t.innerHTML+="Price Zone: "+(e.cbdpricing?"CBD":"Zone 1/2/3")+"<br />",t.innerHTML+="Build Cost: "+(e.zeroBuildCost?"$0":"POA")+"<br />",t.innerHTML+="<br />",c()){var n=o.DomUtil.create("hr"),r=o.DomUtil.create("pre");r.innerHTML=JSON.stringify(e,null,2),t.appendChild(n),t.appendChild(r)}return t},e.prototype.renderTooltip=function(e){var t=e[0].address1;return e.length>1&&(t+=" ( + "+(e.length-1)+" more)"),t},e.prototype.getLegendItems=function(){return[{label:"EE CBD $0",colour:X},{label:"EE CBD POA",colour:K},{label:"EE Z123 $0",colour:q},{label:"EE Zone 1/2/3 POA",colour:Y},{label:"Unknown",colour:ee}]},e}();var ne,re=new l("index.ts"),oe=function(){try{return process.argv.includes("development")}catch(e){return!1}}();re.debug("isDevelopment",oe),"serviceWorker"in navigator&&!oe&&window.addEventListener("load",(function(){navigator.serviceWorker.register("./service-worker.js").then((function(e){re.info("SW registered: ",e)})).catch((function(e){re.warn("SW registration failed: ",e)}))})),ne=function(){var e=new r,t=new I,n=new $,o=new te,i=function(e){switch(e||(e=new URLSearchParams(window.location.search).get("mode")||localStorage.getItem("mode")||"all"),e){case"all":default:return t;case"upgrade":return n;case"ee":return o}},a=i(),s=new _,l=new y({mapContainerId:"map",api:e,defaultModeHandler:a,placestore:s}),c=new T;l.addControl("displaymode",c);var u=new A;u.updateLegend(a.getLegendItems()),l.addControl("legend",u),c.on("change",(function(e){var t=i(e.state);if(t){l.setModeHandler(t),u.updateLegend(t.getLegendItems()),localStorage.setItem("mode",e.state);var n=new URL(window.location.href);n.searchParams.set("mode",e.state),window.history.pushState({},"",n.toString())}}))},"complete"===document.readyState||"interactive"===document.readyState?setTimeout(ne,1):document.addEventListener("DOMContentLoaded",ne)},36:e=>{e.exports="data:image/svg+xml,%3Csvg xmlns=%27http://www.w3.org/2000/svg%27 stroke=%27%23000%27 stroke-linecap=%27round%27 stroke-width=%271.6%27 viewBox=%270 0 24 24%27%3E%3Cdefs/%3E%3Cg%3E%3Cpath stroke-opacity=%27.1%27 d=%27M14 8.4l3-5%27/%3E%3Cpath stroke-opacity=%27.2%27 d=%27M15.6 10l5-3%27/%3E%3Cpath stroke-opacity=%27.3%27 d=%27M16.2 12H22%27/%3E%3Cpath stroke-opacity=%27.4%27 d=%27M15.6 14l5 3m-6.5-1.4l2.9 5%27/%3E%3Cpath stroke-opacity=%27.5%27 d=%27M12 16.2V22m-2-6.4l-3 5%27/%3E%3Cpath stroke-opacity=%27.6%27 d=%27M8.4 14l-5 3%27/%3E%3Cpath stroke-opacity=%27.7%27 d=%27M7.8 12H2%27/%3E%3Cpath stroke-opacity=%27.8%27 d=%27M8.4 10l-5-3%27/%3E%3Cpath stroke-opacity=%27.9%27 d=%27M10 8.4l-3-5%27/%3E%3Cpath d=%27M12 7.8V2%27/%3E%3CanimateTransform attributeName=%27transform%27 calcMode=%27discrete%27 dur=%271s%27 repeatCount=%27indefinite%27 type=%27rotate%27 values=%270 12 12;30 12 12;60 12 12;90 12 12;120 12 12;150 12 12;180 12 12;210 12 12;240 12 12;270 12 12;300 12 12;330 12 12%27/%3E%3C/g%3E%3C/svg%3E"},585:e=>{e.exports="data:image/svg+xml,%3Csvg xmlns=%27http://www.w3.org/2000/svg%27 viewBox=%270 0 24 24%27%3E%3Cpath d=%27M12.2 13l3.4 6.6c.6 1.1 2.5-.4 2-1.2l-4-6.2z%27/%3E%3Ccircle cx=%2710.8%27 cy=%278.9%27 r=%273.9%27 fill=%27none%27 stroke=%27%23000%27 stroke-width=%271.5%27/%3E%3C/svg%3E"},539:e=>{e.exports='data:image/svg+xml;charset=UTF-8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><path fill="black" d="M304 48a48 48 0 1 1-96 0 48 48 0 0 1 96 0zm-48 368a48 48 0 1 0 0 96 48 48 0 0 0 0-96zm208-208a48 48 0 1 0 0 96 48 48 0 0 0 0-96zM96 256a48 48 0 1 0-96 0 48 48 0 0 0 96 0zm13 99a48 48 0 1 0 0 96 48 48 0 0 0 0-96zm294 0a48 48 0 1 0 0 96 48 48 0 0 0 0-96zM109 61a48 48 0 1 0 0 96 48 48 0 0 0 0-96z"/></svg>'},141:e=>{e.exports='data:image/svg+xml;charset=UTF-8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><path fill="black" d="M445 4 29 195c-48 23-32 93 19 93h176v176c0 51 70 67 93 19L508 67c16-38-25-79-63-63z"/></svg>'},478:e=>{e.exports='data:image/svg+xml;charset=UTF-8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><path fill="rgb%28252, 132, 40%29" d="M445 4 29 195c-48 23-32 93 19 93h176v176c0 51 70 67 93 19L508 67c16-38-25-79-63-63z"/></svg>'},38:e=>{e.exports='data:image/svg+xml;charset=UTF-8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><path fill="rgb%2832, 116, 182%29" d="M445 4 29 195c-48 23-32 93 19 93h176v176c0 51 70 67 93 19L508 67c16-38-25-79-63-63z"/></svg>'}},n={};function r(e){var o=n[e];if(void 0!==o)return o.exports;var i=n[e]={id:e,exports:{}};return t[e].call(i.exports,i,i.exports,r),i.exports}r.m=t,e=[],r.O=(t,n,o,i)=>{if(!n){var a=1/0;for(u=0;u<e.length;u++){for(var[n,o,i]=e[u],s=!0,l=0;l<n.length;l++)(!1&i||a>=i)&&Object.keys(r.O).every((e=>r.O[e](n[l])))?n.splice(l--,1):(s=!1,i<a&&(a=i));if(s){e.splice(u--,1);var c=o();void 0!==c&&(t=c)}}return t}i=i||0;for(var u=e.length;u>0&&e[u-1][2]>i;u--)e[u]=e[u-1];e[u]=[n,o,i]},r.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return r.d(t,{a:t}),t},r.d=(e,t)=>{for(var n in t)r.o(t,n)&&!r.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},r.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),r.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),(()=>{var e;r.g.importScripts&&(e=r.g.location+"");var t=r.g.document;if(!e&&t&&(t.currentScript&&(e=t.currentScript.src),!e)){var n=t.getElementsByTagName("script");if(n.length)for(var o=n.length-1;o>-1&&!e;)e=n[o--].src}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),r.p=e})(),(()=>{r.b=document.baseURI||self.location.href;var e={143:0};r.O.j=t=>0===e[t];var t=(t,n)=>{var o,i,[a,s,l]=n,c=0;if(a.some((t=>0!==e[t]))){for(o in s)r.o(s,o)&&(r.m[o]=s[o]);if(l)var u=l(r)}for(t&&t(n);c<a.length;c++)i=a[c],r.o(e,i)&&e[i]&&e[i][0](),e[i]=0;return r.O(u)},n=self.webpackChunk=self.webpackChunk||[];n.forEach(t.bind(null,0)),n.push=t.bind(null,n.push.bind(n))})(),r.nc=void 0;var o=r.O(void 0,[578],(()=>r(609)));o=r.O(o)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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b2FkZWQiLCJ3ZWJwYWNrOi8vLy4vc3JjL2FwaS9saXBfYXBpLmNsYXNzLnRzIiwid2VicGFjazovLy8uL3NyYy91dGlscy50cyIsIndlYnBhY2s6Ly8vLi9zcmMvbWFya2VybGF5ZXIvbWFya2VybGF5ZXIuY2x1c3Rlci5jbGFzcy50cyIsIndlYnBhY2s6Ly8vLi9zcmMvbmJuX3RlY2hfbWFwLmNsYXNzLnRzIiwid2VicGFjazovLy8uL3NyYy9jb250cm9scy9jb250cm9sLmFic3RyYWN0LnRzIiwid2VicGFjazovLy8uL3NyYy9jb250cm9scy9jb250cm9sX2Rpc3BsYXlfbW9kZS5jbGFzcy50cyIsIndlYnBhY2s6Ly8vLi9zcmMvbW9kZXMvbW9kZS5hbGwudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbnRyb2xzL2NvbnRyb2xfbGVnZW5kLmNsYXNzLnRzIiwid2VicGFjazovLy8uL3NyYy9wbGFjZXN0b3JlL2luZGV4ZGIucGxhY2VzdG9yZS50cyIsIndlYnBhY2s6Ly8vLi9zcmMvbW9kZXMvdGVjaHVwZ3JhZGUubW9kZS50cyIsIndlYnBhY2s6Ly8vLi9zcmMvbW9kZXMvZWUubW9kZS50cyIsIndlYnBhY2s6Ly8vLi9zcmMvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vL3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovLy93ZWJwYWNrL3J1bnRpbWUvY29tcGF0IGdldCBkZWZhdWx0IGV4cG9ydCIsIndlYnBhY2s6Ly8vd2VicGFjay9ydW50aW1lL2RlZmluZSBwcm9wZXJ0eSBnZXR0ZXJzIiwid2VicGFjazovLy93ZWJwYWNrL3J1bnRpbWUvZ2xvYmFsIiwid2VicGFjazovLy93ZWJwYWNrL3J1bnRpbWUvaGFzT3duUHJvcGVydHkgc2hvcnRoYW5kIiwid2VicGFjazovLy93ZWJwYWNrL3J1bnRpbWUvcHVibGljUGF0aCIsIndlYnBhY2s6Ly8vd2VicGFjay9ydW50aW1lL2pzb25wIGNodW5rIGxvYWRpbmciLCJ3ZWJwYWNrOi8vL3dlYnBhY2svcnVudGltZS9ub25jZSIsIndlYnBhY2s6Ly8vd2VicGFjay9zdGFydHVwIl0sInNvdXJjZXNDb250ZW50IjpbInZhciBkZWZlcnJlZCA9IFtdO1xuX193ZWJwYWNrX3JlcXVpcmVfXy5PID0gKHJlc3VsdCwgY2h1bmtJZHMsIGZuLCBwcmlvcml0eSkgPT4ge1xuXHRpZihjaHVua0lkcykge1xuXHRcdHByaW9yaXR5ID0gcHJpb3JpdHkgfHwgMDtcblx0XHRmb3IodmFyIGkgPSBkZWZlcnJlZC5sZW5ndGg7IGkgPiAwICYmIGRlZmVycmVkW2kgLSAxXVsyXSA+IHByaW9yaXR5OyBpLS0pIGRlZmVycmVkW2ldID0gZGVmZXJyZWRbaSAtIDFdO1xuXHRcdGRlZmVycmVkW2ldID0gW2NodW5rSWRzLCBmbiwgcHJpb3JpdHldO1xuXHRcdHJldHVybjtcblx0fVxuXHR2YXIgbm90RnVsZmlsbGVkID0gSW5maW5pdHk7XG5cdGZvciAodmFyIGkgPSAwOyBpIDwgZGVmZXJyZWQubGVuZ3RoOyBpKyspIHtcblx0XHR2YXIgW2NodW5rSWRzLCBmbiwgcHJpb3JpdHldID0gZGVmZXJyZWRbaV07XG5cdFx0dmFyIGZ1bGZpbGxlZCA9IHRydWU7XG5cdFx0Zm9yICh2YXIgaiA9IDA7IGogPCBjaHVua0lkcy5sZW5ndGg7IGorKykge1xuXHRcdFx0aWYgKChwcmlvcml0eSAmIDEgPT09IDAgfHwgbm90RnVsZmlsbGVkID49IHByaW9yaXR5KSAmJiBPYmplY3Qua2V5cyhfX3dlYnBhY2tfcmVxdWlyZV9fLk8pLmV2ZXJ5KChrZXkpID0+IChfX3dlYnBhY2tfcmVxdWlyZV9fLk9ba2V5XShjaHVua0lkc1tqXSkpKSkge1xuXHRcdFx0XHRjaHVua0lkcy5zcGxpY2Uoai0tLCAxKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGZ1bGZpbGxlZCA9IGZhbHNlO1xuXHRcdFx0XHRpZihwcmlvcml0eSA8IG5vdEZ1bGZpbGxlZCkgbm90RnVsZmlsbGVkID0gcHJpb3JpdHk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdGlmKGZ1bGZpbGxlZCkge1xuXHRcdFx0ZGVmZXJyZWQuc3BsaWNlKGktLSwgMSlcblx0XHRcdHZhciByID0gZm4oKTtcblx0XHRcdGlmIChyICE9PSB1bmRlZmluZWQpIHJlc3VsdCA9IHI7XG5cdFx0fVxuXHR9XG5cdHJldHVybiByZXN1bHQ7XG59OyIsImltcG9ydCBJQXBpIGZyb20gXCIuLi9pbnRlcmZhY2VzL2FwaS5pbnRlcmZhY2VcIjtcclxuaW1wb3J0IHsgTmJuUGxhY2VBcGlSZXNwb25zZSB9IGZyb20gXCIuLi90eXBlc1wiO1xyXG5pbXBvcnQgeyBpc0RlYnVnTW9kZSB9IGZyb20gXCIuLi91dGlsc1wiO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTGlwQXBpIGltcGxlbWVudHMgSUFwaSB7XHJcblxyXG4gICAgYXN5bmMgZmV0Y2hQYWdlKFxyXG4gICAgICAgIGJvdW5kczogTC5MYXRMbmdCb3VuZHMsXHJcbiAgICAgICAgcGFnZTogbnVtYmVyID0gMSxcclxuICAgICAgICBwcm9jZWVkOiAoKSA9PiBib29sZWFuID0gKCkgPT4gdHJ1ZSxcclxuICAgICkgOiBQcm9taXNlPE5iblBsYWNlQXBpUmVzcG9uc2U+XHJcbiAgICB7XHJcblxyXG4gICAgICAgIGNvbnN0IG5vcnRoID0gYm91bmRzLmdldE5vcnRoKCkudG9GaXhlZCgyKTtcclxuICAgICAgICBjb25zdCB3ZXN0ID0gYm91bmRzLmdldFdlc3QoKS50b0ZpeGVkKDIpO1xyXG5cclxuICAgICAgICBpZiAoIXByb2NlZWQoKSkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1Byb2NlZWQgZnVuY3Rpb24gcmV0dXJuZWQgZmFsc2UuIFN0b3BwaW5nIGZldGNoLicpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gR2V0IHVybCBwYXJhbWV0ZXIgYXBpU2VydmVyXHJcbiAgICAgICAgY29uc3QgdXJsUGFyYW1zID0gbmV3IFVSTFNlYXJjaFBhcmFtcyh3aW5kb3cubG9jYXRpb24uc2VhcmNoKTtcclxuICAgICAgICBjb25zdCBhcGlTZXJ2ZXIgPSB1cmxQYXJhbXMuZ2V0KCdhcGlTZXJ2ZXInKSB8fCAnaHR0cHM6Ly9hcGkubGlwLm5ldC5hdSc7XHJcbiAgICAgICAgXHJcbiAgICAgICAgcGFnZSA9IE1hdGgubWF4KDEsIE51bWJlcihwYWdlKSk7XHJcblxyXG4gICAgICAgIGNvbnN0IHBhZ2VVcmwgPSBgJHthcGlTZXJ2ZXJ9L25ibi1idWxrL21hcC8ke25vcnRofS8ke3dlc3R9P3BhZ2U9JHtwYWdlfWA7XHJcbiAgICAgICAgXHJcbiAgICAgICAgcmV0dXJuIGF3YWl0IG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuXHJcbiAgICAgICAgICAgIGZldGNoKHBhZ2VVcmwsIHtcclxuICAgICAgICAgICAgICAgIG1ldGhvZDogJ0dFVCcsXHJcbiAgICAgICAgICAgICAgICByZWRpcmVjdDogJ2ZvbGxvdycsXHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIC50aGVuKHJlc3BvbnNlID0+IHJlc3BvbnNlLnRleHQoKSlcclxuICAgICAgICAgICAgLnRoZW4ocmVzdWx0ID0+IHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHBhcnNlZFJlc3VsdCA9IEpTT04ucGFyc2UocmVzdWx0KSBhcyB7IGRhdGE6IE5iblBsYWNlQXBpUmVzcG9uc2V9O1xyXG4gICAgICAgICAgICAgICAgcmVzb2x2ZShwYXJzZWRSZXN1bHQuZGF0YSk7XHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIC5jYXRjaChyZWplY3QpO1xyXG5cclxuICAgICAgICB9KTtcclxuICAgICAgICBcclxuICAgIH1cclxufSIsImltcG9ydCB7IE5iblBsYWNlIH0gZnJvbSBcIi4vdHlwZXNcIjtcclxuXHJcblxyXG5leHBvcnQgY2xhc3MgTG9nZ2VyIHtcclxuXHJcbiAgICBzdWIobmFtZTogc3RyaW5nKSB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBMb2dnZXIoYCR7dGhpcy5uYW1lfS4ke25hbWV9YCk7XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBuYW1lOiBzdHJpbmcpIHtcclxuICAgIH1cclxuXHJcbiAgICBlcnJvciguLi5hcmdzOiBhbnlbXSkge1xyXG4gICAgICAgIGNvbnNvbGUuZXJyb3IoYFske3RoaXMubmFtZX1dYCwgLi4uYXJncyk7XHJcbiAgICB9XHJcblxyXG4gICAgd2FybiguLi5hcmdzOiBhbnlbXSkge1xyXG4gICAgICAgIGNvbnNvbGUud2FybihgWyR7dGhpcy5uYW1lfV1gLCAuLi5hcmdzKTtcclxuICAgIH1cclxuXHJcbiAgICBkZWJ1ZyguLi5hcmdzOiBhbnlbXSkge1xyXG4gICAgICAgIGlmIChpc0RlYnVnTW9kZSgpKSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUuZGVidWcoYFske3RoaXMubmFtZX1dYCwgLi4uYXJncyk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgXHJcbiAgICBpbmZvKC4uLmFyZ3M6IGFueVtdKSB7XHJcbiAgICAgICAgY29uc29sZS5pbmZvKGBbJHt0aGlzLm5hbWV9XWAsIC4uLmFyZ3MpO1xyXG4gICAgfVxyXG5cclxuICAgIGxvZyguLi5hcmdzOiBhbnlbXSkge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKGBbJHt0aGlzLm5hbWV9XWAsIC4uLmFyZ3MpO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gY2h1bmtBcnJheTxUPihhcnJheTogVFtdLCBzaXplOiBudW1iZXIpOiBUW11bXSB7XHJcbiAgICBjb25zdCByZXN1bHRzID0gW107XHJcbiAgICB3aGlsZSAoYXJyYXkubGVuZ3RoKSB7XHJcbiAgICAgICAgcmVzdWx0cy5wdXNoKGFycmF5LnNwbGljZSgwLCBzaXplKSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcmVzdWx0cztcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGlzRGVidWdNb2RlKCkge1xyXG4gICAgcmV0dXJuIHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAnZGV2ZWxvcG1lbnQnXHJcbiAgICAgICAgfHwgd2luZG93LmxvY2F0aW9uLmhyZWYuaW5jbHVkZXMoJ2xvY2FsaG9zdCcpXHJcbiAgICAgICAgfHwgd2luZG93LmxvY2F0aW9uLmhyZWYuaW5jbHVkZXMoJ2RlYnVnPXRydWUnKVxyXG4gICAgO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gaXNQbGFjZUZUVFAocGxhY2U6IE5iblBsYWNlKSB7XHJcbiAgICByZXR1cm4gcGxhY2UudGVjaFR5cGUgPT09ICdGVFRQJztcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGlzUGxhY2VGVFROKHBsYWNlOiBOYm5QbGFjZSkge1xyXG4gICAgcmV0dXJuIHBsYWNlLnRlY2hUeXBlID09PSAnRlRUTic7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBpc1BsYWNlSEZDKHBsYWNlOiBOYm5QbGFjZSkge1xyXG4gICAgcmV0dXJuIHBsYWNlLnRlY2hUeXBlID09PSAnSEZDJztcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGlzUGxhY2VGVFRCKHBsYWNlOiBOYm5QbGFjZSkge1xyXG4gICAgcmV0dXJuIHBsYWNlLnRlY2hUeXBlID09PSAnRlRUQic7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBpc1BsYWNlRlRUQyhwbGFjZTogTmJuUGxhY2UpIHtcclxuICAgIGlmKHBsYWNlLnRlY2hUeXBlID09IFwiRlRUQ1wiXHJcbiAgICAgICAgJiYgcGxhY2UucmVhc29uQ29kZSAmJiBwbGFjZS5yZWFzb25Db2RlLm1hdGNoKC9eRlRUQy8pXHJcbiAgICAgICAgJiYgcGxhY2UudGVjaENoYW5nZVN0YXR1cyA9PSAnTmV3IFRlY2ggQ29ubmVjdGVkJ1xyXG4gICAgKSB7XHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gZmFsc2U7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBpc1BsYWNlRml4ZWRXaXJlbGVzcyhwbGFjZTogTmJuUGxhY2UpIHtcclxuICAgIHJldHVybiBwbGFjZS50ZWNoVHlwZSA9PT0gJ0ZpeGVkIFdpcmVsZXNzJztcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGlzUGxhY2VTYXRlbGxpdGUocGxhY2U6IE5iblBsYWNlKSB7XHJcbiAgICByZXR1cm4gcGxhY2UudGVjaFR5cGUgPT09ICdTYXRlbGxpdGUnO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gaXNQbGFjZUZUVFBBdmFpbChwbGFjZTogTmJuUGxhY2UpIHtcclxuICAgIGlmIChwbGFjZS5hbHRSZWFzb25Db2RlICYmIHBsYWNlLmFsdFJlYXNvbkNvZGUubWF0Y2goL15GVFRQLykpIHtcclxuICAgICAgICBzd2l0Y2gocGxhY2UudGVjaENoYW5nZVN0YXR1cykge1xyXG4gICAgICAgICAgICBjYXNlICdFbGlnaWJsZSBUbyBPcmRlcic6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gZmFsc2U7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBpc1BsYWNlRlRUUFNvb24ocGxhY2U6IE5iblBsYWNlKSB7XHJcbiAgICBpZiAocGxhY2UuYWx0UmVhc29uQ29kZSAmJiBwbGFjZS5hbHRSZWFzb25Db2RlLm1hdGNoKC9eRlRUUC8pKSB7XHJcbiAgICAgICAgc3dpdGNoKHBsYWNlLnRlY2hDaGFuZ2VTdGF0dXMpIHtcclxuICAgICAgICAgICAgY2FzZSAnSW4gRGVzaWduJzpcclxuICAgICAgICAgICAgY2FzZSAnQnVpbGQgRmluYWxpc2VkJzpcclxuICAgICAgICAgICAgY2FzZSAnUGxhbm5lZCc6XHJcbiAgICAgICAgICAgIGNhc2UgJ01EVSBDb21wbGV4IEVsaWdpYmxlIFRvIEFwcGx5JzpcclxuICAgICAgICAgICAgY2FzZSAnTURVIENvbXBsZXggUHJlbWlzZXMgSW4gQnVpbGQnOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIGZhbHNlO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gaXNQbGFjZUZUVFBGYXIocGxhY2U6IE5iblBsYWNlKSB7XHJcbiAgICBpZiAocGxhY2UuYWx0UmVhc29uQ29kZSAmJiBwbGFjZS5hbHRSZWFzb25Db2RlLm1hdGNoKC9eRlRUUC8pKSB7XHJcbiAgICAgICAgc3dpdGNoKHBsYWNlLnRlY2hDaGFuZ2VTdGF0dXMpIHtcclxuICAgICAgICAgICAgY2FzZSAnQ29tbWl0dGVkJzpcclxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGlzRnd0b0ZUVE4ocGxhY2U6IE5iblBsYWNlKSB7XHJcbiAgICByZXR1cm4gcGxhY2UudGVjaFR5cGUgPT0gXCJGVFROXCJcclxuICAgICAgICAmJiBwbGFjZS5yZWFzb25Db2RlID09IFwiRlRUTl9TQVwiXHJcbiAgICAgICAgJiYgcGxhY2UuYWx0UmVhc29uQ29kZSA9PSBcIkZXX0NUXCJcclxuICAgICAgICAmJiBwbGFjZS50ZWNoQ2hhbmdlU3RhdHVzID09ICdFbGlnaWJsZSBUbyBPcmRlcidcclxuICAgIDtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGlzRnd0b0ZUVEMocGxhY2U6IE5iblBsYWNlKSB7XHJcbiAgICByZXR1cm4gcGxhY2UudGVjaFR5cGUgPT0gXCJGVFRDXCJcclxuICAgICAgICAmJiBwbGFjZS5yZWFzb25Db2RlID09IFwiRlRUQ19TQVwiXHJcbiAgICAgICAgJiYgcGxhY2UuYWx0UmVhc29uQ29kZSA9PSBcIkZXX0NUXCJcclxuICAgICAgICAmJiBwbGFjZS50ZWNoQ2hhbmdlU3RhdHVzID09ICdFbGlnaWJsZSBUbyBPcmRlcidcclxuICAgIDtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGlzU2F0VG9GVyhwbGFjZTogTmJuUGxhY2UpIHtcclxuICAgIHJldHVybiBwbGFjZS50ZWNoVHlwZSA9PSBcIldJUkVMRVNTXCJcclxuICAgICAgICAmJiBwbGFjZS5yZWFzb25Db2RlID09IFwiRldfU0FcIlxyXG4gICAgICAgICYmIHBsYWNlLnRlY2hDaGFuZ2VTdGF0dXMgPT0gJ0VsaWdpYmxlIFRvIE9yZGVyJ1xyXG4gICAgO1xyXG59XHJcbiIsImltcG9ydCBJRGF0YXN0b3JlIGZyb20gXCIuLi9pbnRlcmZhY2VzL2RhdGFzdG9yZS5pbnRlcmZhY2VcIjtcclxuaW1wb3J0IElNYXJrZXJMYXllciBmcm9tIFwiLi4vaW50ZXJmYWNlcy9tYXJrZXJsYXllci5pbnRlcmZhY2VcIjtcclxuXHJcbmltcG9ydCAqIGFzIEwgZnJvbSBcImxlYWZsZXRcIjtcclxuaW1wb3J0ICdsZWFmbGV0Lm1hcmtlcmNsdXN0ZXInO1xyXG5pbXBvcnQgJ2xlYWZsZXQubWFya2VyY2x1c3Rlci9kaXN0L01hcmtlckNsdXN0ZXIuY3NzJztcclxuXHJcbmltcG9ydCB7IE5iblBsYWNlLCBQb2ludEFuZExvY2lkcyB9IGZyb20gXCIuLi90eXBlc1wiO1xyXG5cclxuLy8gQ29uc3RhbnQgQ29sb3Vyc1xyXG5jb25zdCBjb2xvdXJGVFRQIFx0XHQ9ICcjMUQ3MDQ0JztcclxuY29uc3QgY29sb3VyRlRUUEF2YWlsICAgPSAnIzc1QUQ2Ric7XHJcbmNvbnN0IGNvbG91ckZUVFBTb29uICAgID0gJyNDOEUzQzUnO1xyXG5jb25zdCBjb2xvdXJIRkMgXHRcdD0gJyNGRkJFMDAnO1xyXG5jb25zdCBjb2xvdXJGVFRDIFx0XHQ9ICcjRkY3RTAxJztcclxuY29uc3QgY29sb3VyRlRUQ0F2YWlsICAgPSAnI0ZGN0UwMSc7XHJcbmNvbnN0IGNvbG91ckZUVE5CIFx0XHQ9ICcjRTMwNzFEJztcclxuY29uc3QgY29sb3VyRlcgXHRcdCAgICA9ICcjMDJCOUUzJztcclxuY29uc3QgY29sb3VyRldBdmFpbCBcdD0gJyMwMjJCRTMnO1xyXG5jb25zdCBjb2xvdXJTYXQgXHQgICAgPSAnIzZCMDJFMyc7XHJcblxyXG5jb25zdCBjb2xvdXJFRV9DQkRfWkJDICA9ICcjMUQ3MDQ0JztcclxuY29uc3QgY29sb3VyRUVfQ0JEX0JDICAgPSAnIzAyQjlFMyc7XHJcbmNvbnN0IGNvbG91ckVFX1oxMjNfWkJDID0gJyNGRjdFMDEnO1xyXG5jb25zdCBjb2xvdXJFRV9aMTIzX0JDICA9ICcjRTMwNzFEJztcclxuXHJcbmNvbnN0IENPTF9URUNIX0NPTVBMRVRFICAgICAgICAgPSAnIzFENzA0NCc7XHJcbmNvbnN0IENPTF9URUNIX0FWQUlMICAgICAgICAgICAgPSAnIzAyQjlFMyc7XHJcbmNvbnN0IENPTF9URUNIX0JVSUxERklOQUxJU0VEICAgPSAnI0ZGQkUwMCc7XHJcbmNvbnN0IENPTF9URUNIX0RFU0lHTiAgICAgICAgICAgPSAnI0ZGN0UwMSc7XHJcbmNvbnN0IENPTF9URUNIX0NPTU1JVFRFRCAgICAgICAgPSAnI0UzMDcxRCc7XHJcblxyXG5jb25zdCBDT0xfVEVDSF9NRFVfSU5CVUlMRCAgICAgID0gJyMwMjJCRTMnO1xyXG5jb25zdCBDT0xfVEVDSF9NRFVfRUxJR0lCTEUgICAgID0gJyM2QjAyRTMnO1xyXG5cclxuY29uc3QgY29sb3VyVW5rbm93biAgICAgID0gJyM4ODg4ODgnO1xyXG5cclxuaW1wb3J0IElNb2RlIGZyb20gXCIuLi9pbnRlcmZhY2VzL21vZGUuaW50ZXJmYWNlXCI7XHJcbmltcG9ydCBJUGxhY2VTdG9yZSBmcm9tIFwiLi4vaW50ZXJmYWNlcy9wbGFjZXN0b3JlLmludGVyZmFjZVwiO1xyXG5pbXBvcnQgeyBMb2dnZXIgfSBmcm9tIFwiLi4vdXRpbHNcIjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE1hcmtlckxheWVyQ2x1c3RlciBpbXBsZW1lbnRzIElNYXJrZXJMYXllciB7XHJcblxyXG4gICAgcHJpdmF0ZSBsb2dnZXIgPSBuZXcgTG9nZ2VyKCdNYXJrZXJMYXllckNsdXN0ZXInKTtcclxuXHJcbiAgICBwcml2YXRlIG1hcDogTC5NYXA7XHJcbiAgICBwcml2YXRlIHBsYWNlU3RvcmU6IElQbGFjZVN0b3JlO1xyXG4gICAgcHJpdmF0ZSBtb2RlSGFuZGxlcjogSU1vZGU7XHJcblxyXG4gICAgcHJpdmF0ZSBtYXJrZXJzOiBMLk1hcmtlckNsdXN0ZXJHcm91cDtcclxuXHJcbiAgICBwcml2YXRlIHBvaW50TWFwOiBNYXA8c3RyaW5nLCB7XHJcbiAgICAgICAgbGF5ZXI6IEwuQ2lyY2xlTWFya2VyLFxyXG4gICAgICAgIHBvaW50OiBQb2ludEFuZExvY2lkc1xyXG4gICAgfT4gPSBuZXcgTWFwKCk7XHJcblxyXG4gICAgY29uc3RydWN0b3IobWFwOiBMLk1hcCwgbW9kZUhhbmRsZXI6IElNb2RlLCBwbGFjZVN0b3JlOiBJUGxhY2VTdG9yZSkge1xyXG5cclxuICAgICAgICB0aGlzLm1hcCA9IG1hcDtcclxuICAgICAgICB0aGlzLnBsYWNlU3RvcmUgPSBwbGFjZVN0b3JlO1xyXG4gICAgICAgIHRoaXMubW9kZUhhbmRsZXIgPSBtb2RlSGFuZGxlcjtcclxuXHJcbiAgICAgICAgdGhpcy5tYXJrZXJzID0gbmV3IEwuTWFya2VyQ2x1c3Rlckdyb3VwKHtcclxuICAgICAgICAgICAgbWF4Q2x1c3RlclJhZGl1czogdGhpcy5tYXJrZXJDbHVzdGVyUmFkaXVzLFxyXG4gICAgICAgICAgICBzcGlkZXJmeU9uTWF4Wm9vbTogZmFsc2UsXHJcbiAgICAgICAgICAgIGRpc2FibGVDbHVzdGVyaW5nQXRab29tOiAxOCxcclxuICAgICAgICAgICAgc2hvd0NvdmVyYWdlT25Ib3ZlcjogdHJ1ZSxcclxuICAgICAgICAgICAgem9vbVRvQm91bmRzT25DbGljazogdHJ1ZSxcclxuICAgICAgICAgICAgcmVtb3ZlT3V0c2lkZVZpc2libGVCb3VuZHM6IHRydWUsXHJcbiAgICAgICAgICAgIGljb25DcmVhdGVGdW5jdGlvbjogdGhpcy5pY29uQ3JlYXRlRnVuY3Rpb24sXHJcbiAgICAgICAgICAgIGNodW5rZWRMb2FkaW5nOiB0cnVlLFxyXG4gICAgICAgICAgICBjaHVua0ludGVydmFsOiAxNTAsXHJcbiAgICAgICAgICAgIGNodW5rRGVsYXk6IDE1MCxcclxuICAgICAgICAgICAgY2h1bmtQcm9ncmVzczogKHByb2Nlc3NlZCwgdG90YWwsIGVsYXBzZWQpID0+IHtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdjaHVua1Byb2dyZXNzJywgeyBwcm9jZXNzZWQsIHRvdGFsLCBlbGFwc2VkIH0pO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICB0aGlzLm1hcmtlcnMuYWRkVG8odGhpcy5tYXApO1xyXG5cclxuICAgICAgICB0aGlzLm1hcC5vbignem9vbWVuZCcsIChldmVudCkgPT4ge1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZygnem9vbWVuZCcsIGV2ZW50LnRhcmdldC5nZXRab29tKCkpO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEFkZCBwb2ludHMgdG8gdGhlIG1hcFxyXG4gICAgICogQHBhcmFtIHBvaW50cyBcclxuICAgICAqL1xyXG4gICAgYWRkUG9pbnRzKFxyXG4gICAgICAgIHBvaW50czogTWFwPHN0cmluZywgUG9pbnRBbmRMb2NpZHM+XHJcbiAgICApIDogdm9pZFxyXG4gICAge1xyXG5cclxuICAgICAgICBjb25zdCBsb2dnZXIgPSB0aGlzLmxvZ2dlci5zdWIoJ2FkZFBvaW50cycpO1xyXG4gICAgICAgIFxyXG4gICAgICAgIGNvbnN0IG5ld0xheWVyczogTC5DaXJjbGVNYXJrZXJbXSA9IFtdO1xyXG5cclxuICAgICAgICAvLyBBZGQgdGhlIHBvaW50cyB0byB0aGUgcG9pbnQgc3RvcmVcclxuICAgICAgICBwb2ludHMuZm9yRWFjaCgocG9pbnQpID0+IHtcclxuICAgICAgICAgICAgY29uc3QgbGF0TG5nU3RyaW5nID0gcG9pbnQubGF0ICsgJywnICsgcG9pbnQubG5nO1xyXG4gICAgICAgICAgICBjb25zdCBwb2ludE1hcCA9IHRoaXMucG9pbnRNYXAuZ2V0KGxhdExuZ1N0cmluZyk7XHJcbiAgICAgICAgICAgIGlmICghcG9pbnRNYXApIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG5ld0xheWVyID0gdGhpcy5yZW5kZXJQb2ludChwb2ludCk7XHJcbiAgICAgICAgICAgICAgICBuZXdMYXllcnMucHVzaChuZXdMYXllcik7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnBvaW50TWFwLnNldChsYXRMbmdTdHJpbmcsIHtcclxuICAgICAgICAgICAgICAgICAgICBsYXllcjogbmV3TGF5ZXIsXHJcbiAgICAgICAgICAgICAgICAgICAgcG9pbnQsXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHBvaW50TWFwLnBvaW50ID0gcG9pbnQ7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgLy8gQWRkIGFsbCB0aGUgbGF5ZXJzIHRvIHRoZSBtYXBcclxuICAgICAgICBsb2dnZXIuZGVidWcoJ0FkZGluZyBuZXcgbGF5ZXJzJywgbmV3TGF5ZXJzLmxlbmd0aCk7XHJcbiAgICAgICAgaWYgKG5ld0xheWVycy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgdGhpcy5tYXJrZXJzLmFkZExheWVycyhuZXdMYXllcnMpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBSZW1vdmUgcG9pbnRzIGZyb20gdGhlIG1hcFxyXG4gICAgICogQHBhcmFtIHBvaW50cyBcclxuICAgICAqL1xyXG4gICAgcmVtb3ZlQWxsUG9pbnRzKCkgOiB2b2lkXHJcbiAgICB7XHJcbiAgICAgICAgdGhpcy5sb2dnZXIuc3ViKCdyZW1vdmVBbGxQb2ludHMnKS5kZWJ1ZygnUmVtb3ZpbmcgYWxsIHBvaW50cycsIHRoaXMucG9pbnRNYXApO1xyXG4gICAgICAgIHRoaXMubWFya2Vycy5jbGVhckxheWVycygpO1xyXG4gICAgICAgIHRoaXMucG9pbnRNYXAuY2xlYXIoKTtcclxuICAgICAgICB0aGlzLmxvZ2dlci5zdWIoJ3JlbW92ZUFsbFBvaW50cycpLmRlYnVnKCdSZW1vdmVkIGFsbCBwb2ludHMnLCB0aGlzLnBvaW50TWFwKTtcclxuICAgIH1cclxuXHJcbiAgICBcclxuICAgIGFzeW5jIHJlbW92ZUFsbE1hcmtlcnMoKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgICAgICAgdGhpcy5yZW1vdmVBbGxQb2ludHMoKTtcclxuICAgIH1cclxuXHJcblxyXG4gICAgbWFya2VyQ2x1c3RlclJhZGl1cyh6b29tOiBudW1iZXIpIHtcclxuICAgICAgICBzd2l0Y2goem9vbSkge1xyXG4gICAgICAgICAgICBjYXNlIDA6XHJcbiAgICAgICAgICAgIGNhc2UgMTpcclxuICAgICAgICAgICAgY2FzZSAyOlxyXG4gICAgICAgICAgICBjYXNlIDM6XHJcbiAgICAgICAgICAgIGNhc2UgNDpcclxuICAgICAgICAgICAgY2FzZSA1OlxyXG4gICAgICAgICAgICBjYXNlIDY6XHJcbiAgICAgICAgICAgIGNhc2UgNzpcclxuICAgICAgICAgICAgY2FzZSA4OlxyXG4gICAgICAgICAgICBjYXNlIDk6XHJcbiAgICAgICAgICAgIGNhc2UgMTA6XHJcbiAgICAgICAgICAgIGNhc2UgMTE6XHJcbiAgICAgICAgICAgIGNhc2UgMTI6XHJcbiAgICAgICAgICAgIGNhc2UgMTM6IHJldHVybiAxNTA7XHJcbiAgICAgICAgICAgIGNhc2UgMTQ6IHJldHVybiAxMDA7XHJcbiAgICAgICAgICAgIGNhc2UgMTU6XHJcbiAgICAgICAgICAgIGNhc2UgMTY6XHJcbiAgICAgICAgICAgIGRlZmF1bHQ6IHJldHVybiAwO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIHVwZGF0ZVBvaW50U3R5bGUocGxhY2VzOiBOYm5QbGFjZVtdLCBsYXllcjogTC5DaXJjbGVNYXJrZXIpIHtcclxuICAgICAgICBsYXllci5zZXRTdHlsZSh7XHJcbiAgICAgICAgICAgIGZpbGxDb2xvcjogdGhpcy5tb2RlSGFuZGxlci5wbGFjZUNvbG91cihwbGFjZXNbMF0pLFxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGxheWVyLnNldFRvb2x0aXBDb250ZW50KHRoaXMubW9kZUhhbmRsZXIucmVuZGVyVG9vbHRpcChwbGFjZXMpKTtcclxuICAgICAgICBsYXllci5yZWRyYXcoKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFNldCB0aGUgbW9kZSBoYW5kbGVyXHJcbiAgICAgKiAgLSBTdG9yZSB0aGUgbW9kZSBoYW5kbGVyXHJcbiAgICAgKiAgLSBVcGRhdGUgdGhlIGNvbG91ciBvZiB0aGUgcG9pbnRzXHJcbiAgICAgKiBAcGFyYW0gbW9kZUhhbmRsZXIgXHJcbiAgICAgKiBAcmV0dXJucyBcclxuICAgICAqL1xyXG4gICAgc2V0TW9kZUhhbmRsZXIobW9kZUhhbmRsZXI6IElNb2RlLCBwbGFjZXN0b3JlOiBJUGxhY2VTdG9yZSkge1xyXG5cclxuICAgICAgICB0aGlzLm1vZGVIYW5kbGVyID0gbW9kZUhhbmRsZXI7XHJcbiAgICAgICAgLypcclxuICAgICAgICB0aGlzLnBvaW50TWFwLmZvckVhY2goKHsgbGF5ZXIsIHBvaW50IH0pID0+IHtcclxuXHJcbiAgICAgICAgICAgIC8vIEdldCB0aGUgcGxhY2VzXHJcbiAgICAgICAgICAgIGNvbnN0IGdldFBsYWNlcyA9IHBsYWNlc3RvcmUuZ2V0UGxhY2VzKHBvaW50Lmlkcyk7XHJcblxyXG4gICAgICAgICAgICAvLyBVcGRhdGUgdGhlIHBvaW50IHN0eWxlXHJcbiAgICAgICAgICAgIGdldFBsYWNlcy50aGVuKChwbGFjZXMpID0+IHRoaXMudXBkYXRlUG9pbnRTdHlsZShwbGFjZXMsIGxheWVyKSk7XHJcblxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBpZiAodGhpcy5tYXJrZXJzICYmIHRoaXMubWFya2Vycy5nZXRMYXllcnMoKS5sZW5ndGgpIHtcclxuICAgICAgICAgICAgdGhpcy5tYXJrZXJzLnJlZnJlc2hDbHVzdGVycygpO1xyXG4gICAgICAgIH1cclxuICAgICAgICAqL1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfVxyXG5cclxuICAgIGFzeW5jIERFUF9yZWZyZXNoTWFya2Vyc0luc2lkZUJvdW5kcyhib3VuZHM6IEwuTGF0TG5nQm91bmRzLCBtRmlsdGVyPzogKHBsYWNlOiBOYm5QbGFjZSkgPT4gYm9vbGVhbikge1xyXG5cclxuICAgICAgICAvKlxyXG4gICAgICAgIGlmICghdGhpcy5kYXRhc3RvcmUpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdEYXRhc3RvcmUgbm90IHNldCcpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29uc3QgbmV3UG9pbnRzID0gYXdhaXQgdGhpcy5kYXRhc3RvcmUuZ2V0RnVsbFBvaW50c1dpdGhpbkJvdW5kcyhib3VuZHMpO1xyXG4gICAgICAgIFxyXG4gICAgICAgIG5ld1BvaW50c1xyXG4gICAgICAgICAgICAuZm9yRWFjaChwb2ludCA9PiB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBsYXRMbmdTdHJpbmcgPSBwb2ludC5sYXRsbmc7XHJcbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMucG9pbnRTdG9yZVtsYXRMbmdTdHJpbmddKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wb2ludFN0b3JlW2xhdExuZ1N0cmluZ10gPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxheWVyOiB0aGlzLnJlbmRlclBvaW50KHBvaW50KSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgcG9pbnQsXHJcbiAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wb2ludHNbbGF0TG5nU3RyaW5nXS5wb2ludCA9IHBvaW50O1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KVxyXG5cclxuXHJcbiAgICAgICAgaWYgKG1GaWx0ZXIpIHtcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IHJlbW92ZUxheWVyczogTC5MYXllcltdID0gW107XHJcblxyXG4gICAgICAgICAgICBjb25zdCBmaWx0ZXJlZFBvaW50cyA9IE9iamVjdC52YWx1ZXModGhpcy5wb2ludHMpXHJcbiAgICAgICAgICAgICAgICAuZmlsdGVyKCh7bGF5ZXIsIHBvaW50fSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHNob3dQb2ludCA9IHBvaW50LnBsYWNlcy5maWx0ZXIobUZpbHRlcikubGVuZ3RoID4gMDtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIXNob3dQb2ludCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZW1vdmVMYXllcnMucHVzaChsYXllcik7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBzaG93UG9pbnQ7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIGlmIChyZW1vdmVMYXllcnMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm1hcmtlcnM/LnJlbW92ZUxheWVycyhyZW1vdmVMYXllcnMpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB0aGlzLm1hcmtlcnM/LmFkZExheWVycyhmaWx0ZXJlZFBvaW50cy5tYXAocCA9PiBwLmxheWVyKSk7XHJcblxyXG4gICAgICAgIH1cclxuICAgICAgICAgICAgXHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMubWFya2Vycz8uYWRkTGF5ZXJzKE9iamVjdC52YWx1ZXModGhpcy5wb2ludHMpLm1hcChwID0+IHAubGF5ZXIpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgKi9cclxuICAgIH1cclxuXHJcbiAgICBhc3luYyByZW1vdmVNYXJrZXJzT3V0c2lkZUJvdW5kcyhib3VuZHM6IEwuTGF0TG5nQm91bmRzKSB7XHJcbiAgICAgICAgLy8gV2UgZG9uJ3QgbmVlZCB0byBkbyBhbnl0aGluZyBoZXJlLCBhcyB0aGUgbWFya2VyIGNsdXN0ZXIgcGx1Z2luIGhhbmRsZXMgdGhpcyBmb3IgdXNcclxuICAgICAgICAvL2NvbnN0IHJlbW92ZU1hcmtlcnMgPSB0aGlzLm1hcmtlcnMuZ2V0TGF5ZXJzKClcclxuICAgICAgICAvLyAgICAuZmlsdGVyKChsYXllcjogTC5DaXJjbGVNYXJrZXIpID0+ICFib3VuZHMuY29udGFpbnMobGF5ZXIuZ2V0TGF0TG5nKCkpKVxyXG4gICAgICAgIC8vO1xyXG4gICAgICAgIC8vdGhpcy5tYXJrZXJzLnJlbW92ZUxheWVycyhyZW1vdmVNYXJrZXJzKTtcclxuICAgIH1cclxuXHJcbiAgICByZW5kZXJQb2ludChwb2ludDogUG9pbnRBbmRMb2NpZHMpOiBMLkNpcmNsZU1hcmtlciB7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgIGNvbnN0IGNpcmNsZU1hcmtlckxheWVyID0gTC5jaXJjbGVNYXJrZXIoWyBwb2ludC5sYXQsIHBvaW50LmxuZyBdLCB7XHJcbiAgICAgICAgICAgIHJhZGl1czogNSxcclxuICAgICAgICAgICAgZmlsbENvbG9yOiBwb2ludC5jb2wgPyBwb2ludC5jb2xbMF0gOiB1bmRlZmluZWQsIC8vdGhpcy5nZXRQbGFjZUNvbG91cihwbGFjZSksXHJcbiAgICAgICAgICAgIGNvbG9yOiBcIiMwMDAwMDBcIixcclxuICAgICAgICAgICAgd2VpZ2h0OiAxLFxyXG4gICAgICAgICAgICBvcGFjaXR5OiAxLFxyXG4gICAgICAgICAgICBmaWxsT3BhY2l0eTogMC44LFxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBjaXJjbGVNYXJrZXJMYXllci5iaW5kUG9wdXAoXHJcbiAgICAgICAgICAgIChsYXllcikgPT4ge1xyXG5cclxuICAgICAgICAgICAgICAgIC8vIEFzeW5jIHJlbmRlciBwb3B1cCBmcm9tIHBsYWNlU3RvcmUgZGF0YVxyXG4gICAgICAgICAgICAgICAgdGhpcy5wbGFjZVN0b3JlLmdldFBsYWNlcyhwb2ludC5pZHMpLnRoZW4oKHBsYWNlcykgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHBvcHVwID0gdGhpcy5yZW5kZXJQb3B1cChwbGFjZXMpO1xyXG4gICAgICAgICAgICAgICAgICAgIGxheWVyLnNldFBvcHVwQ29udGVudChwb3B1cCk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICAvLyBSZXR1cm4gbG9hZGluZyBwb3B1cCBjb250ZW50XHJcbiAgICAgICAgICAgICAgICBjb25zdCBsb2FkaW5nUG9wdXAgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgICAgICAgICAgICAgIGxvYWRpbmdQb3B1cC5pbm5lckhUTUwgPSAnPGRpdiBjbGFzcz1cImxvYWRpbmdcIj5Mb2FkaW5nLi4uPC9kaXY+JztcclxuXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbG9hZGluZ1BvcHVwO1xyXG5cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgYXV0b1BhbjogdHJ1ZSxcclxuICAgICAgICAgICAgICAgIGF1dG9DbG9zZTogZmFsc2UsXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICApO1xyXG5cclxuICAgICAgICBjaXJjbGVNYXJrZXJMYXllci5iaW5kVG9vbHRpcChcclxuICAgICAgICAgICAgKGxheWVyKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBsZXQgbGFiZWwgPSBwb2ludC5hZGRbMF07XHJcbiAgICAgICAgXHJcbiAgICAgICAgICAgICAgICBpZiAocG9pbnQuYWRkLmxlbmd0aCA+IDEpIHtcclxuICAgICAgICAgICAgICAgICAgICBsYWJlbCArPSAnICggKyAnICsgKHBvaW50LmFkZC5sZW5ndGggLSAxKSArICcgbW9yZSknO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgIFxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGxhYmVsO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB7fVxyXG4gICAgICAgICk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgcmV0dXJuIGNpcmNsZU1hcmtlckxheWVyO1xyXG5cclxuICAgIH1cclxuXHJcbiAgICByZW5kZXJQb3B1cChwbGFjZXM6IE5iblBsYWNlW10pIDogSFRNTEVsZW1lbnQge1xyXG5cclxuICAgICAgICBpZiAocGxhY2VzLmxlbmd0aCA9PSAxKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLm1vZGVIYW5kbGVyLnJlbmRlclBvcHVwQ29udGVudChwbGFjZXNbMF0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHRoaXMucmVuZG9yUG9wdXBNdWx0aShwbGFjZXMpO1xyXG5cclxuICAgIH1cclxuICAgIFxyXG4gICAgcmVuZG9yUG9wdXBNdWx0aShwbGFjZXM6IE5iblBsYWNlW10pIDogSFRNTEVsZW1lbnQge1xyXG4gICAgICAgIGNvbnN0IGdyb3VwRGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcblxyXG4gICAgICAgIGNvbnN0IHBsYWNlQ29udGFpbmVyczogSFRNTEVsZW1lbnRbXSA9IFtdO1xyXG5cclxuICAgICAgICBwbGFjZXMuc29ydCgoYSwgYikgPT4ge1xyXG4gICAgICAgICAgICBpZiAoYS5hZGRyZXNzMSA8IGIuYWRkcmVzczEpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiAtMTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoYS5hZGRyZXNzMSA+IGIuYWRkcmVzczEpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiAxO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiAwO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBmb3IgKGxldCBwbGFjZSBvZiBwbGFjZXMpIHtcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IHBsYWNlQ29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcblxyXG4gICAgICAgICAgICBjb25zdCBwbGFjZUNvbG91ciA9IHRoaXMubW9kZUhhbmRsZXIucGxhY2VDb2xvdXIocGxhY2UpO1xyXG5cclxuICAgICAgICAgICAgLy8gQ3JlYXRlIEFjY29yZGlvbiBCdXR0b25cclxuICAgICAgICAgICAgY29uc3QgYnV0dG9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYnV0dG9uJyk7XHJcbiAgICAgICAgICAgIGJ1dHRvbi5jbGFzc0xpc3QuYWRkKCdhY2NvcmRpb24nKTtcclxuICAgICAgICAgICAgYnV0dG9uLnR5cGUgPSAnYnV0dG9uJztcclxuICAgICAgICAgICAgYnV0dG9uLmlubmVySFRNTCA9IGA8c3ZnIGhlaWdodD1cIjE1XCIgd2lkdGg9XCIxNVwiIHN0eWxlPVwibWFyZ2luLXJpZ2h0OjNweFwiPmBcclxuICAgICAgICAgICAgICAgICsgYDxjaXJjbGUgY2xhc3M9XCJjaXJjbGVcIiBjeD1cIjcuNVwiIGN5PVwiOVwiIHI9XCI1XCIgc3Ryb2tlPVwiIzAwMFwiIHN0cm9rZS13aWR0aD1cIjFcIiBmaWxsPVwiJHtwbGFjZUNvbG91cn1cIiAvPmBcclxuICAgICAgICAgICAgICAgICsgYDwvc3ZnPmBcclxuICAgICAgICAgICAgICAgICsgYDxzcGFuPiR7cGxhY2UuYWRkcmVzczF9PC9zcGFuPmBcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIC8vIEFkZCBQYW5lbFxyXG4gICAgICAgICAgICBjb25zdCBwYW5lbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgICAgICAgICBwYW5lbC5jbGFzc0xpc3QuYWRkKCdwYW5lbCcpO1xyXG4gICAgICAgICAgICBwYW5lbC5hcHBlbmRDaGlsZCh0aGlzLm1vZGVIYW5kbGVyLnJlbmRlclBvcHVwQ29udGVudChwbGFjZSkpO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgLy8gQWRkIEV2ZW50c1xyXG4gICAgICAgICAgICBidXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XHJcblxyXG4gICAgICAgICAgICAgICAgY29uc3QgY3VycmVudGx5QWN0aXZlID0gcGxhY2VDb250YWluZXIuY2xhc3NMaXN0LmNvbnRhaW5zKCdhY3RpdmUnKTtcclxuICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgLy8gUmVtb3ZlIGFjdGl2ZSBjbGFzcyBmcm9tIGFsbCBidXR0b25zIGFuZCBwYW5lbHNcclxuICAgICAgICAgICAgICAgIHBsYWNlQ29udGFpbmVycy5mb3JFYWNoKChwbGFjZUNvbnRhaW5lcikgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIHBsYWNlQ29udGFpbmVyLmNsYXNzTGlzdC5yZW1vdmUoJ2FjdGl2ZScpO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKCFjdXJyZW50bHlBY3RpdmUpIHtcclxuICAgICAgICAgICAgICAgICAgICBwbGFjZUNvbnRhaW5lci5jbGFzc0xpc3QuYWRkKCdhY3RpdmUnKTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgLy8gQWRkIHRvIERPTVxyXG4gICAgICAgICAgICBwbGFjZUNvbnRhaW5lci5hcHBlbmRDaGlsZChidXR0b24pO1xyXG4gICAgICAgICAgICBwbGFjZUNvbnRhaW5lci5hcHBlbmRDaGlsZChwYW5lbCk7XHJcbiAgICAgICAgICAgIGdyb3VwRGl2LmFwcGVuZENoaWxkKHBsYWNlQ29udGFpbmVyKTtcclxuICAgICAgICAgICAgcGxhY2VDb250YWluZXJzLnB1c2gocGxhY2VDb250YWluZXIpO1xyXG5cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBncm91cERpdjtcclxuICAgIH1cclxuXHJcbiAgICAvKlxyXG4gICAgZ2V0UGxhY2VDb2xvdXIocGxhY2U6IE5iblBsYWNlKSB7XHJcblxyXG4gICAgICAgIC8qKiBFRSBEaXNwbGF5IE1vZGUgKi9cclxuICAgICAgICAvKlxyXG4gICAgICAgIGlmICh0aGlzLmNvbnRyb2xzLmRpc3BsYXlNb2RlLmRpc3BsYXlNb2RlID09ICdlZScpIHtcclxuXHJcbiAgICAgICAgICAgIGlmKHBsYWNlLmNiZHByaWNpbmcgJiYgcGxhY2UuemVyb0J1aWxkQ29zdCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGNvbG91ckVFX0NCRF9aQkM7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmKHBsYWNlLmNiZHByaWNpbmcgJiYgIXBsYWNlLnplcm9CdWlsZENvc3QpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBjb2xvdXJFRV9DQkRfQkM7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmKCFwbGFjZS5jYmRwcmljaW5nICYmIHBsYWNlLnplcm9CdWlsZENvc3QpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBjb2xvdXJFRV9aMTIzX1pCQztcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYoIXBsYWNlLmNiZHByaWNpbmcgJiYgIXBsYWNlLnplcm9CdWlsZENvc3QpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBjb2xvdXJFRV9aMTIzX0JDO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gY29sb3VyVW5rbm93bjtcclxuXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodGhpcy5jb250cm9scy5kaXNwbGF5TW9kZS5kaXNwbGF5TW9kZSA9PSAndXBncmFkZScpIHtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIHN3aXRjaCAocGxhY2UudGVjaENoYW5nZVN0YXR1cykge1xyXG4gICAgICAgICAgICAgICAgY2FzZSAnUHJldmlvdXMgVGVjaCBEaXNjb25uZWN0ZWQnOiByZXR1cm4gQ09MX1RFQ0hfQ09NUExFVEU7XHJcbiAgICAgICAgICAgICAgICBjYXNlICdOZXcgVGVjaCBDb25uZWN0ZWQnIDogcmV0dXJuIENPTF9URUNIX0NPTVBMRVRFO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAnSW4gRGVzaWduJzogcmV0dXJuIENPTF9URUNIX0RFU0lHTjtcclxuICAgICAgICAgICAgICAgIGNhc2UgJ0J1aWxkIEZpbmFsaXNlZCc6IHJldHVybiBDT0xfVEVDSF9CVUlMREZJTkFMSVNFRDtcclxuICAgICAgICAgICAgICAgIGNhc2UgJ0NvbW1pdHRlZCc6IHJldHVybiBDT0xfVEVDSF9DT01NSVRURUQ7XHJcbiAgICAgICAgICAgICAgICBjYXNlICdFbGlnaWJsZSBUbyBPcmRlcic6IHJldHVybiBDT0xfVEVDSF9BVkFJTDtcclxuICAgICAgICAgICAgICAgIGNhc2UgJ01EVSBDb21wbGV4IEVsaWdpYmxlIFRvIEFwcGx5JzogcmV0dXJuIENPTF9URUNIX01EVV9FTElHSUJMRTtcclxuICAgICAgICAgICAgICAgIGNhc2UgJ01EVSBDb21wbGV4IFByZW1pc2VzIEluIEJ1aWxkJzogcmV0dXJuIENPTF9URUNIX01EVV9JTkJVSUxEO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gY29sb3VyVW5rbm93bjtcclxuICAgICAgICB9Ki9cclxuLypcclxuICAgICAgICBpZiAoaXNQbGFjZUZUVFAocGxhY2UpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBjb2xvdXJGVFRQO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKGlzUGxhY2VGVFRQQXZhaWwocGxhY2UpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBjb2xvdXJGVFRQQXZhaWw7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoaXNQbGFjZUZUVFBTb29uKHBsYWNlKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gY29sb3VyRlRUUFNvb247XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoaXNQbGFjZUZUVFBGYXIocGxhY2UpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBnZXRUZWNoQ29sb3VyKHBsYWNlLnRlY2hUeXBlKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChpc1BsYWNlRlRUQyhwbGFjZSkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGNvbG91ckZUVEM7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoaXNGV3RvRlRUQyhwbGFjZSkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGNvbG91ckZUVENBdmFpbDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChpc0Z3dG9GVFROKHBsYWNlKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gY29sb3VyRlRUTkI7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIFxyXG4gICAgICAgIGlmIChpc1NhdFRvRlcocGxhY2UpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBjb2xvdXJGV0F2YWlsO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHBsYWNlLmFsdFJlYXNvbkNvZGUgJiYgcGxhY2UuYWx0UmVhc29uQ29kZSAhPSAnTlVMTF9OQScpIHtcclxuICAgICAgICAgICAgY29uc29sZS5sb2cocGxhY2UpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gZ2V0VGVjaENvbG91cihwbGFjZS50ZWNoVHlwZSk7XHJcbiAgICB9XHJcbiovXHJcblxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqIENyZWF0ZSB0aGUgaWNvbiBmb3IgdGhlIGNsdXN0ZXJcclxuICAgICAqIEBwYXJhbSBjbHVzdGVyIFxyXG4gICAgICogQHJldHVybnMgXHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgaWNvbkNyZWF0ZUZ1bmN0aW9uKGNsdXN0ZXI6IEwuTWFya2VyQ2x1c3RlcikgOiBMLkRpdkljb25cclxuICAgIHtcclxuICAgICAgICBcclxuICAgICAgICBjb25zdCBjb2xvckFycmF5ID0gY2x1c3Rlci5nZXRBbGxDaGlsZE1hcmtlcnMoKS5tYXAoKG1hcmtlcikgPT4gKG1hcmtlciBhcyBhbnkpLm9wdGlvbnMuZmlsbENvbG9yKVxyXG5cclxuICAgICAgICBjb25zdCBjb2xvckNvdW50czoge1tjb2xvcjogc3RyaW5nXTogbnVtYmVyfSA9IHt9O1xyXG5cclxuICAgICAgICBjb2xvckFycmF5LmZvckVhY2goKGNvbG9yKSA9PiB7XHJcbiAgICAgICAgICAgIGlmICghY29sb3JDb3VudHNbY29sb3JdKSB7XHJcbiAgICAgICAgICAgICAgICBjb2xvckNvdW50c1tjb2xvcl0gPSAwO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNvbG9yQ291bnRzW2NvbG9yXSsrO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBjb25zdCBjb2xvckFycmF5U29ydGVkID0gT2JqZWN0LmtleXMoY29sb3JDb3VudHMpXHJcbiAgICAgICAgICAgIC5zb3J0KChhLCBiKSA9PiBjb2xvckNvdW50c1tiXSAtIGNvbG9yQ291bnRzW2FdKVxyXG4gICAgICAgIDtcclxuXHJcbiAgICAgICAgbGV0IGJhY2tncm91bmQgPSAnYmFja2dyb3VuZDogY29uaWMtZ3JhZGllbnQoJ1xyXG5cclxuICAgICAgICBsZXQgbGFzdENvbG91clBlcmNlbnQgPSAwO1xyXG5cclxuICAgICAgICBjb2xvckFycmF5U29ydGVkLmZvckVhY2goKGNvbG9yLCBpbmRleCkgPT4ge1xyXG4gICAgICAgICAgICBpZiAoaW5kZXggPT0gMCkge1xyXG4gICAgICAgICAgICAgICAgYmFja2dyb3VuZCArPSBcIlxcblwiICsgY29sb3IgKyAnIDAlJztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjb25zdCB0aGlzQ29sb3VyUGVyY2VudCA9IChjb2xvckNvdW50c1tjb2xvcl0gLyBjb2xvckFycmF5Lmxlbmd0aCAqIDEwMCk7XHJcbiAgICAgICAgICAgIGJhY2tncm91bmQgKz0gXCIsIFxcblwiICsgY29sb3IgKyAnICcgKyAobGFzdENvbG91clBlcmNlbnQpICsgJyUnO1xyXG4gICAgICAgICAgICBiYWNrZ3JvdW5kICs9IFwiLCBcXG5cIiArIGNvbG9yICsgJyAnICsgKGxhc3RDb2xvdXJQZXJjZW50K3RoaXNDb2xvdXJQZXJjZW50KSArICclJztcclxuICAgICAgICAgICAgbGFzdENvbG91clBlcmNlbnQgKz0gdGhpc0NvbG91clBlcmNlbnQ7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIGJhY2tncm91bmQgKz0gXCJcXG4pO1wiO1xyXG5cclxuICAgICAgICBjb25zdCByYW5kb21JZCA9IE1hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnN1YnN0cmluZyg3KTtcclxuXHJcbiAgICAgICAgcmV0dXJuIEwuZGl2SWNvbih7XHJcbiAgICAgICAgICAgIGh0bWw6IGA8c3R5bGU+I2NsdXN0ZXJfJHtyYW5kb21JZH06OmJlZm9yZSB7ICR7YmFja2dyb3VuZH0gfTwvc3R5bGU+IDxkaXYgaWQ9J2NsdXN0ZXJfJHtyYW5kb21JZH0nPjxzcGFuPmAgKyBjbHVzdGVyLmdldENoaWxkQ291bnQoKSArICc8L3NwYW4+PC9kaXY+JyxcclxuICAgICAgICAgICAgY2xhc3NOYW1lOiAnbWFya2VyLWNsdXN0ZXInLFxyXG4gICAgICAgIH0pXHJcbiAgICB9XHJcblxyXG59IiwiXHJcbmltcG9ydCAnbGVhZmxldC9kaXN0L2xlYWZsZXQuY3NzJztcclxuaW1wb3J0ICogYXMgTCBmcm9tICdsZWFmbGV0JztcclxuXHJcbmltcG9ydCAnbGVhZmxldC5sb2NhdGVjb250cm9sL2Rpc3QvTC5Db250cm9sLkxvY2F0ZS5taW4uY3NzJ1xyXG5pbXBvcnQgJ2xlYWZsZXQubG9jYXRlY29udHJvbCc7XHJcblxyXG5pbXBvcnQgJ2xlYWZsZXQtY29udHJvbC1nZW9jb2Rlci9kaXN0L0NvbnRyb2wuR2VvY29kZXIuY3NzJztcclxuaW1wb3J0IHsgR2VvY29kZXIsIGdlb2NvZGVyLCBnZW9jb2RlcnMgfSBmcm9tICdsZWFmbGV0LWNvbnRyb2wtZ2VvY29kZXInO1xyXG5cclxuaW1wb3J0IHsgTmJuUGxhY2UsIE5iblBsYWNlQXBpUmVzcG9uc2UsIE5iblRlY2hNYXBPcHRpb25zLCBQb2ludEFuZExvY2lkcyB9IGZyb20gJy4vdHlwZXMnO1xyXG4vL2ltcG9ydCBNYXJrZXJHcm91cCBmcm9tICcuL21hcmtlcl9ncm91cC5jbGFzcy50cy5kZXYnO1xyXG4vL2ltcG9ydCBDb250cm9sWm9vbVdhcm5pbmcgZnJvbSAnLi9jb250cm9sX3pvb21fd2FybmluZy5jbGFzcyc7XHJcbi8vaW1wb3J0IENvbnRyb2xGaWx0ZXIgZnJvbSAnLi9jb250cm9sX2ZpbHRlci5jbGFzcyc7XHJcblxyXG5pbXBvcnQgSUFwaSBmcm9tICcuL2ludGVyZmFjZXMvYXBpLmludGVyZmFjZSc7XHJcbmltcG9ydCBJTWFya2VyTGF5ZXIgZnJvbSAnLi9pbnRlcmZhY2VzL21hcmtlcmxheWVyLmludGVyZmFjZSc7XHJcbmltcG9ydCBNYXJrZXJMYXllckNsdXN0ZXIgZnJvbSAnLi9tYXJrZXJsYXllci9tYXJrZXJsYXllci5jbHVzdGVyLmNsYXNzJztcclxuaW1wb3J0IElDb250cm9sIGZyb20gJy4vaW50ZXJmYWNlcy9jb250cm9sLmludGVyZmFjZSc7XHJcbmltcG9ydCB7IGlzRGVidWdNb2RlIH0gZnJvbSAnLi91dGlscyc7XHJcbmltcG9ydCBJTW9kZSBmcm9tICcuL2ludGVyZmFjZXMvbW9kZS5pbnRlcmZhY2UnO1xyXG5cclxuaW1wb3J0IHsgTG9nZ2VyIH0gZnJvbSBcIi4vdXRpbHNcIjtcclxuaW1wb3J0IElQbGFjZVN0b3JlIGZyb20gJy4vaW50ZXJmYWNlcy9wbGFjZXN0b3JlLmludGVyZmFjZSc7XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gcm91bmRCb3VuZHMoYm91bmRzOiBMLkxhdExuZ0JvdW5kcyk6IEwuTGF0TG5nQm91bmRzIHtcclxuICAgIGNvbnN0IG5vcnRoID0gTWF0aC5jZWlsKGJvdW5kcy5nZXROb3J0aCgpICogNTApIC8gNTA7XHJcbiAgICBjb25zdCB3ZXN0ID0gTWF0aC5mbG9vcihib3VuZHMuZ2V0V2VzdCgpICogMjUpIC8gMjU7XHJcbiAgICBjb25zdCBzb3V0aCA9IE1hdGguZmxvb3IoYm91bmRzLmdldFNvdXRoKCkgKiA1MCkgLyA1MDtcclxuICAgIGNvbnN0IGVhc3QgPSBNYXRoLmNlaWwoYm91bmRzLmdldEVhc3QoKSAqIDI1KSAvIDI1O1xyXG4gICAgcmV0dXJuIEwubGF0TG5nQm91bmRzKFtzb3V0aCwgd2VzdF0sIFtub3J0aCwgZWFzdF0pO1xyXG59XHJcblxyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTmJuVGVjaE1hcCB7XHJcblxyXG4gICAgcHJpdmF0ZSBNQVhfVU5GRVRDSEVEX0JPWEVTID0gMTAwO1xyXG5cclxuICAgIHByaXZhdGUgbG9nZ2VyID0gbmV3IExvZ2dlcignTmJuVGVjaE1hcCcpO1xyXG5cclxuICAgIHN0YXRpYyByZWFkb25seSBERUZBVUxUX09QVElPTlM6IFBhcnRpYWw8TmJuVGVjaE1hcE9wdGlvbnM+ID0ge1xyXG4gICAgICAgIG1hcENvbnRhaW5lcklkOiAnbWFwJyxcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEBQcm9wZXJ0eSB7bWFwfSAtIExlYWZsZXQgbWFwIG9iamVjdC5cclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSBtYXA6IEwuTWFwO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQFByb3BlcnR5IHttYXBUaWxlTGF5ZXJ9IC0gTGVhZmxldCBtYXAgdGlsZSBsYXllci5cclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSBtYXBUaWxlTGF5ZXI6IEwuVGlsZUxheWVyO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQFByb3BlcnR5IHthcGl9IC0gQVBJIG9iamVjdC5cclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSBhcGk6IElBcGk7XHJcblxyXG5cclxuICAgIHByaXZhdGUgbWFwTG9jYXRlOiBMLkNvbnRyb2wuTG9jYXRlO1xyXG4gICAgcHJpdmF0ZSBtYXBTZWFyY2g6IEdlb2NvZGVyO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQFByb3BlcnR5IHtwbGFjZVN0b3JlfSAtIFBsYWNlIHN0b3JlIG5ibiBwbGFjZXMuXHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgcGxhY2VTdG9yZTogSVBsYWNlU3RvcmU7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAUHJvcGVydHkge21hcmtlckxheWVyfSAtIExheWVyIHRvIGhvbGQgbWFya2Vyc1xyXG4gICAgICovXHJcbiAgICBwcml2YXRlIG1hcmtlckxheWVyOiBJTWFya2VyTGF5ZXI7XHJcblxyXG4gICAgcHJpdmF0ZSBtb2RlSGFuZGxlcjogSU1vZGU7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBcclxuICAgICAqIEBwYXJhbSB7Kn0gb3B0aW9ucyBcclxuICAgICAqL1xyXG4gICAgY29uc3RydWN0b3Iob3B0aW9uczogTmJuVGVjaE1hcE9wdGlvbnMpIHtcclxuXHJcbiAgICAgICAgb3B0aW9ucyA9IHsgLi4uTmJuVGVjaE1hcC5ERUZBVUxUX09QVElPTlMsIC4uLm9wdGlvbnMgfTtcclxuXHJcbiAgICAgICAgdGhpcy5hcGkgPSBvcHRpb25zLmFwaTtcclxuICAgICAgICB0aGlzLnBsYWNlU3RvcmUgPSBvcHRpb25zLnBsYWNlc3RvcmU7XHJcbiAgICAgICAgdGhpcy5tb2RlSGFuZGxlciA9IG9wdGlvbnMuZGVmYXVsdE1vZGVIYW5kbGVyO1xyXG5cclxuICAgICAgICAvLyBDcmVhdGUgdGhlIG1hcFxyXG4gICAgICAgIHRoaXMubWFwID0gTC5tYXAob3B0aW9ucy5tYXBDb250YWluZXJJZCwgeyBwcmVmZXJDYW52YXM6IHRydWUgfSk7XHJcblxyXG4gICAgICAgIC8vIFNldCB1cCB0aGUgbWFya2VyIGxheWVyXHJcbiAgICAgICAgdGhpcy5tYXJrZXJMYXllciA9IG5ldyBNYXJrZXJMYXllckNsdXN0ZXIoXHJcbiAgICAgICAgICAgIHRoaXMubWFwLCB0aGlzLm1vZGVIYW5kbGVyLCB0aGlzLnBsYWNlU3RvcmVcclxuICAgICAgICApXHJcblxyXG4gICAgICAgIC8vIFNldCB1cCB0aGUgT1NNIGxheWVyXHJcbiAgICAgICAgdGhpcy5tYXBUaWxlTGF5ZXIgPSBMLnRpbGVMYXllcignaHR0cHM6Ly97c30uYmFzZW1hcHMuY2FydG9jZG4uY29tL3Jhc3RlcnRpbGVzL3ZveWFnZXIve3p9L3t4fS97eX17cn0ucG5nJywge1xyXG4gICAgICAgICAgICBhdHRyaWJ1dGlvbjogJyZjb3B5OyA8YSBocmVmPVwiaHR0cHM6Ly93d3cub3BlbnN0cmVldG1hcC5vcmcvY29weXJpZ2h0XCI+T3BlblN0cmVldE1hcDwvYT4gY29udHJpYnV0b3JzICZjb3B5OyA8YSBocmVmPVwiaHR0cHM6Ly9jYXJ0by5jb20vYXR0cmlidXRpb25zXCI+Q0FSVE88L2E+JyxcclxuICAgICAgICAgICAgc3ViZG9tYWluczogJ2FiY2QnLFxyXG4gICAgICAgICAgICBjcm9zc09yaWdpbjogdHJ1ZSxcclxuICAgICAgICAgICAgbWluWm9vbTogNSxcclxuICAgICAgICAgICAgbWF4Wm9vbTogMjBcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgLy8gQWRkIHRoZSBsYXllciB0byB0aGUgbWFwXHJcbiAgICAgICAgdGhpcy5tYXBUaWxlTGF5ZXIuYWRkVG8odGhpcy5tYXApO1xyXG5cclxuICAgICAgICBjb25zb2xlLmxvZyh7IEwsIEdlb2NvZGVyLCBnZW9jb2RlciB9KTtcclxuXHJcbiAgICAgICAgLy8gQWRkIGdlb2NvZGVyIGNvbnRyb2xcclxuICAgICAgICBjb25zdCBtYXBHZW9jb2RlciA9IG5ldyBnZW9jb2RlcnMuQXJjR2lzKHtcclxuICAgICAgICAgICAgYXBpS2V5OiAnQUFQS2E5N2I4YTUzNzRkYjRmYTliMGZkZDhlNTUzNjFjYmE0WjlmRXV3M2NrQU9JRkhLMUNQX1ZielR2M09UZVV6M2dnckZBelZQemp5bjNRN2JRRnpid2tETXZEeGFKLUp6RycsXHJcbiAgICAgICAgICAgIGdlb2NvZGluZ1F1ZXJ5UGFyYW1zOiB7XHJcbiAgICAgICAgICAgICAgICBjb3VudHJ5Q29kZTogJ0FVJyxcclxuICAgICAgICAgICAgICAgIGNhdGVnb3J5OiAnQWRkcmVzcyxMYXRMb25nLE5laWdoYm9yaG9vZCxEaXN0cmljdCxDaXR5LE1ldHJvIEFyZWEnLFxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdGhpcy5tYXBTZWFyY2ggPSAoTC5Db250cm9sIGFzIHVua25vd24gYXMgeyBnZW9jb2RlcjogdHlwZW9mIGdlb2NvZGVyIH0pLmdlb2NvZGVyKHtcclxuICAgICAgICAgICAgcG9zaXRpb246ICd0b3BsZWZ0JyxcclxuICAgICAgICAgICAgY29sbGFwc2VkOiB0cnVlLFxyXG4gICAgICAgICAgICBkZWZhdWx0TWFya0dlb2NvZGU6IGZhbHNlLFxyXG4gICAgICAgICAgICBnZW9jb2RlcjogbWFwR2VvY29kZXIsXHJcbiAgICAgICAgICAgIHN1Z2dlc3RNaW5MZW5ndGg6IDUsXHJcbiAgICAgICAgICAgIHN1Z2dlc3RUaW1lb3V0OiAxMDAwLFxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICB0aGlzLm1hcFNlYXJjaC5vbignbWFya2dlb2NvZGUnLCAoZXZlbnQ6IGFueSkgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCBiYm94ID0gZXZlbnQuZ2VvY29kZS5iYm94O1xyXG4gICAgICAgICAgICB0aGlzLm1hcC5maXRCb3VuZHMoYmJveCwge1xyXG4gICAgICAgICAgICAgICAgJ21heFpvb20nOiAxNixcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHRoaXMubWFwU2VhcmNoLmFkZFRvKHRoaXMubWFwKTtcclxuXHJcblxyXG4gICAgICAgIC8vIEFkZCBsb2NhdGUgY29udHJvbFxyXG4gICAgICAgIHRoaXMubWFwTG9jYXRlID0gTC5jb250cm9sLmxvY2F0ZSh7XHJcbiAgICAgICAgICAgIHBvc2l0aW9uOiAndG9wbGVmdCcsXHJcbiAgICAgICAgICAgIGxvY2F0ZU9wdGlvbnM6IHtcclxuICAgICAgICAgICAgICAgIG1heFpvb206IDE2XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHNldFZpZXc6ICd1bnRpbFBhbicsXHJcbiAgICAgICAgICAgIGtlZXBDdXJyZW50Wm9vbUxldmVsOiB0cnVlLFxyXG4gICAgICAgICAgICBpbml0aWFsWm9vbUxldmVsOiAxNyxcclxuICAgICAgICAgICAgY2FjaGVMb2NhdGlvbjogdHJ1ZSxcclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzLm1hcExvY2F0ZS5hZGRUbyh0aGlzLm1hcCk7XHJcbiAgICAgICAgdGhpcy5tYXAub24oJ2xvY2F0ZWFjdGl2YXRlJywgKCkgPT4geyBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgnZ2VvbG9jYXRlJywgJzEnKTsgfSk7XHJcbiAgICAgICAgdGhpcy5tYXAub24oJ2xvY2F0ZWRlYWN0aXZhdGUnLCAoKSA9PiB7IGxvY2FsU3RvcmFnZS5yZW1vdmVJdGVtKCdnZW9sb2NhdGUnKTsgfSk7XHJcblxyXG4gICAgICAgIHRoaXMuc2V0SW5pdGlhbE1hcFZpZXcoKTtcclxuICAgICAgICBcclxuICAgICAgICAvLyBzdG9yZSBtYXAgcG9zaXRpb24gd2hlbiBtb3ZlZCBvciB6b29tZWRcclxuICAgICAgICB0aGlzLm1hcC5vbignbW92ZWVuZCcsIGFzeW5jICgpID0+IHtcclxuICAgICAgICAgICAgY29uc3QgY2VudGVyID0gdGhpcy5tYXAuZ2V0Q2VudGVyKCk7XHJcbiAgICAgICAgICAgIGNvbnN0IHpvb20gPSB0aGlzLm1hcC5nZXRab29tKCk7XHJcbiAgICAgICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCdzdGFydHBvcycsIEpTT04uc3RyaW5naWZ5KHsgbGF0OiBjZW50ZXIubGF0LCBsbmc6IGNlbnRlci5sbmcsIHpvb20gfSkpO1xyXG4gICAgICAgICAgICB0aGlzLnB1c2hCcm93c2VySGlzdG9yeSgpO1xyXG5cclxuICAgICAgICAgICAgaWYgKG1hcEdlb2NvZGVyLm9wdGlvbnMuZ2VvY29kaW5nUXVlcnlQYXJhbXMpIHtcclxuICAgICAgICAgICAgICAgIG1hcEdlb2NvZGVyLm9wdGlvbnMuZ2VvY29kaW5nUXVlcnlQYXJhbXMubG9jYXRpb24gPSBgJHtjZW50ZXIubG5nfSwke2NlbnRlci5sYXR9YDtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy9hd2FpdCB0aGlzLmRpc3BsYXlNYXJrZXJzSW5DdXJyZW50VmlldygpO1xyXG4gICAgICAgICAgICB0aGlzLmZldGNoRGF0YUZvckN1cnJlbnRWaWV3KCk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHRoaXMuZmV0Y2hEYXRhRm9yQ3VycmVudFZpZXcoKTtcclxuXHJcbiAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3BvcHN0YXRlJywgKCkgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCB1cmxQYXJhbXMgPSBuZXcgVVJMU2VhcmNoUGFyYW1zKHdpbmRvdy5sb2NhdGlvbi5zZWFyY2gpO1xyXG4gICAgICAgICAgICBjb25zdCBsYXQgPSB1cmxQYXJhbXMuZ2V0KCdsYXQnKTtcclxuICAgICAgICAgICAgY29uc3QgbG5nID0gdXJsUGFyYW1zLmdldCgnbG5nJyk7XHJcbiAgICAgICAgICAgIGNvbnN0IHpvb20gPSB1cmxQYXJhbXMuZ2V0KCd6b29tJyk7XHJcbiAgICAgICAgICAgIGlmIChsYXQgJiYgbG5nICYmIHpvb20pIHtcclxuICAgICAgICAgICAgICAgIHRoaXMubWFwLnNldFZpZXcoWyBOdW1iZXIobGF0KSwgTnVtYmVyKGxuZykgXSwgcGFyc2VJbnQoem9vbSkpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5pbml0aWFsVmlld1NldCA9IHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgICBcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIHB1c2hCcm93c2VySGlzdG9yeSgpIHtcclxuXHJcbiAgICAgICAgLy8gVXBkYXRlIGV4aXN0aW5nIFVSTCB3aXRoIGxhdCxsbmcsem9vbVxyXG4gICAgICAgIGNvbnN0IGNlbnRlciA9IHRoaXMubWFwLmdldENlbnRlcigpO1xyXG4gICAgICAgIGNvbnN0IHpvb20gPSB0aGlzLm1hcC5nZXRab29tKCk7XHJcblxyXG4gICAgICAgIGNvbnN0IHVybFBhcmFtcyA9IG5ldyBVUkxTZWFyY2hQYXJhbXMod2luZG93LmxvY2F0aW9uLnNlYXJjaCk7XHJcbiAgICAgICAgdXJsUGFyYW1zLnNldCgnbGF0JywgY2VudGVyLmxhdC50b1N0cmluZygpKTtcclxuICAgICAgICB1cmxQYXJhbXMuc2V0KCdsbmcnLCBjZW50ZXIubG5nLnRvU3RyaW5nKCkpO1xyXG4gICAgICAgIHVybFBhcmFtcy5zZXQoJ3pvb20nLCB6b29tLnRvU3RyaW5nKCkpO1xyXG4gICAgICAgIGNvbnN0IG5ld1VybCA9IHdpbmRvdy5sb2NhdGlvbi5wYXRobmFtZSArICc/JyArIHVybFBhcmFtcy50b1N0cmluZygpO1xyXG5cclxuICAgICAgICB3aW5kb3cuaGlzdG9yeS5wdXNoU3RhdGUoe30sICcnLCBuZXdVcmwpO1xyXG4gICAgICAgIFxyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgZ2V0U3RhcnRQb3MoKSA6IHsgbGF0OiBudW1iZXIsIGxuZzogbnVtYmVyLCB6b29tOiBudW1iZXIgfSB8IG51bGwge1xyXG4gICAgICAgIGNvbnN0IHN0YXJ0UG9zU3RyaW5nID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oJ3N0YXJ0cG9zJyk7XHJcbiAgICAgICAgaWYgKCFzdGFydFBvc1N0cmluZykge1xyXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICB9XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgcmV0dXJuIEpTT04ucGFyc2Uoc3RhcnRQb3NTdHJpbmcpIGFzIHsgbGF0OiBudW1iZXIsIGxuZzogbnVtYmVyLCB6b29tOiBudW1iZXIgfTtcclxuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBpbml0aWFsVmlld1NldCA9IGZhbHNlO1xyXG4gICAgcHJpdmF0ZSBzZXRJbml0aWFsTWFwVmlldygpIHtcclxuXHJcbiAgICAgICAgY29uc3QgbG9nZ2VyID0gdGhpcy5sb2dnZXIuc3ViKCdzZXRJbml0aWFsTWFwVmlldycpO1xyXG5cclxuICAgICAgICBpZiAodGhpcy5pbml0aWFsVmlld1NldCkge1xyXG4gICAgICAgICAgICBsb2dnZXIud2FybignSW5pdGlhbCBtYXAgdmlldyBhbHJlYWR5IHNldCcpO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBJZiBsYXQsbG5nLHpvb20gYXJlIGluIFVSTCwgc2V0IG1hcCB0byB0aGF0XHJcbiAgICAgICAgY29uc3QgdXJsUGFyYW1zID0gbmV3IFVSTFNlYXJjaFBhcmFtcyh3aW5kb3cubG9jYXRpb24uc2VhcmNoKTtcclxuICAgICAgICBjb25zdCBsYXQgPSB1cmxQYXJhbXMuZ2V0KCdsYXQnKTtcclxuICAgICAgICBjb25zdCBsbmcgPSB1cmxQYXJhbXMuZ2V0KCdsbmcnKTtcclxuICAgICAgICBjb25zdCB6b29tID0gdXJsUGFyYW1zLmdldCgnem9vbScpO1xyXG4gICAgICAgIGlmIChsYXQgJiYgbG5nICYmIHpvb20pIHtcclxuICAgICAgICAgICAgdGhpcy5tYXAuc2V0VmlldyhbIE51bWJlcihsYXQpLCBOdW1iZXIobG5nKSBdLCBwYXJzZUludCh6b29tKSk7XHJcbiAgICAgICAgICAgIHRoaXMuaW5pdGlhbFZpZXdTZXQgPSB0cnVlO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zdCBnZW9GbGFnID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oJ2dlb2xvY2F0ZScpO1xyXG4gICAgICAgIGNvbnN0IHN0YXJ0UG9zID0gdGhpcy5nZXRTdGFydFBvcygpO1xyXG5cclxuICAgICAgICAvLyBJZiBsb2NhbCBzdG9yYWdlIGNvbnRhaW5zIGxhc3QgbWFwIHBvc2l0aW9uLCBzZXQgbWFwIHRvIHRoYXRcclxuICAgICAgICBpZiAoc3RhcnRQb3MpIHtcclxuICAgICAgICAgICAgdGhpcy5tYXAuc2V0VmlldyhbIHN0YXJ0UG9zLmxhdCwgc3RhcnRQb3MubG5nIF0sIHN0YXJ0UG9zLnpvb20pO1xyXG4gICAgICAgICAgICB0aGlzLmluaXRpYWxWaWV3U2V0ID0gdHJ1ZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIFNldCB0byBBdXN0cmFsaWEgaWYgbm8gc3RhcnQgcG9zaXRpb25cclxuICAgICAgICBpZiAoIXN0YXJ0UG9zKSB7XHJcbiAgICAgICAgICAgIHRoaXMubWFwLnNldFZpZXcoWyAtMjYuMTc3MjI4OCwgMTMzLjQxNzAxMTkgXSwgMTApO1xyXG4gICAgICAgICAgICB0aGlzLmluaXRpYWxWaWV3U2V0ID0gdHJ1ZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIElmIGxvY2FsIHN0b3JhZ2UgY29udGFpbnMgZ2VvbG9jYXRlIGZsYWdcclxuICAgICAgICAvLyBvciwgaWYgbm8gc3RhcnQgcG9zaXRpb24sIHN0YXJ0IGdlb2xvY2F0aW9uXHJcbiAgICAgICAgaWYgKGdlb0ZsYWcgfHwgIXN0YXJ0UG9zKSB7XHJcbiAgICAgICAgICAgIHRoaXMubWFwTG9jYXRlLnN0YXJ0KCk7XHJcbiAgICAgICAgICAgIHRoaXMubWFwLnNldFpvb20oMTcpO1xyXG4gICAgICAgICAgICB0aGlzLmluaXRpYWxWaWV3U2V0ID0gdHJ1ZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICghdGhpcy5pbml0aWFsVmlld1NldCkge1xyXG4gICAgICAgICAgICBsb2dnZXIuZXJyb3IoJ0NvdWxkIG5vdCBzZXQgaW5pdGlhbCBtYXAgdmlldycpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBkZWJ1Z0JveGVzOiBMLlJlY3RhbmdsZVtdID0gW107XHJcbiAgICBnZXRCb3hlc0luQm91bmRzKGJvdW5kczogTC5MYXRMbmdCb3VuZHMpOiBMLkxhdExuZ0JvdW5kc1tdIHtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgLy8gU3RhcnRpbmcgcG9pbnQgc2hvdWxkIGJlIHRoZSBub3J0aC13ZXN0IGNvcm5lciBvZiB0aGUgbWFwIHJvdW5kZWQgYmV5b25kIHRoZSBtYXAgYm91bmRzXHJcbiAgICAgICAgLy8gTGF0aXR1ZGUgaXMgcm91bmRlZCB0byAyIGRlY2ltYWwgcGxhY2VzIG11bHRpcGxlIG9mIDAuMDJcclxuICAgICAgICAvLyBMb25naXR1ZGUgaXMgcm91bmRlZCB0byAyIGRlY2ltYWwgcGxhY2VzIG11bHRpcGxlIG9mIDAuMDJcclxuICAgICAgICBjb25zdCBub3J0aG1vc3QgPSBNYXRoLmNlaWwoYm91bmRzLmdldE5vcnRoKCkgLyAwLjAyKSAqIDAuMDI7XHJcbiAgICAgICAgY29uc3Qgd2VzdG1tb3N0ID0gTWF0aC5mbG9vcihib3VuZHMuZ2V0V2VzdCgpIC8gMC4wMikgKiAwLjAyO1xyXG5cclxuICAgICAgICAvLyBzcGxpdCBtYXAgaW50byBib3hlcyBzdGFydGluZyBmcm9tIG5vcnRoLXdlc3QgY29ybmVyXHJcbiAgICAgICAgLy8gZWFjaCBib3ggc2hvdWxkIGJlIDAuMDIgZGVncmVlcyBsYXRpdHVkZSBieSAwLjAyIGRlZ3JlZXMgbG9uZ2l0dWRlXHJcbiAgICAgICAgY29uc3QgYm94ZXMgPSBbXTtcclxuICAgICAgICBmb3IgKGxldCBsYXRpdHVkZSA9IG5vcnRobW9zdDsgbGF0aXR1ZGUgPiBib3VuZHMuZ2V0U291dGgoKTsgbGF0aXR1ZGUgLT0gMC4wMikge1xyXG4gICAgICAgICAgICBmb3IgKGxldCBsb25naXR1ZGUgPSB3ZXN0bW1vc3Q7IGxvbmdpdHVkZSA8IGJvdW5kcy5nZXRFYXN0KCk7IGxvbmdpdHVkZSArPSAwLjAyKSB7XHJcbiAgICAgICAgICAgICAgICBib3hlcy5wdXNoKFtOdW1iZXIobGF0aXR1ZGUudG9GaXhlZCgyKSksIE51bWJlcihsb25naXR1ZGUudG9GaXhlZCgyKSldKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKGlzRGVidWdNb2RlKCkpIHtcclxuICAgICAgICAgICAgY29uc29sZS5sb2coJ0JvdW5kcycsIGJvdW5kcyk7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdCb3hlcycsIGJveGVzKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIE1hcCBlYWNoIGJveCBpbnRvIGEgYm91bmRzIG9iamVjdFxyXG4gICAgICAgIGNvbnN0IGJveEJvdW5kcyA9IGJveGVzLm1hcChib3ggPT4ge1xyXG4gICAgICAgICAgICBjb25zdCBub3J0aCA9IGJveFswXTtcclxuICAgICAgICAgICAgY29uc3Qgd2VzdCA9IGJveFsxXTtcclxuICAgICAgICAgICAgY29uc3Qgc291dGggPSBub3J0aCAtIDAuMDI7XHJcbiAgICAgICAgICAgIGNvbnN0IGVhc3QgPSB3ZXN0ICsgMC4wMjtcclxuICAgICAgICAgICAgcmV0dXJuIEwubGF0TG5nQm91bmRzKFtzb3V0aCwgd2VzdF0sIFtub3J0aCwgZWFzdF0pO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBpZiAoaXNEZWJ1Z01vZGUoKSkge1xyXG4gICAgICAgICAgICB0aGlzLmRlYnVnQm94ZXMuZm9yRWFjaChib3ggPT4gdGhpcy5tYXAucmVtb3ZlTGF5ZXIoYm94KSk7XHJcbiAgICAgICAgICAgIHRoaXMuZGVidWdCb3hlcyA9IGJveEJvdW5kcy5tYXAoYm94ID0+IHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBMLnJlY3RhbmdsZShib3gsIHtjb2xvcjogXCIjMDAwMDAwXCIsIHdlaWdodDogMiwgZmlsbENvbG9yOiAnI2ZmNzgwMCcsIGZpbGxPcGFjaXR5OiAwLjAxfSkuYWRkVG8odGhpcy5tYXApO1xyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIGJveEJvdW5kcztcclxuXHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBGZXRjaCBib3hlcyB0aGF0IGFyZSB2aXNpYmxlIG9uIHRoZSBtYXBcclxuICAgICAqL1xyXG4gICAgZ2V0Q3VycmVudFZpZXdCb3hlcygpOiBMLkxhdExuZ0JvdW5kc1tdXHJcbiAgICB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0Qm94ZXNJbkJvdW5kcyh0aGlzLm1hcC5nZXRCb3VuZHMoKSk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBIaWRlIG1hcmtlcnMgdGhhdCBhcmUgb3V0c2lkZSB0aGUgbWFwIGJvdW5kc1xyXG4gICAgICovXHJcbiAgICBoaWRlTWFya2Vyc091dHNpZGVDdXJyZW50VmlldygpIHtcclxuICAgICAgICBjb25zdCBtYXBCb3VuZHMgPSB0aGlzLm1hcC5nZXRCb3VuZHMoKS5wYWQoMC41KTtcclxuICAgICAgICB0aGlzLm1hcmtlckxheWVyLnJlbW92ZU1hcmtlcnNPdXRzaWRlQm91bmRzKG1hcEJvdW5kcyk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBEaXNwbGF5IG1hcmtlcnMgdGhhdCBhcmUgaW5zaWRlIHRoZSBtYXAgYm91bmRzXHJcbiAgICAgKi9cclxuICAgIGFzeW5jIERFUF9kaXNwbGF5TWFya2Vyc0luQ3VycmVudFZpZXcoYXR0ZW1wdDogbnVtYmVyID0gMSkge1xyXG5cclxuICAgICAgICAvKlxyXG4gICAgICAgIGlmICh0aGlzLmRhdGFzdG9yZS5pc1JlYWR5KCkgPT09IGZhbHNlKSB7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBpZiAoYXR0ZW1wdCA+IDEwKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKCdDb3VsZCBub3QgZ2V0IGRhdGFzdG9yZSByZWFkeS4gR2l2aW5nIHVwLicpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBjb25zb2xlLndhcm4oJ0RhdGFzdG9yZSBpcyBub3QgcmVhZHkuIERlbGF5aW5nIGRpc3BsYXlNYXJrZXJzSW5DdXJyZW50VmlldygpJyk7XHJcbiAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4gdGhpcy5kaXNwbGF5TWFya2Vyc0luQ3VycmVudFZpZXcoYXR0ZW1wdCsxKSwgMTAwMCk7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnNvbGUubG9nKCdEaXNwbGF5aW5nIG1hcmtlcnMgaW4gY3VycmVudCB2aWV3Jyk7XHJcbiAgICAgICAgY29uc3QgbWFwQm91bmRzID0gcm91bmRCb3VuZHModGhpcy5tYXAuZ2V0Qm91bmRzKCkpO1xyXG4gICAgICAgIFxyXG4gICAgICAgIGNvbnNvbGUubG9nKCdGZXRjaGluZyBmcm9tIERhdGFzdG9yZScsIG1hcEJvdW5kcyk7XHJcbiAgICAgICAgLy8gdGhpcy5yZWZyZXNoUG9pbnRzRnJvbVN0b3JlKG1hcEJvdW5kcyk7XHJcbiAgICAgICAgKi9cclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIHpvb21Jbldhcm5pbmdDb250cm9sPzogTC5Db250cm9sO1xyXG5cclxuICAgIHNob3dab29tSW5XYXJuaW5nKCkge1xyXG4gICAgICAgIGlmKCF0aGlzLnpvb21Jbldhcm5pbmdDb250cm9sKSB7XHJcbiAgICAgICAgICAgIHRoaXMuem9vbUluV2FybmluZ0NvbnRyb2wgPSBuZXcgTC5Db250cm9sKHsgcG9zaXRpb246ICd0b3ByaWdodCcgfSk7XHJcbiAgICAgICAgICAgIHRoaXMuem9vbUluV2FybmluZ0NvbnRyb2wub25BZGQgPSAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBkaXYgPSBMLkRvbVV0aWwuY3JlYXRlKCdkaXYnLCAnaW5mbyBsZWdlbmQnKTtcclxuICAgICAgICAgICAgICAgIGRpdi5pbm5lckhUTUwgPSAnPGg0IHN0eWxlPVwibWFyZ2luOjBcIj5BcmVhIFRvbyBCaWchPC9oND4nO1xyXG4gICAgICAgICAgICAgICAgZGl2LmlubmVySFRNTCArPSAnPHAgc3R5bGU9XCJtYXJnaW46MFwiPkxvY2F0aW9uIGxvYWRpbmcgaXMgcGF1c2VkIHVudGlsIHlvdSB6b29tIGluLjwvcD4nO1xyXG4gICAgICAgICAgICAgICAgZGl2LnN0eWxlLmJhY2tncm91bmRDb2xvciA9ICcjZmY5ODAwJztcclxuICAgICAgICAgICAgICAgIGRpdi5zdHlsZS5vcGFjaXR5ID0gJzAuOCc7XHJcbiAgICAgICAgICAgICAgICBkaXYuc3R5bGUucGFkZGluZyA9ICcxMHB4IDIwcHgnO1xyXG4gICAgICAgICAgICAgICAgZGl2LnN0eWxlLmNvbG9yID0gJyNmZmZmZmYnO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGRpdjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCB6b29tSW5XYXJuaW5nQ29udHJvbCA9IHRoaXMuem9vbUluV2FybmluZ0NvbnRyb2w7XHJcbiAgICAgICAgc2V0VGltZW91dCgoKSA9PiB0aGlzLm1hcC5hZGRDb250cm9sKHpvb21Jbldhcm5pbmdDb250cm9sKSwgMTAwMCk7XHJcbiAgICB9XHJcbiAgICBoaWRlWm9vbUluV2FybmluZygpIHtcclxuICAgICAgICBpZiAodGhpcy56b29tSW5XYXJuaW5nQ29udHJvbCkge1xyXG4gICAgICAgICAgICB0aGlzLm1hcC5yZW1vdmVDb250cm9sKHRoaXMuem9vbUluV2FybmluZ0NvbnRyb2wpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIGZldGNoZWRCb3hlczogU2V0PHN0cmluZz4gPSBuZXcgU2V0KCk7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBGZXRjaCBkYXRhIGZvciBjdXJyZW50IG1hcCB2aWV3XHJcbiAgICAgKi9cclxuICAgIGFzeW5jIGZldGNoRGF0YUZvckN1cnJlbnRWaWV3KCkge1xyXG5cclxuICAgICAgICBjb25zdCBsb2dnZXIgPSB0aGlzLmxvZ2dlci5zdWIoJ2ZldGNoRGF0YUZvckN1cnJlbnRWaWV3Jyk7XHJcblxyXG4gICAgICAgIC8vdGhpcy5oaWRlTWFya2Vyc091dHNpZGVDdXJyZW50VmlldygpO1xyXG4gICAgICAgIC8vdGhpcy5kaXNwbGF5TWFya2Vyc0luQ3VycmVudFZpZXcoKTtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMubWFwLmdldFpvb20oKSA8IDExKSB7XHJcbiAgICAgICAgICAgIGxvZ2dlci53YXJuKCdab29tIGxldmVsIHRvbyBsb3cuIFNraXBwaW5nLicpO1xyXG4gICAgICAgICAgICB0aGlzLnNob3dab29tSW5XYXJuaW5nKCk7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIEdldCBib3hlcyB0aGF0IGFyZSBjdXJyZW50bHkgdmlzaWJsZVxyXG4gICAgICAgIGNvbnN0IGJveGVzID0gdGhpcy5nZXRDdXJyZW50Vmlld0JveGVzKCk7XHJcbiAgICAgICAgbG9nZ2VyLmRlYnVnKCdDdXJyZW50IHZpZXcgYm94ZXMnLCBib3hlcyk7XHJcblxyXG4gICAgICAgIC8vIEZpbHRlciBvdXQgYm94ZXMgdGhhdCBoYXZlIGFscmVhZHkgYmVlbiBmZXRjaGVkXHJcbiAgICAgICAgY29uc3QgdW5mZXRjaGVkQm94ZXMgPSBib3hlcy5maWx0ZXIoYm94ID0+ICF0aGlzLmZldGNoZWRCb3hlcy5oYXMoYm94LmdldENlbnRlcigpLnRvU3RyaW5nKCkpKTtcclxuXHJcbiAgICAgICAgLy8gSWYgbm8gYm94ZXMgdG8gZmV0Y2gsIHJldHVyblxyXG4gICAgICAgIGlmICh1bmZldGNoZWRCb3hlcy5sZW5ndGggPT0gMCkge1xyXG4gICAgICAgICAgICB0aGlzLmhpZGVab29tSW5XYXJuaW5nKCk7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIERvbid0IGZldGNoIGJveGVzIGlmIG1vcmUgdGhhbiA1MFxyXG4gICAgICAgIGlmICh1bmZldGNoZWRCb3hlcy5sZW5ndGggPiB0aGlzLk1BWF9VTkZFVENIRURfQk9YRVMpIHtcclxuICAgICAgICAgICAgbG9nZ2VyLndhcm4oJ1RvbyBtYW55IGJveGVzIHRvIGZldGNoLiBTa2lwcGluZy4nKTtcclxuICAgICAgICAgICAgdGhpcy5zaG93Wm9vbUluV2FybmluZygpO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBIaWRlIHpvb20gaW4gd2FybmluZ1xyXG4gICAgICAgIHRoaXMuaGlkZVpvb21Jbldhcm5pbmcoKTtcclxuXHJcbiAgICAgICAgLy8gU2V0IHVwZGF0ZSBrZXlcclxuICAgICAgICBjb25zdCB1cGRhdGVLZXkgPSB0aGlzLm1hcC5nZXRDZW50ZXIoKS50b1N0cmluZygpICsgdGhpcy5tYXAuZ2V0Wm9vbSgpO1xyXG5cclxuICAgICAgICAvLyBDcmVhdGUgcHJvZ3Jlc3MgaXRlbVxyXG4gICAgICAgIGNvbnN0IHByb2dyZXNzSXRlbSA9IHRoaXMuY3JlYXRlUHJvZ3Jlc3ModXBkYXRlS2V5LCB1bmZldGNoZWRCb3hlcy5sZW5ndGgsICdGZXRjaGluZyBzZWN0aW9ucy4uLicpO1xyXG4gICAgICAgIHRoaXMucmVuZGVyUHJvZ3Jlc3MoKTtcclxuXHJcbiAgICAgICAgbGV0IGJveGVzUHJvY2Vzc2VkID0gMDtcclxuXHJcbiAgICAgICAgLy8gRm9yIGVhY2ggYm94LCBmZXRjaCBkYXRhXHJcbiAgICAgICAgZm9yIChjb25zdCBib3ggb2YgdW5mZXRjaGVkQm94ZXMpIHtcclxuXHJcbiAgICAgICAgICAgIGlmICh0aGlzLm1hcC5nZXRDZW50ZXIoKS50b1N0cmluZygpICsgdGhpcy5tYXAuZ2V0Wm9vbSgpICE9IHVwZGF0ZUtleSkge1xyXG4gICAgICAgICAgICAgICAgbG9nZ2VyLmRlYnVnKCdNYXAgbW92ZWQuIEZldGNoIHN0b3BwZWQuJyk7XHJcbiAgICAgICAgICAgICAgICBwcm9ncmVzc0l0ZW0udGV4dCA9ICdNYXAgbW92ZWQuIEZldGNoIHN0b3BwZWQuJztcclxuICAgICAgICAgICAgICAgIHRoaXMudXBkYXRlUHJvZ3Jlc3ModXBkYXRlS2V5LCBib3hlc1Byb2Nlc3NlZCwgdHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGF3YWl0IHRoaXMuZmV0Y2hEYXRhKGJveCk7XHJcbiAgICAgICAgICAgIHRoaXMuZmV0Y2hlZEJveGVzLmFkZChib3guZ2V0Q2VudGVyKCkudG9TdHJpbmcoKSk7XHJcbiAgICAgICAgICAgIGJveGVzUHJvY2Vzc2VkKys7XHJcbiAgICAgICAgICAgIHRoaXMudXBkYXRlUHJvZ3Jlc3ModXBkYXRlS2V5LCBib3hlc1Byb2Nlc3NlZCwgZmFsc2UpO1xyXG5cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMudXBkYXRlUHJvZ3Jlc3ModXBkYXRlS2V5LCBib3hlc1Byb2Nlc3NlZCwgdHJ1ZSk7XHJcbiAgICAgICAgbG9nZ2VyLmRlYnVnKCdBbGwgYm94ZXMgZmV0Y2hlZCcpO1xyXG5cclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIHByb2dyZXNzQ29udHJvbCA9IG5ldyBMLkNvbnRyb2woeyBwb3NpdGlvbjogJ2JvdHRvbWxlZnQnIH0pO1xyXG4gICAgcHJpdmF0ZSBwcm9ncmVzc0l0ZW1zOiB7XHJcbiAgICAgICAgW2tleTogc3RyaW5nXToge1xyXG4gICAgICAgICAgICBzdGFydGVkOiBEYXRlLFxyXG4gICAgICAgICAgICBmaW5pc2hlZD86IERhdGUsXHJcbiAgICAgICAgICAgIHRleHQ6IHN0cmluZyxcclxuICAgICAgICAgICAgY29tcGxldGU6IGJvb2xlYW4sXHJcbiAgICAgICAgICAgIHByb2dyZXNzOiBudW1iZXIsXHJcbiAgICAgICAgICAgIHRvdGFsOiBudW1iZXIsXHJcbiAgICAgICAgfVxyXG4gICAgfSA9IHt9O1xyXG5cclxuICAgIHByaXZhdGUgY3JlYXRlUHJvZ3Jlc3Moa2V5OiBzdHJpbmcsIHRvdGFsOiBudW1iZXIsIHRleHQ6IHN0cmluZykge1xyXG4gICAgICAgIC8vIENyZWF0ZSBuZXcgaXRlbVxyXG4gICAgICAgIHRoaXMucHJvZ3Jlc3NJdGVtc1trZXldID0ge1xyXG4gICAgICAgICAgICBzdGFydGVkOiBuZXcgRGF0ZSgpLFxyXG4gICAgICAgICAgICBmaW5pc2hlZDogdW5kZWZpbmVkLFxyXG4gICAgICAgICAgICBjb21wbGV0ZTogZmFsc2UsXHJcbiAgICAgICAgICAgIHByb2dyZXNzOiAwLFxyXG4gICAgICAgICAgICB0b3RhbCwgdGV4dFxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdGhpcy5wcm9ncmVzc0l0ZW1zW2tleV07XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSB1cGRhdGVQcm9ncmVzcyhrZXk6IHN0cmluZywgcHJvZ3Jlc3M6IG51bWJlciwgY29tcGxldGU6IGJvb2xlYW4pIHtcclxuICAgICAgICBpZiAoIXRoaXMucHJvZ3Jlc3NJdGVtc1trZXldKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgUHJvZ3Jlc3MgaXRlbSB3aXRoIGtleSAke2tleX0gZG9lcyBub3QgZXhpc3RgKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5wcm9ncmVzc0l0ZW1zW2tleV0uZmluaXNoZWQgPSBjb21wbGV0ZSA/IG5ldyBEYXRlKCkgOiB1bmRlZmluZWQ7XHJcbiAgICAgICAgdGhpcy5wcm9ncmVzc0l0ZW1zW2tleV0uY29tcGxldGUgPSBjb21wbGV0ZTtcclxuICAgICAgICB0aGlzLnByb2dyZXNzSXRlbXNba2V5XS5wcm9ncmVzcyA9IHByb2dyZXNzO1xyXG4gICAgICAgIHRoaXMucmVuZGVyUHJvZ3Jlc3MoKTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIHJlbmRlclByb2dyZXNzKCkge1xyXG5cclxuICAgICAgICAvLyBEZWxldGUgaXRlbXMgZmluaXNoZWQgbW9yZSB0aGFuIDUgc2Vjb25kcyBhZ29cclxuICAgICAgICBjb25zdCBub3cgPSBuZXcgRGF0ZSgpO1xyXG4gICAgICAgIGNvbnN0IGtleXMgPSBPYmplY3Qua2V5cyh0aGlzLnByb2dyZXNzSXRlbXMpO1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBjb25zdCBrZXkgPSBrZXlzW2ldO1xyXG4gICAgICAgICAgICBpZiAoIXRoaXMucHJvZ3Jlc3NJdGVtc1trZXldKSBjb250aW51ZTtcclxuICAgICAgICAgICAgY29uc3QgZmluaXNoZWQgPSB0aGlzLnByb2dyZXNzSXRlbXNba2V5XS5maW5pc2hlZDtcclxuICAgICAgICAgICAgaWYgKGZpbmlzaGVkKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoKG5vdy5nZXRUaW1lKCkgLSBmaW5pc2hlZC5nZXRUaW1lKCkpID4gNTAwMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGRlbGV0ZSB0aGlzLnByb2dyZXNzSXRlbXNba2V5XTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gSWYgbm8gaXRlbXMsIGhpZGUgcHJvZ3Jlc3NcclxuICAgICAgICBpZiAoT2JqZWN0LmtleXModGhpcy5wcm9ncmVzc0l0ZW1zKS5sZW5ndGggPT0gMCkge1xyXG4gICAgICAgICAgICB0aGlzLmhpZGVQcm9ncmVzcygpO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBSZW5kZXIgcHJvZ3Jlc3NcclxuICAgICAgICB0aGlzLnByb2dyZXNzQ29udHJvbC5vbkFkZCA9ICgpID0+IHtcclxuICAgICAgICAgICAgY29uc3QgZGl2ID0gTC5Eb21VdGlsLmNyZWF0ZSgnZGl2JywgJ2luZm8gbGVnZW5kJyk7XHJcbiAgICAgICAgICAgIGRpdi5pbm5lckhUTUwgPSAnPGg0IHN0eWxlPVwibWFyZ2luOjBcIj5Mb2FkaW5nLi4uPC9oND4nO1xyXG4gICAgICAgICAgICBjb25zdCBpdGVtcyA9IE9iamVjdC52YWx1ZXModGhpcy5wcm9ncmVzc0l0ZW1zKTtcclxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBpdGVtcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgaXRlbSA9IGl0ZW1zW2ldO1xyXG4gICAgICAgICAgICAgICAgLy8gc2tpcCBpdGVtIGlmIGZpbmlzaGVkIG1vcmUgdGhhbiAxMCBzZWNvbmRzIGFnb1xyXG4gICAgICAgICAgICAgICAgaWYgKGl0ZW0uZmluaXNoZWQgJiYgKG5ldyBEYXRlKCkuZ2V0VGltZSgpIC0gaXRlbS5maW5pc2hlZC5nZXRUaW1lKCkgPiAxMDAwMCkpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNvbnN0IHByb2dyZXNzID0gaXRlbS5wcm9ncmVzcyAvIGl0ZW0udG90YWwgKiAxMDA7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBwcm9ncmVzc1RleHQgPSBpdGVtLmNvbXBsZXRlID8gJ0NvbXBsZXRlJyA6IGAke2l0ZW0ucHJvZ3Jlc3N9IG9mICR7aXRlbS50b3RhbH1gO1xyXG4gICAgICAgICAgICAgICAgZGl2LmlubmVySFRNTCArPSBgPHAgc3R5bGU9XCJtYXJnaW46MFwiPiR7aXRlbS50ZXh0fSAoJHtwcm9ncmVzc1RleHR9KTwvcD5gO1xyXG4gICAgICAgICAgICAgICAgZGl2LmlubmVySFRNTCArPSBgPHByb2dyZXNzIHZhbHVlPVwiJHtwcm9ncmVzc31cIiBtYXg9XCIxMDBcIj48L3Byb2dyZXNzPmA7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZGl2LnN0eWxlLmJhY2tncm91bmRDb2xvciA9ICcjMDAwMDAwJztcclxuICAgICAgICAgICAgZGl2LnN0eWxlLm9wYWNpdHkgPSAnMC44JztcclxuICAgICAgICAgICAgZGl2LnN0eWxlLnBhZGRpbmcgPSAnMTBweCAyMHB4JztcclxuICAgICAgICAgICAgZGl2LnN0eWxlLmNvbG9yID0gJyNmZmZmZmYnO1xyXG4gICAgICAgICAgICByZXR1cm4gZGl2O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gQWRkIHByb2dyZXNzIHRvIG1hcFxyXG4gICAgICAgIHRoaXMubWFwLmFkZENvbnRyb2wodGhpcy5wcm9ncmVzc0NvbnRyb2wpO1xyXG5cclxuICAgICAgICAvLyBIaWRlIHByb2dyZXNzIGFmdGVyIDUgc2Vjb25kcyBpZiBhbGwgY29tcGxldGVcclxuICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgICAgICAgaWYgKE9iamVjdC52YWx1ZXModGhpcy5wcm9ncmVzc0l0ZW1zKS5ldmVyeShpdGVtID0+IGl0ZW0uY29tcGxldGUpKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmhpZGVQcm9ncmVzcygpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSwgNTAwMCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBoaWRlUHJvZ3Jlc3MoKSB7XHJcbiAgICAgICAgdGhpcy5tYXAucmVtb3ZlQ29udHJvbCh0aGlzLnByb2dyZXNzQ29udHJvbCk7XHJcbiAgICB9XHJcblxyXG4gICAgYXN5bmMgZmV0Y2hEYXRhKFxyXG4gICAgICAgIGJvdW5kczogTC5MYXRMbmdCb3VuZHMsIHBhZ2U6IG51bWJlciA9IDFcclxuICAgICkgOiBQcm9taXNlPHZvaWQ+XHJcbiAgICB7XHJcbiAgICAgICAgY29uc3QgbG9nZ2VyID0gdGhpcy5sb2dnZXIuc3ViKCdmZXRjaERhdGEnKTtcclxuXHJcbiAgICAgICAgbG9nZ2VyLmRlYnVnKCdGZXRjaGluZyBCb3gnLCBib3VuZHMuZ2V0Q2VudGVyKCkudG9TdHJpbmcoKSwgcGFnZSk7XHJcblxyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBjb25zdCBkYXRhID0gYXdhaXQgdGhpcy5hcGkuZmV0Y2hQYWdlKGJvdW5kcywgcGFnZSwgKCkgPT4gdGhpcy5tYXAuZ2V0Qm91bmRzKCkuaW50ZXJzZWN0cyhib3VuZHMpKTtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIHRoaXMucHJvY2Vzc0ZldGNoUmVzdWx0KGRhdGEsIGJvdW5kcyk7XHJcblxyXG4gICAgICAgICAgICBpZiAoZGF0YS5uZXh0KSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gYXdhaXQgdGhpcy5mZXRjaERhdGEoYm91bmRzLCBkYXRhLm5leHQpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICByZXR1cm47XHJcblxyXG4gICAgICAgIH0gY2F0Y2ggKGVycm9yOiBhbnkpIHtcclxuICAgICAgICAgICAgaWYgKGVycm9yLm1lc3NhZ2UgPT0gJ1BhZ2UgYWxyZWFkeSBsb2FkZWQgdGhpcyBzZXNzaW9uLicpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKGVycm9yKVxyXG4gICAgICAgIH1cclxuXHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBQcm9jZXNzIFJlc3VsdHMgRmV0Y2hlZCBmcm9tIEFQSVxyXG4gICAgICogU3RvcmVzIHBsYWNlcyBpbiBwbGFjZSBzdG9yZVxyXG4gICAgICogU2VuZHMgcG9pbnRzIHRvIG1hcmtlciBsYXllclxyXG4gICAgICogQHBhcmFtIHJlc3VsdCBcclxuICAgICAqIEBwYXJhbSBib3VuZHMgXHJcbiAgICAgKi9cclxuICAgIHByb2Nlc3NGZXRjaFJlc3VsdChyZXN1bHQ6IE5iblBsYWNlQXBpUmVzcG9uc2UsIGJvdW5kczogTC5MYXRMbmdCb3VuZHMpIHtcclxuXHJcbiAgICAgICAgY29uc3QgbG9nZ2VyID0gdGhpcy5sb2dnZXIuc3ViKCdwcm9jZXNzRmV0Y2hSZXN1bHQnKTtcclxuXHJcbiAgICAgICAgbG9nZ2VyLmRlYnVnKCdQcm9jZXNzaW5nIEZldGNoIFJlc3VsdCcsIHJlc3VsdCwgYm91bmRzKTtcclxuXHJcbiAgICAgICAgLy8gU3RvcmUgcGxhY2VzXHJcbiAgICAgICAgdGhpcy5wbGFjZVN0b3JlLnN0b3JlUGxhY2VzKHJlc3VsdC5wbGFjZXMpO1xyXG5cclxuICAgICAgICAvLyBDcmVhdGUgdGVtcCBzdG9yYWdlIGZvciBwb2ludHNcclxuICAgICAgICBjb25zdCBwb2ludHM6IE1hcDxzdHJpbmcsIFBvaW50QW5kTG9jaWRzPiA9IG5ldyBNYXAoKTtcclxuXHJcbiAgICAgICAgLy8gQWRkIHBsYWNlIGxvY2lkcyB0byBwb2ludHNcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHJlc3VsdC5wbGFjZXMubGVuZ3RoOyBpKyspIHtcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IHBsYWNlID0gcmVzdWx0LnBsYWNlc1tpXTtcclxuXHJcbiAgICAgICAgICAgIGlmICghdGhpcy5tb2RlSGFuZGxlci5maWx0ZXIocGxhY2UpKSB7XHJcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgY29uc3QgbGF0TG5nID0gYCR7cGxhY2UubGF0aXR1ZGV9LCR7cGxhY2UubG9uZ2l0dWRlfWA7XHJcblxyXG4gICAgICAgICAgICBjb25zdCBwbGFjZUNvbG91ciA9IHRoaXMubW9kZUhhbmRsZXIucGxhY2VDb2xvdXIocGxhY2UpO1xyXG5cclxuICAgICAgICAgICAgLy8gQ3JlYXRlIHBvaW50IGlmIG5vdCBhbHJlYWR5IHRoZXJlXHJcbiAgICAgICAgICAgIGNvbnN0IGV4aXN0aW5nUG9pbnQgPSBwb2ludHMuZ2V0KGxhdExuZyk7XHJcbiAgICAgICAgICAgIGlmICghZXhpc3RpbmdQb2ludCkge1xyXG4gICAgICAgICAgICAgICAgcG9pbnRzLnNldChsYXRMbmcsIHtcclxuICAgICAgICAgICAgICAgICAgICBsYXQ6IHBsYWNlLmxhdGl0dWRlLFxyXG4gICAgICAgICAgICAgICAgICAgIGxuZzogcGxhY2UubG9uZ2l0dWRlLFxyXG4gICAgICAgICAgICAgICAgICAgIGNvbDogWyBwbGFjZUNvbG91ciBdLFxyXG4gICAgICAgICAgICAgICAgICAgIGFkZDogWyBwbGFjZS5hZGRyZXNzMSBdLFxyXG4gICAgICAgICAgICAgICAgICAgIGlkczogWyBwbGFjZS5sb2NpZCBdLFxyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAvLyBBZGQgbG9jaWQgdG8gcG9pbnQgaWYgbm90IGFscmVhZHkgdGhlcmVcclxuICAgICAgICAgICAgICAgIGlmICghZXhpc3RpbmdQb2ludC5pZHMuaW5jbHVkZXMocGxhY2UubG9jaWQpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZXhpc3RpbmdQb2ludC5pZHMucHVzaChwbGFjZS5sb2NpZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgZXhpc3RpbmdQb2ludC5hZGQucHVzaChwbGFjZS5hZGRyZXNzMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgZXhpc3RpbmdQb2ludC5jb2wucHVzaChwbGFjZUNvbG91cik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBTZW5kIHBvaW50cyB0byBtYXJrZXIgbGF5ZXJcclxuICAgICAgICBsb2dnZXIuZGVidWcoJ0FkZGluZyBwb2ludHMgdG8gbWFya2VyIGxheWVyJywgcG9pbnRzKTtcclxuICAgICAgICB0aGlzLm1hcmtlckxheWVyLmFkZFBvaW50cyhwb2ludHMpO1xyXG5cclxuICAgIH1cclxuXHJcbiAgICBhc3luYyBERVBSX3JlZnJlc2hQb2ludHNGcm9tU3RvcmUoYm91bmRzPzogTC5MYXRMbmdCb3VuZHMpIHtcclxuXHJcbiAgICAgICAgaWYgKCF0aGlzLm1hcmtlckxheWVyKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignTWFya2VyIExheWVyIG5vdCBzZXQnKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIElmIGJvdW5kcyBhcmUgbm90IHBhc3NlZCwgdXNlIG1hcCBib3VuZHNcclxuICAgICAgICBpZiAoIWJvdW5kcykge1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZygnQm91bmRzIG5vdCBwYXNzZWQuIFVzaW5nIG1hcCBib3VuZHMuJyk7XHJcbiAgICAgICAgICAgIGJvdW5kcyA9IHRoaXMubWFwLmdldEJvdW5kcygpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgYm91bmRzID0gcm91bmRCb3VuZHMoYm91bmRzKTtcclxuICAgICAgICAvL3RoaXMubWFya2VyTGF5ZXIucmVmcmVzaE1hcmtlcnNJbnNpZGVCb3VuZHMoYm91bmRzLCB0aGlzLm1hcmtlckZpbHRlcik7XHJcblxyXG4gICAgICAgIC8qXHJcbiAgICAgICAgLy8gR2V0IHRoZSBib3hlc1xyXG4gICAgICAgIGNvbnNvbGUubG9nKCdSZWZyZXNoaW5nIHBvaW50cyB3aXRoaW4gYm91bmRzJywgYm91bmRzLnRvQkJveFN0cmluZygpKTtcclxuICAgICAgICBjb25zdCBwb2ludHMgPSBhd2FpdCB0aGlzLmRhdGFzdG9yZS5nZXRQb2ludHNXaXRoaW5Cb3VuZHMoYm91bmRzKTtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgLy8gYWRkIHBvaW50cyB0byBtYXAgdGhhdCBkb24ndCBhbHJlYWR5IGV4aXN0IGluIGxheWVyXHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwb2ludHMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgY29uc3QgcG9pbnQgPSBwb2ludHNbaV07XHJcblxyXG4gICAgICAgICAgICBjb25zdCBtYXJrZXIgPSBMLmNpcmNsZU1hcmtlcihbcG9pbnQubGF0aXR1ZGUsIHBvaW50LmxvbmdpdHVkZV0sIHtcclxuICAgICAgICAgICAgICAgIHJhZGl1czogNSxcclxuICAgICAgICAgICAgICAgIC8vZmlsbENvbG9yOiB0aGlzLmdldFBsYWNlQ29sb3VyKHBsYWNlKSxcclxuICAgICAgICAgICAgICAgIC8vY29sb3I6IFwiIzAwMDAwMFwiLFxyXG4gICAgICAgICAgICAgICAgd2VpZ2h0OiAxLFxyXG4gICAgICAgICAgICAgICAgb3BhY2l0eTogMSxcclxuICAgICAgICAgICAgICAgIGZpbGxPcGFjaXR5OiAwLjgsXHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgLy8gQWRkIHBvcHVwXHJcbiAgICAgICAgICAgIG1hcmtlci5iaW5kUG9wdXAocG9pbnQubG9jaWRzLmpvaW4oJzxiciAvPicpKTtcclxuICAgICAgICAgICAgbWFya2VyLm9uKCdwb3B1cG9wZW4nLCAoZXZlbnQpID0+IHtcclxuICAgICAgICAgICAgICAgIHRoaXMucmVuZGVyUG9wdXBDb250ZW50KHBvaW50KVxyXG4gICAgICAgICAgICAgICAgICAgIC50aGVuKGNvbnRlbnQgPT4gZXZlbnQucG9wdXAuc2V0Q29udGVudChjb250ZW50KSk7XHJcbiAgICAgICAgICAgIH0pXHJcblxyXG4gICAgICAgICAgICB0aGlzLm1hcmtlckxheWVyLmFkZExheWVyKG1hcmtlcik7XHJcblxyXG4gICAgICAgIH1cclxuICAgICAgICAqL1xyXG5cclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIGNvbnRyb2xzOiB7XHJcbiAgICAgICAgW2tleTogc3RyaW5nXTogSUNvbnRyb2w7XHJcbiAgICB9ID0ge307XHJcblxyXG4gICAgYWRkQ29udHJvbChrZXk6IHN0cmluZywgY29udHJvbDogSUNvbnRyb2wpIHtcclxuICAgICAgICBpZiAodGhpcy5jb250cm9sc1trZXldKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgQ29udHJvbCB3aXRoIGtleSAke2tleX0gYWxyZWFkeSBleGlzdHNgKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuY29udHJvbHNba2V5XSA9IGNvbnRyb2w7XHJcblxyXG4gICAgICAgIHRoaXMubWFwLmFkZENvbnRyb2woY29udHJvbC5nZXRDb250cm9sKCkpXHJcblxyXG4gICAgICAgIGNvbnNvbGUubG9nKCdBZGRlZCBjb250cm9sJywga2V5KTtcclxuICAgIH1cclxuXHJcbiAgICBzZXRNb2RlSGFuZGxlcihtb2RlSGFuZGxlcjogSU1vZGUpIHtcclxuICAgICAgICB0aGlzLm1vZGVIYW5kbGVyID0gbW9kZUhhbmRsZXI7XHJcblxyXG4gICAgICAgIHRoaXMubWFya2VyTGF5ZXI/LnJlbW92ZUFsbE1hcmtlcnMoKTtcclxuICAgICAgICBjb25zb2xlLmxvZygnQ3VycmVudCBGZXRjaGVkIEJveGVzJywgdGhpcy5mZXRjaGVkQm94ZXMpO1xyXG4gICAgICAgIHRoaXMuZmV0Y2hlZEJveGVzLmNsZWFyKCk7XHJcbiAgICAgICAgY29uc29sZS5sb2coJ0ZldGNoZWQgQm94ZXMgQ2xlYXJlZCcsIHRoaXMuZmV0Y2hlZEJveGVzKTtcclxuICAgICAgICB0aGlzLm1hcmtlckxheWVyPy5zZXRNb2RlSGFuZGxlcihtb2RlSGFuZGxlciwgdGhpcy5wbGFjZVN0b3JlKTtcclxuICAgICAgICB0aGlzLmZldGNoRGF0YUZvckN1cnJlbnRWaWV3KCk7XHJcbiAgICB9XHJcblxyXG59IiwiaW1wb3J0ICogYXMgTCBmcm9tICdsZWFmbGV0JztcclxuaW1wb3J0IElDb250cm9sIGZyb20gXCIuLi9pbnRlcmZhY2VzL2NvbnRyb2wuaW50ZXJmYWNlXCI7XHJcbmltcG9ydCBOYm5UZWNoTWFwIGZyb20gXCIuLi9uYm5fdGVjaF9tYXAuY2xhc3NcIjtcclxuaW1wb3J0IHsgQ29udHJvbEV2ZW50IH0gZnJvbSBcIi4uL3R5cGVzXCI7XHJcblxyXG5cclxuZXhwb3J0IGRlZmF1bHQgYWJzdHJhY3QgY2xhc3MgQUNvbnRyb2wgaW1wbGVtZW50cyBJQ29udHJvbCB7XHJcblxyXG4gICAgLy9wcm90ZWN0ZWQgbWFwOiBOYm5UZWNoTWFwO1xyXG4gICAgcHJvdGVjdGVkIGNvbnRyb2w6IEwuQ29udHJvbDtcclxuICAgIC8vcHJvdGVjdGVkIGtleTogc3RyaW5nO1xyXG5cclxuXHJcbiAgICBwcm90ZWN0ZWQgZXZlbnRIYW5kbGVyczoge1xyXG4gICAgICAgIFtldmVudE5hbWU6IHN0cmluZ106ICgoZTogQ29udHJvbEV2ZW50KSA9PiB2b2lkKVtdXHJcbiAgICB9ID0ge307XHJcblxyXG4gICAgY29uc3RydWN0b3IoLyprZXk6IHN0cmluZy8qLCBuYm5UZWNoTWFwOiBOYm5UZWNoTWFwKi8pIHtcclxuICAgICAgICAvL3RoaXMua2V5ID0ga2V5O1xyXG4gICAgICAgIC8vdGhpcy5tYXAgPSBuYm5UZWNoTWFwO1xyXG4gICAgICAgIHRoaXMuY29udHJvbCA9IG5ldyBMLkNvbnRyb2woKTtcclxuICAgIH1cclxuXHJcbiAgICBvbihldmVudE5hbWU6IHN0cmluZywgY2FsbGJhY2s6IChlOiBDb250cm9sRXZlbnQpID0+IHZvaWQpIDogdm9pZCB7XHJcbiAgICAgICAgaWYgKCF0aGlzLmV2ZW50SGFuZGxlcnNbZXZlbnROYW1lXSkge1xyXG4gICAgICAgICAgICB0aGlzLmV2ZW50SGFuZGxlcnNbZXZlbnROYW1lXSA9IFtdO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmV2ZW50SGFuZGxlcnNbZXZlbnROYW1lXS5wdXNoKGNhbGxiYWNrKTtcclxuICAgIH1cclxuXHJcbiAgICBwcm90ZWN0ZWQgZW1pdChldmVudE5hbWU6IHN0cmluZywgZGF0YTogYW55KSA6IHZvaWQge1xyXG4gICAgICAgIGNvbnNvbGUuZGVidWcoYEVtaXR0aW5nIGV2ZW50OiAke2V2ZW50TmFtZX1gLCB7XHJcbiAgICAgICAgICAgIGRhdGE6IGRhdGEsXHJcbiAgICAgICAgICAgIGhhbmRsZXJzOiB0aGlzLmV2ZW50SGFuZGxlcnNbZXZlbnROYW1lXVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGlmICh0aGlzLmV2ZW50SGFuZGxlcnNbZXZlbnROYW1lXSkge1xyXG4gICAgICAgICAgICB0aGlzLmV2ZW50SGFuZGxlcnNbZXZlbnROYW1lXS5mb3JFYWNoKGNhbGxiYWNrID0+IGNhbGxiYWNrKHtcclxuICAgICAgICAgICAgICAgIG5hbWU6IGV2ZW50TmFtZSxcclxuICAgICAgICAgICAgICAgIHN0YXRlOiB0aGlzLmdldFN0YXRlKCksXHJcbiAgICAgICAgICAgICAgICBkYXRhOiBkYXRhXHJcbiAgICAgICAgICAgIH0pKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgYWJzdHJhY3QgZ2V0U3RhdGUoKSA6IGFueTtcclxuXHJcbiAgICBwdWJsaWMgZ2V0Q29udHJvbCgpIDogTC5Db250cm9sIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5jb250cm9sO1xyXG4gICAgfVxyXG5cclxufSIsImltcG9ydCAqIGFzIEwgZnJvbSAnbGVhZmxldCc7XHJcbi8vaW1wb3J0IE5iblRlY2hNYXAgZnJvbSBcIi4uL25ibl90ZWNoX21hcC5jbGFzc1wiO1xyXG5pbXBvcnQgQUNvbnRyb2wgZnJvbSBcIi4vY29udHJvbC5hYnN0cmFjdFwiO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ29udHJvRGlzcGxheU1vZGUgZXh0ZW5kcyBBQ29udHJvbCB7XHJcblxyXG4gICAgcHJpdmF0ZSBkaXNwbGF5TW9kZSA9ICdhbGwnO1xyXG4gICAgcHJpdmF0ZSBlbENvbnRyb2xEaXY6IEhUTUxEaXZFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICBwcml2YXRlIGVsRHJvcGRvd246IEhUTUxTZWxlY3RFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc2VsZWN0Jyk7XHJcblxyXG4gICAgY29uc3RydWN0b3IgKCkge1xyXG4gICAgICAgIHN1cGVyKCk7XHJcblxyXG4gICAgICAgIHRoaXMuZ2VuZXJhdGVDb250cm9sRGl2KCk7XHJcbiAgICAgICAgdGhpcy5jb250cm9sLm9uQWRkID0gKG1hcDogTC5NYXApID0+IHtcclxuICAgICAgICAgICAgdGhpcy5nZW5lcmF0ZURyb3Bkb3duKCk7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmVsQ29udHJvbERpdjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vdGhpcy5jb250cm9sLm9uQWRkID0gKCkgPT4gdGhpcy5hZGRDb250cm9sRGl2KCk7XHJcbiAgICAgICAgLy90aGlzLnNob3coKTtcclxuICAgIH1cclxuXHJcbiAgICBnZXRTdGF0ZSgpIDogc3RyaW5nIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5kaXNwbGF5TW9kZTtcclxuICAgIH1cclxuXHJcblxyXG4gICAgcHJpdmF0ZSBhbGxMYWJlbDogYW55ID0gbnVsbDtcclxuICAgIHByaXZhdGUgYWxsUmFkaW86IGFueSA9IG51bGw7XHJcbiAgICBwcml2YXRlIGFsbFRleHQ6IGFueSA9IG51bGw7XHJcbiAgICBwcml2YXRlIHVwZ3JhZGVMYWJlbDogYW55ID0gbnVsbDtcclxuICAgIHByaXZhdGUgdXBncmFkZVJhZGlvOiBhbnkgPSBudWxsO1xyXG4gICAgcHJpdmF0ZSB1cGdyYWRlVGV4dDogYW55ID0gbnVsbDtcclxuICAgIHByaXZhdGUgZWVMYWJlbDogYW55ID0gbnVsbDtcclxuICAgIHByaXZhdGUgZWVSYWRpbzogYW55ID0gbnVsbDtcclxuICAgIHByaXZhdGUgZWVUZXh0OiBhbnkgPSBudWxsO1xyXG4gICAgXHJcbiAgICBjaGFuZ2VNb2RlKG1vZGU6IHN0cmluZykge1xyXG4gICAgICAgIHRoaXMuZGlzcGxheU1vZGUgPSBtb2RlO1xyXG4gICAgICAgIHRoaXMuZW1pdCgnY2hhbmdlJywgbW9kZSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBnZW5lcmF0ZUNvbnRyb2xEaXYoKSA6IHZvaWQge1xyXG4gICAgICAgIGlmKHRoaXMuZWxDb250cm9sRGl2KSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUud2FybignQ29udHJvbERpdiBhbHJlYWR5IGV4aXN0cycpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5lbENvbnRyb2xEaXYuY2xhc3NMaXN0LmFkZCgnaW5mbycsICdsZWdlbmQnKTtcclxuICAgICAgICB0aGlzLmVsQ29udHJvbERpdi5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSBcIiNmZmZmZmZcIjtcclxuICAgICAgICB0aGlzLmVsQ29udHJvbERpdi5zdHlsZS5vcGFjaXR5ID0gXCIwLjhcIjtcclxuICAgICAgICB0aGlzLmVsQ29udHJvbERpdi5zdHlsZS5wYWRkaW5nID0gXCI1cHhcIjtcclxuICAgICAgICB0aGlzLmVsQ29udHJvbERpdi5zdHlsZS5ib3JkZXJSYWRpdXMgPSBcIjVweFwiO1xyXG5cclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIGdlbmVyYXRlRHJvcGRvd24oKSA6IHZvaWQge1xyXG4gICAgICAgIGlmICh0aGlzLmVsRHJvcGRvd24pIHtcclxuICAgICAgICAgICAgY29uc29sZS53YXJuKCdEcm9wZG93biBhbHJlYWR5IGV4aXN0cycpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29uc3QgZHJvcGRvd24gPSB0aGlzLmVsRHJvcGRvd247XHJcbiAgICAgICAgZHJvcGRvd24uY2xhc3NMaXN0LmFkZCgnY29udHJvbC1zZWxlY3QnKTtcclxuXHJcbiAgICAgICAgY29uc3QgYWxsT3B0aW9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnb3B0aW9uJyk7XHJcbiAgICAgICAgYWxsT3B0aW9uLnZhbHVlID0gJ2FsbCc7XHJcbiAgICAgICAgYWxsT3B0aW9uLmlubmVyVGV4dCA9ICdTaG93IEFsbCBMb2NhdGlvbnMnO1xyXG4gICAgICAgIGRyb3Bkb3duLmFwcGVuZENoaWxkKGFsbE9wdGlvbik7XHJcblxyXG4gICAgICAgIFxyXG4gICAgICAgIGNvbnN0IHVwZ3JhZGVPcHRpb24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdvcHRpb24nKTtcclxuICAgICAgICB1cGdyYWRlT3B0aW9uLnZhbHVlID0gJ3VwZ3JhZGUnO1xyXG4gICAgICAgIHVwZ3JhZGVPcHRpb24uaW5uZXJUZXh0ID0gJ1RlY2ggVXBncmFkZXMnO1xyXG4gICAgICAgIGRyb3Bkb3duLmFwcGVuZENoaWxkKHVwZ3JhZGVPcHRpb24pO1xyXG4gICAgICAgIFxyXG4gICAgICAgIFxyXG4gICAgICAgIGNvbnN0IGVlT3B0aW9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnb3B0aW9uJyk7XHJcbiAgICAgICAgZWVPcHRpb24udmFsdWUgPSAnZWUnO1xyXG4gICAgICAgIGVlT3B0aW9uLmlubmVyVGV4dCA9ICdFbnRlcnByaXNlIEV0aGVybmV0JztcclxuICAgICAgICBkcm9wZG93bi5hcHBlbmRDaGlsZChlZU9wdGlvbik7XHJcbiAgICAgICAgXHJcblxyXG4gICAgICAgIGRyb3Bkb3duLmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIChlKSA9PiB0aGlzLmNoYW5nZU1vZGUoKGUudGFyZ2V0IGFzIEhUTUxTZWxlY3RFbGVtZW50KS52YWx1ZSkpO1xyXG5cclxuICAgICAgICB0aGlzLmVsRHJvcGRvd24gPSBkcm9wZG93bjtcclxuICAgICAgICB0aGlzLmVsQ29udHJvbERpdi5hcHBlbmRDaGlsZChkcm9wZG93bik7XHJcblxyXG4gICAgfVxyXG5cclxuICAgIC8qYWRkQ29udHJvbERpdigpIHtcclxuXHJcbiAgICAgICAgdGhpcy5hbGxMYWJlbCA9IEwuRG9tVXRpbC5jcmVhdGUoJ2xhYmVsJywgJ2NvbnRyb2wtbGFiZWwnLCB0aGlzLmNvbnRyb2xEaXYpO1xyXG4gICAgICAgIHRoaXMuYWxsUmFkaW8gPSBMLkRvbVV0aWwuY3JlYXRlKCdpbnB1dCcsICdjb250cm9sLWlucHV0JywgdGhpcy5hbGxMYWJlbCk7XHJcbiAgICAgICAgdGhpcy5hbGxSYWRpby50eXBlID0gJ3JhZGlvJztcclxuICAgICAgICB0aGlzLmFsbFJhZGlvLm5hbWUgPSAnZGlzcGxheS1tb2RlJztcclxuICAgICAgICB0aGlzLmFsbFJhZGlvLnZhbHVlID0gJ2FsbCc7XHJcbiAgICAgICAgdGhpcy5hbGxSYWRpby5jaGVja2VkID0gdHJ1ZTtcclxuICAgICAgICBMLkRvbUV2ZW50Lm9uKHRoaXMuYWxsUmFkaW8sICdjaGFuZ2UnLCAoZSkgPT4gdGhpcy5jaGFuZ2VNb2RlKCdhbGwnKSk7XHJcbiAgICAgICAgdGhpcy5hbGxUZXh0ID0gTC5Eb21VdGlsLmNyZWF0ZSgnc3BhbicsICdjb250cm9sLXRleHQnLCB0aGlzLmFsbExhYmVsKTtcclxuICAgICAgICB0aGlzLmFsbFRleHQuaW5uZXJUZXh0ID0gJ0FsbCc7XHJcblxyXG4gICAgICAgIHRoaXMudXBncmFkZUxhYmVsID0gTC5Eb21VdGlsLmNyZWF0ZSgnbGFiZWwnLCAnY29udHJvbC1sYWJlbCcsIHRoaXMuY29udHJvbERpdik7XHJcbiAgICAgICAgdGhpcy51cGdyYWRlUmFkaW8gPSBMLkRvbVV0aWwuY3JlYXRlKCdpbnB1dCcsICdjb250cm9sLWlucHV0JywgdGhpcy51cGdyYWRlTGFiZWwpO1xyXG4gICAgICAgIHRoaXMudXBncmFkZVJhZGlvLnR5cGUgPSAncmFkaW8nO1xyXG4gICAgICAgIHRoaXMudXBncmFkZVJhZGlvLm5hbWUgPSAnZGlzcGxheS1tb2RlJztcclxuICAgICAgICB0aGlzLnVwZ3JhZGVSYWRpby52YWx1ZSA9ICd1cGdyYWRlJztcclxuICAgICAgICBMLkRvbUV2ZW50Lm9uKHRoaXMudXBncmFkZVJhZGlvLCAnY2hhbmdlJywgKCkgPT4gdGhpcy5jaGFuZ2VNb2RlKCd1cGdyYWRlJykpO1xyXG4gICAgICAgIHRoaXMudXBncmFkZVRleHQgPSBMLkRvbVV0aWwuY3JlYXRlKCdzcGFuJywgJ2NvbnRyb2wtdGV4dCcsIHRoaXMudXBncmFkZUxhYmVsKTtcclxuICAgICAgICB0aGlzLnVwZ3JhZGVUZXh0LmlubmVyVGV4dCA9ICdUZWNoIFVwZ3JhZGUnO1xyXG5cclxuICAgICAgICB0aGlzLmVlTGFiZWwgPSBMLkRvbVV0aWwuY3JlYXRlKCdsYWJlbCcsICdjb250cm9sLWxhYmVsJywgdGhpcy5jb250cm9sRGl2KTtcclxuICAgICAgICB0aGlzLmVlUmFkaW8gPSBMLkRvbVV0aWwuY3JlYXRlKCdpbnB1dCcsICdjb250cm9sLWlucHV0JywgdGhpcy5lZUxhYmVsKTtcclxuICAgICAgICB0aGlzLmVlUmFkaW8udHlwZSA9ICdyYWRpbyc7XHJcbiAgICAgICAgdGhpcy5lZVJhZGlvLm5hbWUgPSAnZGlzcGxheS1tb2RlJztcclxuICAgICAgICB0aGlzLmVlUmFkaW8udmFsdWUgPSAnZWUnO1xyXG4gICAgICAgIEwuRG9tRXZlbnQub24odGhpcy5lZVJhZGlvLCAnY2hhbmdlJywgKCkgPT4gdGhpcy5jaGFuZ2VNb2RlKCdlZScpKTtcclxuICAgICAgICB0aGlzLmVlVGV4dCA9IEwuRG9tVXRpbC5jcmVhdGUoJ3NwYW4nLCAnY29udHJvbC10ZXh0JywgdGhpcy5lZUxhYmVsKTtcclxuICAgICAgICB0aGlzLmVlVGV4dC5pbm5lclRleHQgPSAnRUUnO1xyXG5cclxuICAgIH0qL1xyXG5cclxufSIsImltcG9ydCBJTW9kZSBmcm9tIFwiLi4vaW50ZXJmYWNlcy9tb2RlLmludGVyZmFjZVwiO1xyXG5pbXBvcnQgeyBMZWdlbmRJdGVtLCBOYm5QbGFjZSwgUG9pbnRBbmRQbGFjZXMgfSBmcm9tIFwiLi4vdHlwZXNcIjtcclxuaW1wb3J0ICogYXMgTCBmcm9tIFwibGVhZmxldFwiO1xyXG5cclxuaW1wb3J0IHtcclxuICAgIGlzUGxhY2VGVFRQLFxyXG4gICAgaXNQbGFjZUZUVEMsXHJcbiAgICBpc1BsYWNlRlRUUEF2YWlsLFxyXG4gICAgaXNQbGFjZUZUVFBTb29uLFxyXG4gICAgaXNQbGFjZUZUVFBGYXIsXHJcbiAgICBpc0Z3dG9GVFRDLFxyXG4gICAgaXNGd3RvRlRUTixcclxuICAgIGlzU2F0VG9GVyxcclxuICAgIGlzRGVidWdNb2RlXHJcbn0gZnJvbSBcIi4uL3V0aWxzXCI7XHJcblxyXG5jb25zdCBjb2xvdXJGVFRQIFx0XHQ9ICcjMUQ3MDQ0JztcclxuY29uc3QgY29sb3VyRlRUUEF2YWlsICAgPSAnIzc1QUQ2Ric7XHJcbmNvbnN0IGNvbG91ckZUVFBTb29uICAgID0gJyNDOEUzQzUnO1xyXG5jb25zdCBjb2xvdXJIRkMgXHRcdD0gJyNGRkJFMDAnO1xyXG5jb25zdCBjb2xvdXJGVFRDIFx0XHQ9ICcjRkY3RTAxJztcclxuY29uc3QgY29sb3VyRlRUQ0F2YWlsICAgPSAnI0ZGN0UwMSc7XHJcbmNvbnN0IGNvbG91ckZUVE5CIFx0XHQ9ICcjRTMwNzFEJztcclxuY29uc3QgY29sb3VyRlcgXHRcdCAgICA9ICcjMDJCOUUzJztcclxuY29uc3QgY29sb3VyRldBdmFpbCBcdD0gJyMwMjJCRTMnO1xyXG5jb25zdCBjb2xvdXJTYXQgXHQgICAgPSAnIzZCMDJFMyc7XHJcbmNvbnN0IGNvbG91clVua25vd24gICAgICA9ICcjODg4ODg4JztcclxuXHJcbmZ1bmN0aW9uIGdldFRlY2hDb2xvdXIodGVjaFR5cGU6IHN0cmluZykge1xyXG4gICAgc3dpdGNoKHRlY2hUeXBlKSB7XHJcbiAgICAgICAgY2FzZSAnRlRUUCc6IHJldHVybiBjb2xvdXJGVFRQO1xyXG4gICAgICAgIGNhc2UgJ0ZUVEMnOiByZXR1cm4gY29sb3VyRlRUQztcclxuICAgICAgICBjYXNlICdGVFROJzpcclxuICAgICAgICBjYXNlICdGVFRCJzogcmV0dXJuIGNvbG91ckZUVE5CO1xyXG4gICAgICAgIGNhc2UgJ0hGQyc6IHJldHVybiBjb2xvdXJIRkM7XHJcbiAgICAgICAgY2FzZSAnV0lSRUxFU1MnOiByZXR1cm4gY29sb3VyRlc7XHJcbiAgICAgICAgY2FzZSAnU0FURUxMSVRFJzogcmV0dXJuIGNvbG91clNhdDtcclxuICAgIH1cclxuICAgIHJldHVybiBjb2xvdXJVbmtub3duO1xyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBBbGxNb2RlIGltcGxlbWVudHMgSU1vZGUge1xyXG5cclxuICAgIGZpbHRlcihwbGFjZTogTmJuUGxhY2UpIDogYm9vbGVhbiB7XHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcblxyXG4gICAgcG9pbnRDb2xvdXIocG9pbnQ6IFBvaW50QW5kUGxhY2VzKSA6IHN0cmluZyB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMucGxhY2VDb2xvdXIocG9pbnQucGxhY2VzWzBdKTtcclxuICAgIH1cclxuXHJcbiAgICBwbGFjZUNvbG91cihwbGFjZTogTmJuUGxhY2UpIDogc3RyaW5nIHtcclxuICAgICAgICBcclxuICAgICAgICBpZiAoaXNQbGFjZUZUVFAocGxhY2UpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBjb2xvdXJGVFRQO1xyXG4gICAgICAgIH1cclxuICAgIFxyXG4gICAgICAgIGlmIChpc1BsYWNlRlRUUEF2YWlsKHBsYWNlKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gY29sb3VyRlRUUEF2YWlsO1xyXG4gICAgICAgIH1cclxuICAgIFxyXG4gICAgICAgIGlmIChpc1BsYWNlRlRUUFNvb24ocGxhY2UpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBjb2xvdXJGVFRQU29vbjtcclxuICAgICAgICB9XHJcbiAgICBcclxuICAgICAgICBpZiAoaXNQbGFjZUZUVFBGYXIocGxhY2UpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBnZXRUZWNoQ29sb3VyKHBsYWNlLnRlY2hUeXBlKTtcclxuICAgICAgICB9XHJcbiAgICBcclxuICAgICAgICBpZiAoaXNQbGFjZUZUVEMocGxhY2UpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBjb2xvdXJGVFRDO1xyXG4gICAgICAgIH1cclxuICAgIFxyXG4gICAgICAgIGlmIChpc0Z3dG9GVFRDKHBsYWNlKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gY29sb3VyRlRUQ0F2YWlsO1xyXG4gICAgICAgIH1cclxuICAgIFxyXG4gICAgICAgIGlmIChpc0Z3dG9GVFROKHBsYWNlKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gY29sb3VyRlRUTkI7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIFxyXG4gICAgICAgIGlmIChpc1NhdFRvRlcocGxhY2UpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBjb2xvdXJGV0F2YWlsO1xyXG4gICAgICAgIH1cclxuICAgIFxyXG4gICAgICAgIGlmIChwbGFjZS5hbHRSZWFzb25Db2RlICYmIHBsYWNlLmFsdFJlYXNvbkNvZGUgIT0gJ05VTExfTkEnKSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKHBsYWNlKTtcclxuICAgICAgICB9XHJcbiAgICBcclxuICAgICAgICByZXR1cm4gZ2V0VGVjaENvbG91cihwbGFjZS50ZWNoVHlwZSk7XHJcblxyXG4gICAgfVxyXG5cclxuICAgIHJlbmRlclBvcHVwQ29udGVudChwbGFjZTogTmJuUGxhY2UpIDogSFRNTEVsZW1lbnQge1xyXG4gICAgICAgIFxyXG4gICAgICAgIGNvbnN0IGNvbnRlbnQgPSBMLkRvbVV0aWwuY3JlYXRlKCdkaXYnKTtcclxuXHJcbiAgICAgICAgY29udGVudC5pbm5lckhUTUwgPSAnPGI+JytwbGFjZS5sb2NpZCsnPC9iPjwvYnI+J1xyXG4gICAgICAgICAgICArIHBsYWNlLmFkZHJlc3MxICsgJzwvYnI+J1xyXG4gICAgICAgICAgICArIHBsYWNlLmFkZHJlc3MyICsgJzwvYnI+J1xyXG4gICAgICAgICAgICArICc8YnIgLz4nO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICBjb250ZW50LmlubmVySFRNTCArPSAnPGI+VGVjaG5vbG9neSBQbGFuPC9iPjwvYnI+JztcclxuXHJcbiAgICAgICAgLyoqIFRlY2hub2xvZ3kgUGxhbiBGaW5hbCBTdGF0ZSAqL1xyXG4gICAgICAgIGlmIChwbGFjZS50ZWNoVHlwZSA9PSAnRlRUUCdcclxuICAgICAgICAgICAgfHwgIXBsYWNlLmFsdFJlYXNvbkNvZGVcclxuICAgICAgICAgICAgfHwgcGxhY2UuYWx0UmVhc29uQ29kZSA9PSAnTlVMTF9OQSdcclxuICAgICAgICApIHtcclxuICAgICAgICAgICAgY29udGVudC5pbm5lckhUTUwgKz0gJ1RlY2hub2xvZ3k6ICcgKyBwbGFjZS50ZWNoVHlwZSArICc8YnIgLz4nO1xyXG4gICAgICAgICAgICBpZiAocGxhY2UudGVjaFR5cGUgIT0gJ0ZUVFAnKSB7XHJcbiAgICAgICAgICAgICAgICBjb250ZW50LmlubmVySFRNTCArPSAnTm8gdGVjaCB1cGdyYWRlIHBsYW5uZWQ8YnIgLz4nO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSBcclxuICAgICAgICBcclxuICAgICAgICBlbHNlIGlmIChwbGFjZS5hbHRSZWFzb25Db2RlICYmIHBsYWNlLmFsdFJlYXNvbkNvZGUubWF0Y2goL15GVFRQLykpIHtcclxuICAgICAgICAgICAgY29udGVudC5pbm5lckhUTUwgKz0gJ0N1cnJlbnQ6ICcgKyBwbGFjZS50ZWNoVHlwZSArICc8YnIgLz4nO1xyXG4gICAgICAgICAgICBjb250ZW50LmlubmVySFRNTCArPSAnQ2hhbmdlOiAnICsgcGxhY2UuYWx0UmVhc29uQ29kZSArICc8YnIgLz4nO1xyXG4gICAgICAgICAgICBjb250ZW50LmlubmVySFRNTCArPSAnU3RhdHVzOiAnICsgcGxhY2UudGVjaENoYW5nZVN0YXR1cyArICc8YnIgLz4nO1xyXG4gICAgICAgICAgICBjb250ZW50LmlubmVySFRNTCArPSAnUHJvZ3JhbTogJyArIHBsYWNlLnByb2dyYW1UeXBlICsgJzxiciAvPic7XHJcbiAgICAgICAgICAgIGNvbnRlbnQuaW5uZXJIVE1MICs9ICdUYXJnZXQgUXRyOiAnICsgcGxhY2UudGFyZ2V0RWxpZ2liaWxpdHlRdWFydGVyICsgJzxiciAvPic7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIFxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBjb250ZW50LmlubmVySFRNTCArPSAnQ3VycmVudDogJyArIHBsYWNlLnRlY2hUeXBlICsgJzxiciAvPic7XHJcbiAgICAgICAgICAgIGNvbnRlbnQuaW5uZXJIVE1MICs9ICdDaGFuZ2U6ICcgKyBwbGFjZS5hbHRSZWFzb25Db2RlICsgJzxiciAvPic7XHJcbiAgICAgICAgICAgIGNvbnRlbnQuaW5uZXJIVE1MICs9ICdTdGF0dXM6ICcgKyBwbGFjZS50ZWNoQ2hhbmdlU3RhdHVzICsgJzxiciAvPic7XHJcbiAgICAgICAgICAgIGNvbnRlbnQuaW5uZXJIVE1MICs9ICdQcm9ncmFtOiAnICsgcGxhY2UucHJvZ3JhbVR5cGUgKyAnPGJyIC8+JztcclxuICAgICAgICAgICAgY29udGVudC5pbm5lckhUTUwgKz0gJ1RhcmdldCBRdHI6ICcgKyBwbGFjZS50YXJnZXRFbGlnaWJpbGl0eVF1YXJ0ZXIgKyAnPGJyIC8+JztcclxuICAgICAgICB9XHJcblxyXG5cclxuICAgICAgICBjb250ZW50LmlubmVySFRNTCArPSAnPGJyIC8+JzsgXHJcbiAgICAgICAgXHJcbiAgICAgICAgaWYgKHBsYWNlLmVlKSB7XHJcbiAgICAgICAgICAgIGNvbnRlbnQuaW5uZXJIVE1MICArPSAnPGI+RW50ZXJwcmlzZSBFdGhlcm5ldDwvYj48L2JyPic7XHJcbiAgICAgICAgICAgIGNvbnRlbnQuaW5uZXJIVE1MICArPSAnUHJpY2UgWm9uZTogJyArICggcGxhY2UuY2JkcHJpY2luZyA/ICdDQkQnIDogJ1pvbmUgMS8yLzMnICkgKyAnPGJyIC8+J1xyXG4gICAgICAgICAgICBjb250ZW50LmlubmVySFRNTCAgKz0gJ0J1aWxkIENvc3Q6ICcgKyAoIHBsYWNlLnplcm9CdWlsZENvc3QgPyAnJDAnIDogJ1BPQScgKSArICc8YnIgLz4nXHJcbiAgICAgICAgICAgIGNvbnRlbnQuaW5uZXJIVE1MICArPSAnPGJyIC8+JztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChpc0RlYnVnTW9kZSgpKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGhyID0gTC5Eb21VdGlsLmNyZWF0ZSgnaHInKTtcclxuICAgICAgICAgICAgY29uc3QgcHJlID0gTC5Eb21VdGlsLmNyZWF0ZSgncHJlJyk7XHJcbiAgICAgICAgICAgIHByZS5pbm5lckhUTUwgPSBKU09OLnN0cmluZ2lmeShwbGFjZSwgbnVsbCwgMik7XHJcbiAgICAgICAgICAgIGNvbnRlbnQuYXBwZW5kQ2hpbGQoaHIpO1xyXG4gICAgICAgICAgICBjb250ZW50LmFwcGVuZENoaWxkKHByZSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gY29udGVudDtcclxuICAgIH1cclxuXHJcbiAgICByZW5kZXJUb29sdGlwKHBsYWNlczogTmJuUGxhY2VbXSkgOiBzdHJpbmcge1xyXG4gICAgICAgIGxldCBsYWJlbCA9IHBsYWNlc1swXS5hZGRyZXNzMTtcclxuXHJcbiAgICAgICAgaWYgKHBsYWNlcy5sZW5ndGggPiAxKSB7XHJcbiAgICAgICAgICAgIGxhYmVsICs9ICcgKCArICcgKyAocGxhY2VzLmxlbmd0aCAtIDEpICsgJyBtb3JlKSc7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gbGFiZWw7XHJcblxyXG4gICAgfVxyXG5cclxuICAgIGdldExlZ2VuZEl0ZW1zKCk6IExlZ2VuZEl0ZW1bXSB7XHJcbiAgICAgICAgcmV0dXJuIFtcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgbGFiZWw6ICdGVFRQJyxcclxuICAgICAgICAgICAgICAgIGNvbG91cjogY29sb3VyRlRUUCxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgbGFiZWw6ICdGVFRQIFVwZ3JhZGUnLFxyXG4gICAgICAgICAgICAgICAgY29sb3VyOiBjb2xvdXJGVFRQQXZhaWwsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGxhYmVsOiAnRlRUUCBVcGdyYWRlIFNvb24nLFxyXG4gICAgICAgICAgICAgICAgY29sb3VyOiBjb2xvdXJGVFRQU29vbixcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgbGFiZWw6ICdIRkMnLFxyXG4gICAgICAgICAgICAgICAgY29sb3VyOiBjb2xvdXJIRkMsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGxhYmVsOiAnRlRUQycsXHJcbiAgICAgICAgICAgICAgICBjb2xvdXI6IGNvbG91ckZUVEMsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGxhYmVsOiAnRlRUTi9GVFRCJyxcclxuICAgICAgICAgICAgICAgIGNvbG91cjogY29sb3VyRlRUTkIsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGxhYmVsOiAnRlcnLFxyXG4gICAgICAgICAgICAgICAgY29sb3VyOiBjb2xvdXJGVyxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgbGFiZWw6ICdGVyBVcGdyYWRlJyxcclxuICAgICAgICAgICAgICAgIGNvbG91cjogY29sb3VyRldBdmFpbCxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgbGFiZWw6ICdTYXRlbGxpdGUnLFxyXG4gICAgICAgICAgICAgICAgY29sb3VyOiBjb2xvdXJTYXQsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGxhYmVsOiAnVW5rbm93bicsXHJcbiAgICAgICAgICAgICAgICBjb2xvdXI6IGNvbG91clVua25vd24sXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICBdO1xyXG4gICAgfVxyXG5cclxufSIsImltcG9ydCBJTW9kZSBmcm9tIFwiLi4vaW50ZXJmYWNlcy9tb2RlLmludGVyZmFjZVwiO1xyXG5pbXBvcnQgeyBMZWdlbmRJdGVtIH0gZnJvbSBcIi4uL3R5cGVzXCI7XHJcbmltcG9ydCBBQ29udHJvbCBmcm9tIFwiLi9jb250cm9sLmFic3RyYWN0XCI7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBDb250cm9sTGVnZW5kIGV4dGVuZHMgQUNvbnRyb2wge1xyXG5cclxuICAgIHByaXZhdGUgZWxDb250cm9sRGl2OiBIVE1MRGl2RWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgXHJcbiAgICBjb25zdHJ1Y3RvciAoKSB7XHJcbiAgICAgICAgc3VwZXIoKTtcclxuXHJcbiAgICAgICAgdGhpcy5jb250cm9sLnNldFBvc2l0aW9uKCdib3R0b21yaWdodCcpO1xyXG5cclxuICAgICAgICB0aGlzLmVsQ29udHJvbERpdi5jbGFzc0xpc3QuYWRkKCdpbmZvJywgJ2xlZ2VuZCcpO1xyXG4gICAgICAgIHRoaXMuZWxDb250cm9sRGl2LnN0eWxlLmJhY2tncm91bmRDb2xvciA9IFwiI2ZmZmZmZlwiO1xyXG4gICAgICAgIHRoaXMuZWxDb250cm9sRGl2LnN0eWxlLm9wYWNpdHkgPSBcIjAuOFwiO1xyXG4gICAgICAgIHRoaXMuZWxDb250cm9sRGl2LnN0eWxlLnBhZGRpbmcgPSBcIjVweFwiO1xyXG4gICAgICAgIHRoaXMuZWxDb250cm9sRGl2LnN0eWxlLmJvcmRlclJhZGl1cyA9IFwiNXB4XCI7XHJcblxyXG4gICAgICAgIHRoaXMuY29udHJvbC5vbkFkZCA9IChtYXA6IEwuTWFwKSA9PiB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmVsQ29udHJvbERpdjtcclxuICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICB9XHJcblxyXG4gICAgZ2V0U3RhdGUoKSB7XHJcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcclxuICAgIH1cclxuXHJcbiAgICB1cGRhdGVMZWdlbmQoaXRlbXM6IExlZ2VuZEl0ZW1bXSkge1xyXG5cclxuICAgICAgICBsZXQgaHRtbCA9ICcnO1xyXG4gICAgICAgIGl0ZW1zLmZvckVhY2goaXRlbSA9PiB7XHJcbiAgICAgICAgICAgIGh0bWwgKz0gJzxzdmcgaGVpZ2h0PVwiMTBcIiB3aWR0aD1cIjEwXCI+PGNpcmNsZSBjeD1cIjVcIiBjeT1cIjVcIiByPVwiNVwiIGZpbGw9XCInKyBpdGVtLmNvbG91ciArJ1wiIHN0cm9rZT1cIiMwMDAwMDBcIiBzdHJva2Utd2lkdGg9XCIxXCIgb3BhY2l0eT1cIjFcIiBmaWxsLW9wYWNpdHk9XCIwLjhcIiAvPjwvc3ZnPiAnICsgaXRlbS5sYWJlbDtcclxuICAgICAgICAgICAgaWYgKGl0ZW0uY291bnQpIHtcclxuICAgICAgICAgICAgICAgIGh0bWwgKz0gJyAoJyArIGl0ZW0uY291bnQgKyAnKSc7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaHRtbCArPSAnPGJyPic7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHRoaXMuZWxDb250cm9sRGl2LmlubmVySFRNTCA9IGh0bWw7XHJcblxyXG4gICAgfVxyXG5cclxuXHJcblxyXG5cclxuICAgIC8qXHJcblxyXG4gICAgZ2V0TGVnZW5kSFRNTCgpIHtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMubmJuVGVjaE1hcC5jb250cm9scy5kaXNwbGF5TW9kZT8uZGlzcGxheU1vZGUgPT0gJ2VlJykge1xyXG4gICAgICAgICAgICByZXR1cm4gJzxzdmcgaGVpZ2h0PVwiMTBcIiB3aWR0aD1cIjEwXCI+PGNpcmNsZSBjeD1cIjVcIiBjeT1cIjVcIiByPVwiNVwiIGZpbGw9XCInK2NvbG91ckVFX0NCRF9aQkMrJ1wiIHN0cm9rZT1cIiMwMDAwMDBcIiBzdHJva2Utd2lkdGg9XCIxXCIgb3BhY2l0eT1cIjFcIiBmaWxsLW9wYWNpdHk9XCIwLjhcIiAvPjwvc3ZnPiBab25lIENCRCAoJDAgQnVpbGQpPGJyPidcclxuICAgICAgICAgICAgKyAnPHN2ZyBoZWlnaHQ9XCIxMFwiIHdpZHRoPVwiMTBcIj48Y2lyY2xlIGN4PVwiNVwiIGN5PVwiNVwiIHI9XCI1XCIgZmlsbD1cIicrY29sb3VyRUVfQ0JEX0JDKydcIiBzdHJva2U9XCIjMDAwMDAwXCIgc3Ryb2tlLXdpZHRoPVwiMVwiIG9wYWNpdHk9XCIxXCIgZmlsbC1vcGFjaXR5PVwiMC44XCIgLz48L3N2Zz4gWm9uZSBDQkQgKEJ1aWxkIFBPQSk8YnI+J1xyXG4gICAgICAgICAgICArICc8c3ZnIGhlaWdodD1cIjEwXCIgd2lkdGg9XCIxMFwiPjxjaXJjbGUgY3g9XCI1XCIgY3k9XCI1XCIgcj1cIjVcIiBmaWxsPVwiJytjb2xvdXJFRV9aMTIzX1pCQysnXCIgc3Ryb2tlPVwiIzAwMDAwMFwiIHN0cm9rZS13aWR0aD1cIjFcIiBvcGFjaXR5PVwiMVwiIGZpbGwtb3BhY2l0eT1cIjAuOFwiIC8+PC9zdmc+IFpvbmUgMS8yLzMgKCQwIEJ1aWxkKTxicj4nXHJcbiAgICAgICAgICAgICsgJzxzdmcgaGVpZ2h0PVwiMTBcIiB3aWR0aD1cIjEwXCI+PGNpcmNsZSBjeD1cIjVcIiBjeT1cIjVcIiByPVwiNVwiIGZpbGw9XCInK2NvbG91ckVFX1oxMjNfQkMrJ1wiIHN0cm9rZT1cIiMwMDAwMDBcIiBzdHJva2Utd2lkdGg9XCIxXCIgb3BhY2l0eT1cIjFcIiBmaWxsLW9wYWNpdHk9XCIwLjhcIiAvPjwvc3ZnPiBab25lIDEvMi8zIChCdWlsZCBQT0EpPGJyPidcclxuICAgICAgICAgICAgKyAnPHN2ZyBoZWlnaHQ9XCIxMFwiIHdpZHRoPVwiMTBcIj48Y2lyY2xlIGN4PVwiNVwiIGN5PVwiNVwiIHI9XCI1XCIgZmlsbD1cIicrY29sb3VyVW5rbm93bisnXCIgc3Ryb2tlPVwiIzAwMDAwMFwiIHN0cm9rZS13aWR0aD1cIjFcIiBvcGFjaXR5PVwiMVwiIGZpbGwtb3BhY2l0eT1cIjAuOFwiIC8+PC9zdmc+IFVua25vd24nO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHRoaXMubmJuVGVjaE1hcC5jb250cm9scy5kaXNwbGF5TW9kZT8uZGlzcGxheU1vZGUgPT0gJ3VwZ3JhZGUnKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAnPHN2ZyBoZWlnaHQ9XCIxMFwiIHdpZHRoPVwiMTBcIj48Y2lyY2xlIGN4PVwiNVwiIGN5PVwiNVwiIHI9XCI1XCIgZmlsbD1cIicrIENPTF9URUNIX0NPTVBMRVRFICsnXCIgc3Ryb2tlPVwiIzAwMDAwMFwiIHN0cm9rZS13aWR0aD1cIjFcIiBvcGFjaXR5PVwiMVwiIGZpbGwtb3BhY2l0eT1cIjAuOFwiIC8+PC9zdmc+IENvbXBsZXRlZDxicj4nXHJcbiAgICAgICAgICAgICsgJzxzdmcgaGVpZ2h0PVwiMTBcIiB3aWR0aD1cIjEwXCI+PGNpcmNsZSBjeD1cIjVcIiBjeT1cIjVcIiByPVwiNVwiIGZpbGw9XCInKyBDT0xfVEVDSF9BVkFJTCArJ1wiIHN0cm9rZT1cIiMwMDAwMDBcIiBzdHJva2Utd2lkdGg9XCIxXCIgb3BhY2l0eT1cIjFcIiBmaWxsLW9wYWNpdHk9XCIwLjhcIiAvPjwvc3ZnPiBBdmFpbGFibGU8YnI+J1xyXG4gICAgICAgICAgICArICc8c3ZnIGhlaWdodD1cIjEwXCIgd2lkdGg9XCIxMFwiPjxjaXJjbGUgY3g9XCI1XCIgY3k9XCI1XCIgcj1cIjVcIiBmaWxsPVwiJysgQ09MX1RFQ0hfQlVJTERGSU5BTElTRUQgKydcIiBzdHJva2U9XCIjMDAwMDAwXCIgc3Ryb2tlLXdpZHRoPVwiMVwiIG9wYWNpdHk9XCIxXCIgZmlsbC1vcGFjaXR5PVwiMC44XCIgLz48L3N2Zz4gQnVpbGQgRmluYWxpc2VkPGJyPidcclxuICAgICAgICAgICAgKyAnPHN2ZyBoZWlnaHQ9XCIxMFwiIHdpZHRoPVwiMTBcIj48Y2lyY2xlIGN4PVwiNVwiIGN5PVwiNVwiIHI9XCI1XCIgZmlsbD1cIicrIENPTF9URUNIX0RFU0lHTiArJ1wiIHN0cm9rZT1cIiMwMDAwMDBcIiBzdHJva2Utd2lkdGg9XCIxXCIgb3BhY2l0eT1cIjFcIiBmaWxsLW9wYWNpdHk9XCIwLjhcIiAvPjwvc3ZnPiBJbiBEZXNpZ248YnI+J1xyXG4gICAgICAgICAgICArICc8c3ZnIGhlaWdodD1cIjEwXCIgd2lkdGg9XCIxMFwiPjxjaXJjbGUgY3g9XCI1XCIgY3k9XCI1XCIgcj1cIjVcIiBmaWxsPVwiJysgQ09MX1RFQ0hfQ09NTUlUVEVEICsnXCIgc3Ryb2tlPVwiIzAwMDAwMFwiIHN0cm9rZS13aWR0aD1cIjFcIiBvcGFjaXR5PVwiMVwiIGZpbGwtb3BhY2l0eT1cIjAuOFwiIC8+PC9zdmc+IENvbW1pdHRlZDxicj4nXHJcbiAgICAgICAgICAgICsgJzxiPk11bHRpIER3ZWxsaW5nIFVuaXRzPC9iPjxicj4nXHJcbiAgICAgICAgICAgICsgJzxzdmcgaGVpZ2h0PVwiMTBcIiB3aWR0aD1cIjEwXCI+PGNpcmNsZSBjeD1cIjVcIiBjeT1cIjVcIiByPVwiNVwiIGZpbGw9XCInKyBDT0xfVEVDSF9NRFVfSU5CVUlMRCArJ1wiIHN0cm9rZT1cIiMwMDAwMDBcIiBzdHJva2Utd2lkdGg9XCIxXCIgb3BhY2l0eT1cIjFcIiBmaWxsLW9wYWNpdHk9XCIwLjhcIiAvPjwvc3ZnPiBJbiBCdWlsZDxicj4nXHJcbiAgICAgICAgICAgICsgJzxzdmcgaGVpZ2h0PVwiMTBcIiB3aWR0aD1cIjEwXCI+PGNpcmNsZSBjeD1cIjVcIiBjeT1cIjVcIiByPVwiNVwiIGZpbGw9XCInKyBDT0xfVEVDSF9NRFVfRUxJR0lCTEUgKydcIiBzdHJva2U9XCIjMDAwMDAwXCIgc3Ryb2tlLXdpZHRoPVwiMVwiIG9wYWNpdHk9XCIxXCIgZmlsbC1vcGFjaXR5PVwiMC44XCIgLz48L3N2Zz4gRWxsaWdpYmxlPGJyPidcclxuICAgICAgICAgICAgKyAnPHN2ZyBoZWlnaHQ9XCIxMFwiIHdpZHRoPVwiMTBcIj48Y2lyY2xlIGN4PVwiNVwiIGN5PVwiNVwiIHI9XCI1XCIgZmlsbD1cIicrY29sb3VyVW5rbm93bisnXCIgc3Ryb2tlPVwiIzAwMDAwMFwiIHN0cm9rZS13aWR0aD1cIjFcIiBvcGFjaXR5PVwiMVwiIGZpbGwtb3BhY2l0eT1cIjAuOFwiIC8+PC9zdmc+IFVua25vd24nO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuICc8c3ZnIGhlaWdodD1cIjEwXCIgd2lkdGg9XCIxMFwiPjxjaXJjbGUgY3g9XCI1XCIgY3k9XCI1XCIgcj1cIjVcIiBmaWxsPVwiJytjb2xvdXJGVFRQKydcIiBzdHJva2U9XCIjMDAwMDAwXCIgc3Ryb2tlLXdpZHRoPVwiMVwiIG9wYWNpdHk9XCIxXCIgZmlsbC1vcGFjaXR5PVwiMC44XCIgLz48L3N2Zz4gRlRUUDxicj4nICsgXHJcbiAgICAgICAgICAgICc8c3ZnIGhlaWdodD1cIjEwXCIgd2lkdGg9XCIxMFwiPjxjaXJjbGUgY3g9XCI1XCIgY3k9XCI1XCIgcj1cIjVcIiBmaWxsPVwiJytjb2xvdXJGVFRQQXZhaWwrJ1wiIHN0cm9rZT1cIiMwMDAwMDBcIiBzdHJva2Utd2lkdGg9XCIxXCIgb3BhY2l0eT1cIjFcIiBmaWxsLW9wYWNpdHk9XCIwLjhcIiAvPjwvc3ZnPiBGVFRQIFVwZ3JhZGU8YnI+JyArXHJcbiAgICAgICAgICAgICc8c3ZnIGhlaWdodD1cIjEwXCIgd2lkdGg9XCIxMFwiPjxjaXJjbGUgY3g9XCI1XCIgY3k9XCI1XCIgcj1cIjVcIiBmaWxsPVwiJytjb2xvdXJGVFRQU29vbisnXCIgc3Ryb2tlPVwiIzAwMDAwMFwiIHN0cm9rZS13aWR0aD1cIjFcIiBvcGFjaXR5PVwiMVwiIGZpbGwtb3BhY2l0eT1cIjAuOFwiIC8+PC9zdmc+IEZUVFAgVXBncmFkZSBTb29uPGJyPicgK1xyXG4gICAgICAgICAgICAnPHN2ZyBoZWlnaHQ9XCIxMFwiIHdpZHRoPVwiMTBcIj48Y2lyY2xlIGN4PVwiNVwiIGN5PVwiNVwiIHI9XCI1XCIgZmlsbD1cIicrY29sb3VySEZDKydcIiBzdHJva2U9XCIjMDAwMDAwXCIgc3Ryb2tlLXdpZHRoPVwiMVwiIG9wYWNpdHk9XCIxXCIgZmlsbC1vcGFjaXR5PVwiMC44XCIgLz48L3N2Zz4gSEZDPGJyPicgKyBcclxuICAgICAgICAgICAgJzxzdmcgaGVpZ2h0PVwiMTBcIiB3aWR0aD1cIjEwXCI+PGNpcmNsZSBjeD1cIjVcIiBjeT1cIjVcIiByPVwiNVwiIGZpbGw9XCInK2NvbG91ckZUVEMrJ1wiIHN0cm9rZT1cIiMwMDAwMDBcIiBzdHJva2Utd2lkdGg9XCIxXCIgb3BhY2l0eT1cIjFcIiBmaWxsLW9wYWNpdHk9XCIwLjhcIiAvPjwvc3ZnPiBGVFRDPGJyPicgK1xyXG4gICAgICAgICAgICAnPHN2ZyBoZWlnaHQ9XCIxMFwiIHdpZHRoPVwiMTBcIj48Y2lyY2xlIGN4PVwiNVwiIGN5PVwiNVwiIHI9XCI1XCIgZmlsbD1cIicrY29sb3VyRlRUTkIrJ1wiIHN0cm9rZT1cIiMwMDAwMDBcIiBzdHJva2Utd2lkdGg9XCIxXCIgb3BhY2l0eT1cIjFcIiBmaWxsLW9wYWNpdHk9XCIwLjhcIiAvPjwvc3ZnPiBGVFROL0ZUVEI8YnI+JyArXHJcbiAgICAgICAgICAgICc8c3ZnIGhlaWdodD1cIjEwXCIgd2lkdGg9XCIxMFwiPjxjaXJjbGUgY3g9XCI1XCIgY3k9XCI1XCIgcj1cIjVcIiBmaWxsPVwiJytjb2xvdXJGVysnXCIgc3Ryb2tlPVwiIzAwMDAwMFwiIHN0cm9rZS13aWR0aD1cIjFcIiBvcGFjaXR5PVwiMVwiIGZpbGwtb3BhY2l0eT1cIjAuOFwiIC8+PC9zdmc+IEZXPGJyPicgK1xyXG4gICAgICAgICAgICAnPHN2ZyBoZWlnaHQ9XCIxMFwiIHdpZHRoPVwiMTBcIj48Y2lyY2xlIGN4PVwiNVwiIGN5PVwiNVwiIHI9XCI1XCIgZmlsbD1cIicrY29sb3VyRldBdmFpbCsnXCIgc3Ryb2tlPVwiIzAwMDAwMFwiIHN0cm9rZS13aWR0aD1cIjFcIiBvcGFjaXR5PVwiMVwiIGZpbGwtb3BhY2l0eT1cIjAuOFwiIC8+PC9zdmc+IEZXIFVwZ3JhZGU8YnI+JyArXHJcbiAgICAgICAgICAgICc8c3ZnIGhlaWdodD1cIjEwXCIgd2lkdGg9XCIxMFwiPjxjaXJjbGUgY3g9XCI1XCIgY3k9XCI1XCIgcj1cIjVcIiBmaWxsPVwiJytjb2xvdXJTYXQrJ1wiIHN0cm9rZT1cIiMwMDAwMDBcIiBzdHJva2Utd2lkdGg9XCIxXCIgb3BhY2l0eT1cIjFcIiBmaWxsLW9wYWNpdHk9XCIwLjhcIiAvPjwvc3ZnPiBTYXRlbGxpdGU8YnI+JyArXHJcbiAgICAgICAgICAgICc8c3ZnIGhlaWdodD1cIjEwXCIgd2lkdGg9XCIxMFwiPjxjaXJjbGUgY3g9XCI1XCIgY3k9XCI1XCIgcj1cIjVcIiBmaWxsPVwiJytjb2xvdXJVbmtub3duKydcIiBzdHJva2U9XCIjMDAwMDAwXCIgc3Ryb2tlLXdpZHRoPVwiMVwiIG9wYWNpdHk9XCIxXCIgZmlsbC1vcGFjaXR5PVwiMC44XCIgLz48L3N2Zz4gVW5rbm93bic7XHJcbiAgICB9XHJcblxyXG4gICAgYWRkQ29udHJvbERpdihtYXApIHtcclxuXHJcbiAgICAgICAgaWYgKCF0aGlzLmNvbnRyb2xEaXYpIHtcclxuICAgICAgICAgICAgdGhpcy5jb250cm9sRGl2ID0gTC5Eb21VdGlsLmNyZWF0ZSgnZGl2JywgJ2luZm8gbGVnZW5kJyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLmNvbnRyb2xEaXYuc3R5bGUuYmFja2dyb3VuZENvbG9yID0gXCIjZmZmZmZmXCI7XHJcbiAgICAgICAgdGhpcy5jb250cm9sRGl2LnN0eWxlLm9wYWNpdHkgPSBcIjAuOFwiO1xyXG4gICAgICAgIHRoaXMuY29udHJvbERpdi5zdHlsZS5wYWRkaW5nID0gXCI1cHhcIjtcclxuICAgICAgICB0aGlzLmNvbnRyb2xEaXYuc3R5bGUuYm9yZGVyUmFkaXVzID0gXCI1cHhcIjtcclxuICAgICAgICB0aGlzLmNvbnRyb2xEaXYuc3R5bGUud2lkdGggPSBcIjE1MHB4XCI7XHJcblxyXG4gICAgICAgIHRoaXMuY29udHJvbERpdi5pbm5lckhUTUwgPSB0aGlzLmdldExlZ2VuZEhUTUwoKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHRoaXMuY29udHJvbERpdjtcclxuICAgIH1cclxuXHJcbiAgICByZWZyZXNoKCkge1xyXG4gICAgICAgIHRoaXMuY29udHJvbERpdi5pbm5lckhUTUwgPSB0aGlzLmdldExlZ2VuZEhUTUwoKTtcclxuICAgIH1cclxuXHJcbiAgICBzaG93KCkge1xyXG4gICAgICAgIHRoaXMuY29udHJvbC5hZGRUbyh0aGlzLm5iblRlY2hNYXAubWFwKTtcclxuICAgIH1cclxuXHJcbiAgICByZW1vdmUoKSB7XHJcbiAgICAgICAgdGhpcy5jb250cm9sLnJlbW92ZSgpO1xyXG4gICAgfVxyXG5cclxuICAgICovXHJcbn0iLCJpbXBvcnQgSVBsYWNlU3RvcmUgZnJvbSAnLi4vaW50ZXJmYWNlcy9wbGFjZXN0b3JlLmludGVyZmFjZSc7XHJcbmltcG9ydCB7IE5iblBsYWNlIH0gZnJvbSBcIi4uL3R5cGVzXCI7XHJcbmltcG9ydCB7IERCU2NoZW1hLCBJREJQRGF0YWJhc2UsIG9wZW5EQiB9IGZyb20gJ2lkYic7XHJcbmltcG9ydCB7IExvZ2dlciB9IGZyb20gJy4uL3V0aWxzJztcclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgTkJOVGVjaE1hcERCIGV4dGVuZHMgREJTY2hlbWEge1xyXG4gICAgbmJuUGxhY2VTdG9yZToge1xyXG4gICAgICAgIGtleTogc3RyaW5nO1xyXG4gICAgICAgIHZhbHVlOiBOYm5QbGFjZTtcclxuICAgICAgICBpbmRleGVzOiB7XHJcbiAgICAgICAgICAgIC8vbG9jaWQ6IHN0cmluZztcclxuICAgICAgICAgICAgLy9sYXRsbmc6IFtudW1iZXIsIG51bWJlcl07XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIEluZGV4REJQbGFjZVN0b3JlIGltcGxlbWVudHMgSVBsYWNlU3RvcmUge1xyXG5cclxuICAgIHByaXZhdGUgREJfTkFNRSA9ICduc20tcGxhY2VzdG9yZSc7XHJcblxyXG4gICAgcHJpdmF0ZSBsb2dnZXIgPSBuZXcgTG9nZ2VyKCdJbmRleERCUGxhY2VTdG9yZScpO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogVGhlIGRhdGFiYXNlLlxyXG4gICAgICovXHJcbiAgICBwcml2YXRlIGRiPzogSURCUERhdGFiYXNlPE5CTlRlY2hNYXBEQj47XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBTZXR1cCBkYXRhYmFzZS5cclxuICAgICAqL1xyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgXHJcbiAgICAgICAgdGhpcy5sb2dnZXIuaW5mbygnU2V0dGluZyB1cCBkYXRhYmFzZS4uLicpO1xyXG5cclxuICAgICAgICBvcGVuREI8TkJOVGVjaE1hcERCPih0aGlzLkRCX05BTUUsIDEsIHtcclxuXHJcbiAgICAgICAgICAgIHVwZ3JhZGUoZGIsIG9sZFZlcnNpb24sIG5ld1ZlcnNpb24sIHRyYW5zYWN0aW9uLCBldmVudCkge1xyXG5cclxuICAgICAgICAgICAgICAgIGNvbnN0IG9iamVjdFN0b3JlTmFtZXMgPSBkYi5vYmplY3RTdG9yZU5hbWVzO1xyXG5cclxuICAgICAgICAgICAgICAgIC8vIENyZWF0ZSBuYm4gcGxhY2Ugc3RvcmUgaWYgaXQgZG9lc24ndCBleGlzdFxyXG4gICAgICAgICAgICAgICAgaWYgKCFvYmplY3RTdG9yZU5hbWVzLmNvbnRhaW5zKCduYm5QbGFjZVN0b3JlJykpIHtcclxuICAgICAgICAgICAgICAgICAgICBkYi5jcmVhdGVPYmplY3RTdG9yZSgnbmJuUGxhY2VTdG9yZScsIHsga2V5UGF0aDogJ2xvY2lkJyB9KTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIH0sXHJcblxyXG4gICAgICAgICAgICBibG9ja2VkOiAoY3VycmVudFZlcnNpb24sIGJsb2NrZWRWZXJzaW9uLCBldmVudCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5sb2dnZXIud2FybignRGF0YWJhc2UgYmxvY2tlZCEnLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgY3VycmVudFZlcnNpb24sIGJsb2NrZWRWZXJzaW9uLCBldmVudCxcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9LFxyXG5cclxuICAgICAgICAgICAgYmxvY2tpbmc6IChjdXJyZW50VmVyc2lvbiwgYmxvY2tlZFZlcnNpb24sIGV2ZW50KSA9PiB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmxvZ2dlci53YXJuKCdEYXRhYmFzZSBibG9ja2luZyEnLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgY3VycmVudFZlcnNpb24sIGJsb2NrZWRWZXJzaW9uLCBldmVudFxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0sXHJcblxyXG4gICAgICAgICAgICB0ZXJtaW5hdGVkOiAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmxvZ2dlci53YXJuKCdEYXRhYmFzZSB0ZXJtaW5hdGVkIScpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgIH0pXHJcbiAgICAgICAgXHJcbiAgICAgICAgLnRoZW4oKGRiKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMuZGIgPSBkYjtcclxuICAgICAgICAgICAgdGhpcy5sb2dnZXIuaW5mbygnRGF0YWJhc2UgcmVhZHkhJyk7XHJcbiAgICAgICAgfSlcclxuICAgICAgICBcclxuICAgICAgICAuY2F0Y2goKGVycikgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLmxvZ2dlci5lcnJvcignRmFpbGVkIHRvIG9wZW4gZGF0YWJhc2U6ICcsIGVycik7XHJcbiAgICAgICAgfSlcclxuXHJcbiAgICAgICAgLmZpbmFsbHkoKCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLmxvZ2dlci5pbmZvKCdEYXRhYmFzZSBzZXR1cCBjb21wbGV0ZS4nKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBDaGVjayBpZiB0aGUgZGF0YWJhc2UgaXMgcmVhZHkuXHJcbiAgICAgKiBAcmV0dXJucyBcclxuICAgICAqL1xyXG4gICAgaXNSZWFkeSgpIDogYm9vbGVhbiB7XHJcbiAgICAgICAgcmV0dXJuICEhdGhpcy5kYjtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFdhaXQgdW50aWwgdGhlIGRhdGFiYXNlIGlzIHJlYWR5LlxyXG4gICAgICogQHBhcmFtIHRpbWVvdXRTZWNvbmRzIFxyXG4gICAgICogQHJldHVybnMgXHJcbiAgICAgKi9cclxuICAgIGFzeW5jIHdhaXRVbnRpbFJlYWR5KHRpbWVvdXRTZWNvbmRzOiBudW1iZXIpIDogUHJvbWlzZTx2b2lkPiB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuICAgICAgICAgICAgY29uc3Qgc3RhcnRUaW1lID0gRGF0ZS5ub3coKTtcclxuICAgICAgICAgICAgY29uc3QgaW50ZXJ2YWwgPSBzZXRJbnRlcnZhbCgoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB0aW1lRWxhcHNlZCA9IERhdGUubm93KCkgLSBzdGFydFRpbWU7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5pc1JlYWR5KCkpIHtcclxuICAgICAgICAgICAgICAgICAgICBjbGVhckludGVydmFsKGludGVydmFsKTtcclxuICAgICAgICAgICAgICAgICAgICByZXNvbHZlKCk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHRpbWVFbGFwc2VkID4gdGltZW91dFNlY29uZHMgKiAxMDAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2xlYXJJbnRlcnZhbChpbnRlcnZhbCk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVqZWN0KG5ldyBFcnJvcihgRGF0YWJhc2Ugbm90IHJlYWR5IGFmdGVyICR7dGltZW91dFNlY29uZHN9IHNlY29uZHMuYCkpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LCAxMDApO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogU3RvcmUgYSBzaW5nbGUgcGxhY2UuXHJcbiAgICAgKiBAcGFyYW0gcGxhY2UgXHJcbiAgICAgKi9cclxuICAgIGFzeW5jIHN0b3JlUGxhY2UocGxhY2U6IE5iblBsYWNlKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgICAgICAgY29uc3QgZGIgPSBhd2FpdCB0aGlzLmdldERiKCk7XHJcbiAgICAgICAgYXdhaXQgZGIucHV0KCduYm5QbGFjZVN0b3JlJywgcGxhY2UpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogU3RvcmUgYSBiYXRjaCBvZiBwbGFjZXMuXHJcbiAgICAgKiBVc2VzIGEgdHJhbnNhY3Rpb24gdG8gcHJvdmlkZSBiZXR0ZXIgcGVyZm9ybWFuY2UuXHJcbiAgICAgKiBAcGFyYW0gcGxhY2VzIFxyXG4gICAgICovXHJcbiAgICBhc3luYyBzdG9yZVBsYWNlcyhwbGFjZXM6IE5iblBsYWNlW10pIDogUHJvbWlzZTx2b2lkPiB7XHJcblxyXG4gICAgICAgIC8vIEdldCB0aGUgZGF0YWJhc2VcclxuICAgICAgICBjb25zdCBkYiA9IGF3YWl0IHRoaXMuZ2V0RGIoKTtcclxuXHJcbiAgICAgICAgLy8gQ3JlYXRlIGEgdHJhbnNhY3Rpb25cclxuICAgICAgICBjb25zdCB0eCA9IGRiLnRyYW5zYWN0aW9uKFsnbmJuUGxhY2VTdG9yZSddLCAncmVhZHdyaXRlJywge1xyXG4gICAgICAgICAgICAnZHVyYWJpbGl0eSc6ICdyZWxheGVkJyxcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgLy8gR2V0IHRoZSBvYmplY3Qgc3RvcmVcclxuICAgICAgICBjb25zdCBwbGFjZVN0b3JlID0gdHgub2JqZWN0U3RvcmUoJ25iblBsYWNlU3RvcmUnKTtcclxuXHJcbiAgICAgICAgLy8gUHV0IGVhY2ggcGxhY2UgaW50byB0aGUgc3RvcmVcclxuICAgICAgICBhd2FpdCBwbGFjZXMubWFwKHBsYWNlID0+IHBsYWNlU3RvcmUucHV0KHBsYWNlKSlcclxuICAgICAgICBcclxuICAgICAgICAvLyBXYWl0IGZvciB0aGUgdHJhbnNhY3Rpb24gdG8gY29tcGxldGVcclxuICAgICAgICBhd2FpdCB0eC5kb25lO1xyXG5cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEdldCBhIHNpbmdsZSBwbGFjZS5cclxuICAgICAqIEBwYXJhbSBsb2NpZCBcclxuICAgICAqIEByZXR1cm5zIFxyXG4gICAgICovXHJcbiAgICBhc3luYyBnZXRQbGFjZShsb2NpZDogc3RyaW5nKSA6IFByb21pc2U8TmJuUGxhY2UgfCB1bmRlZmluZWQ+IHtcclxuXHJcbiAgICAgICAgLy8gR2V0IHRoZSBkYXRhYmFzZVxyXG4gICAgICAgIGNvbnN0IGRiID0gYXdhaXQgdGhpcy5nZXREYigpO1xyXG5cclxuICAgICAgICAvLyBHZXQgdGhlIHBsYWNlXHJcbiAgICAgICAgcmV0dXJuIGF3YWl0IGRiLmdldCgnbmJuUGxhY2VTdG9yZScsIGxvY2lkKTtcclxuXHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXQgYSBiYXRjaCBvZiBwbGFjZXMuXHJcbiAgICAgKiBVc2VzIGEgdHJhbnNhY3Rpb24gdG8gcHJvdmlkZSBiZXR0ZXIgcGVyZm9ybWFuY2UuXHJcbiAgICAgKiBAcGFyYW0gbG9jaWRzIFxyXG4gICAgICogQHJldHVybnMgXHJcbiAgICAgKi9cclxuICAgIGFzeW5jIGdldFBsYWNlcyhsb2NpZHM6IHN0cmluZ1tdKTogUHJvbWlzZTxOYm5QbGFjZVtdPiB7XHJcblxyXG4gICAgICAgIC8vIEdldCB0aGUgZGF0YWJhc2VcclxuICAgICAgICBjb25zdCBkYiA9IGF3YWl0IHRoaXMuZ2V0RGIoKTtcclxuICAgICAgICBcclxuICAgICAgICAvLyBPcGVuIGEgdHJhbnNhY3Rpb25cclxuICAgICAgICBjb25zdCB0eCA9IGRiLnRyYW5zYWN0aW9uKFsnbmJuUGxhY2VTdG9yZSddLCAncmVhZG9ubHknKTtcclxuXHJcbiAgICAgICAgLy8gR2V0IHRoZSBvYmplY3Qgc3RvcmVcclxuICAgICAgICBjb25zdCBwbGFjZVN0b3JlID0gdHgub2JqZWN0U3RvcmUoJ25iblBsYWNlU3RvcmUnKTtcclxuXHJcbiAgICAgICAgLy8gR2V0IHRoZSBwbGFjZXNcclxuICAgICAgICBjb25zdCBwbGFjZXMgPSBhd2FpdCBQcm9taXNlLmFsbChsb2NpZHMubWFwKGxvY2lkID0+IHBsYWNlU3RvcmUuZ2V0KGxvY2lkKSkpO1xyXG5cclxuICAgICAgICAvLyBXYWl0IGZvciB0aGUgdHJhbnNhY3Rpb24gdG8gY29tcGxldGVcclxuICAgICAgICBhd2FpdCB0eC5kb25lO1xyXG5cclxuICAgICAgICAvLyBSZXR1cm4gdGhlIHBsYWNlc1xyXG4gICAgICAgIHJldHVybiBwbGFjZXMuZmlsdGVyKHBsYWNlID0+ICEhcGxhY2UpIGFzIE5iblBsYWNlW107XHJcblxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogR2V0IHRoZSBkYXRhYmFzZS5cclxuICAgICAqIEBwYXJhbSB0aW1lb3V0IFxyXG4gICAgICogQHJldHVybnMgUHJvbWlzZTxJREJQRGF0YWJhc2U8TkJOVGVjaE1hcERCPj5cclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSBhc3luYyBnZXREYih0aW1lb3V0ID0gNSkgOiBQcm9taXNlPElEQlBEYXRhYmFzZTxOQk5UZWNoTWFwREI+PiB7XHJcbiAgICAgICAgYXdhaXQgdGhpcy53YWl0VW50aWxSZWFkeSh0aW1lb3V0KTtcclxuICAgICAgICBpZiAoIXRoaXMuZGIpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdEYXRhYmFzZSBub3QgcmVhZHkuJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0aGlzLmRiO1xyXG4gICAgfVxyXG5cclxufSIsImltcG9ydCBJTW9kZSBmcm9tIFwiLi4vaW50ZXJmYWNlcy9tb2RlLmludGVyZmFjZVwiO1xyXG5pbXBvcnQgeyBMZWdlbmRJdGVtLCBOYm5QbGFjZSwgUG9pbnRBbmRQbGFjZXMgfSBmcm9tIFwiLi4vdHlwZXNcIjtcclxuaW1wb3J0ICogYXMgTCBmcm9tIFwibGVhZmxldFwiO1xyXG5cclxuaW1wb3J0IHtcclxuICAgIGlzUGxhY2VGVFRQLFxyXG4gICAgaXNQbGFjZUZUVEMsXHJcbiAgICBpc1BsYWNlRlRUUEF2YWlsLFxyXG4gICAgaXNQbGFjZUZUVFBTb29uLFxyXG4gICAgaXNQbGFjZUZUVFBGYXIsXHJcbiAgICBpc0Z3dG9GVFRDLFxyXG4gICAgaXNGd3RvRlRUTixcclxuICAgIGlzU2F0VG9GVyxcclxuICAgIGlzRGVidWdNb2RlXHJcbn0gZnJvbSBcIi4uL3V0aWxzXCI7XHJcblxyXG5jb25zdCBDT0xfVEVDSF9DT01QTEVURSAgICAgICAgID0gJyMxRDcwNDQnO1xyXG5jb25zdCBDT0xfVEVDSF9BVkFJTCAgICAgICAgICAgID0gJyMwMkI5RTMnO1xyXG5jb25zdCBDT0xfVEVDSF9CVUlMREZJTkFMSVNFRCAgID0gJyNGRkJFMDAnO1xyXG5jb25zdCBDT0xfVEVDSF9ERVNJR04gICAgICAgICAgID0gJyNGRjdFMDEnO1xyXG5jb25zdCBDT0xfVEVDSF9DT01NSVRURUQgICAgICAgID0gJyNFMzA3MUQnO1xyXG5jb25zdCBDT0xfVEVDSF9NRFVfSU5CVUlMRCAgICAgID0gJyMwMjJCRTMnO1xyXG5jb25zdCBDT0xfVEVDSF9NRFVfRUxJR0lCTEUgICAgID0gJyM2QjAyRTMnO1xyXG5jb25zdCBDT0xfVU5LTk9XTiAgICAgICAgICAgICAgID0gJyM4ODg4ODgnO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVGVjaFVwZ3JhZGVNb2RlIGltcGxlbWVudHMgSU1vZGUge1xyXG5cclxuICAgIGZpbHRlcihwbGFjZTogTmJuUGxhY2UpIDogYm9vbGVhbiB7XHJcblxyXG4gICAgICAgIGlmIChwbGFjZS50ZWNoQ2hhbmdlU3RhdHVzID09ICdOb3QgUGxhbm5lZCcpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHBsYWNlLnRlY2hDaGFuZ2VTdGF0dXMpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcblxyXG4gICAgfVxyXG5cclxuICAgIHBvaW50Q29sb3VyKHBvaW50OiBQb2ludEFuZFBsYWNlcykgOiBzdHJpbmcge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnBsYWNlQ29sb3VyKHBvaW50LnBsYWNlc1swXSk7XHJcbiAgICB9XHJcblxyXG4gICAgcGxhY2VDb2xvdXIocGxhY2U6IE5iblBsYWNlKSA6IHN0cmluZyB7XHJcblxyXG4gICAgICAgIHN3aXRjaChwbGFjZS50ZWNoQ2hhbmdlU3RhdHVzKSB7XHJcbiAgICAgICAgICAgIGNhc2UgJ1ByZXZpb3VzIFRlY2ggRGlzY29ubmVjdGVkJzogcmV0dXJuIENPTF9URUNIX0NPTVBMRVRFO1xyXG4gICAgICAgICAgICBjYXNlICdOZXcgVGVjaCBDb25uZWN0ZWQnIDogcmV0dXJuIENPTF9URUNIX0NPTVBMRVRFO1xyXG4gICAgICAgICAgICBjYXNlICdJbiBEZXNpZ24nOiByZXR1cm4gQ09MX1RFQ0hfREVTSUdOO1xyXG4gICAgICAgICAgICBjYXNlICdCdWlsZCBGaW5hbGlzZWQnOiByZXR1cm4gQ09MX1RFQ0hfQlVJTERGSU5BTElTRUQ7XHJcbiAgICAgICAgICAgIGNhc2UgJ0NvbW1pdHRlZCc6IHJldHVybiBDT0xfVEVDSF9DT01NSVRURUQ7XHJcbiAgICAgICAgICAgIGNhc2UgJ0VsaWdpYmxlIFRvIE9yZGVyJzogcmV0dXJuIENPTF9URUNIX0FWQUlMO1xyXG4gICAgICAgICAgICBjYXNlICdNRFUgQ29tcGxleCBFbGlnaWJsZSBUbyBBcHBseSc6IHJldHVybiBDT0xfVEVDSF9NRFVfRUxJR0lCTEU7XHJcbiAgICAgICAgICAgIGNhc2UgJ01EVSBDb21wbGV4IFByZW1pc2VzIEluIEJ1aWxkJzogcmV0dXJuIENPTF9URUNIX01EVV9JTkJVSUxEO1xyXG4gICAgICAgIH1cclxuICAgICAgICBcclxuICAgICAgICByZXR1cm4gQ09MX1VOS05PV047XHJcblxyXG4gICAgfVxyXG5cclxuICAgIHJlbmRlclBvcHVwQ29udGVudChwbGFjZTogTmJuUGxhY2UpIDogSFRNTEVsZW1lbnQge1xyXG4gICAgICAgIFxyXG4gICAgICAgIGNvbnN0IGNvbnRlbnQgPSBMLkRvbVV0aWwuY3JlYXRlKCdkaXYnKTtcclxuXHJcbiAgICAgICAgY29udGVudC5pbm5lckhUTUwgPSAnPGI+JytwbGFjZS5sb2NpZCsnPC9iPjwvYnI+J1xyXG4gICAgICAgICAgICArIHBsYWNlLmFkZHJlc3MxICsgJzwvYnI+J1xyXG4gICAgICAgICAgICArIHBsYWNlLmFkZHJlc3MyICsgJzwvYnI+J1xyXG4gICAgICAgICAgICArICc8YnIgLz4nO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICBjb250ZW50LmlubmVySFRNTCArPSAnPGI+VGVjaG5vbG9neSBQbGFuPC9iPjwvYnI+JztcclxuXHJcbiAgICAgICAgLyoqIFRlY2hub2xvZ3kgUGxhbiBGaW5hbCBTdGF0ZSAqL1xyXG4gICAgICAgIGlmIChwbGFjZS50ZWNoVHlwZSA9PSAnRlRUUCdcclxuICAgICAgICAgICAgfHwgIXBsYWNlLmFsdFJlYXNvbkNvZGVcclxuICAgICAgICAgICAgfHwgcGxhY2UuYWx0UmVhc29uQ29kZSA9PSAnTlVMTF9OQSdcclxuICAgICAgICApIHtcclxuICAgICAgICAgICAgY29udGVudC5pbm5lckhUTUwgKz0gJ1RlY2hub2xvZ3k6ICcgKyBwbGFjZS50ZWNoVHlwZSArICc8YnIgLz4nO1xyXG4gICAgICAgICAgICBpZiAocGxhY2UudGVjaFR5cGUgIT0gJ0ZUVFAnKSB7XHJcbiAgICAgICAgICAgICAgICBjb250ZW50LmlubmVySFRNTCArPSAnTm8gdGVjaCB1cGdyYWRlIHBsYW5uZWQ8YnIgLz4nO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSBcclxuICAgICAgICBcclxuICAgICAgICBlbHNlIGlmIChwbGFjZS5hbHRSZWFzb25Db2RlICYmIHBsYWNlLmFsdFJlYXNvbkNvZGUubWF0Y2goL15GVFRQLykpIHtcclxuICAgICAgICAgICAgY29udGVudC5pbm5lckhUTUwgKz0gJ0N1cnJlbnQ6ICcgKyBwbGFjZS50ZWNoVHlwZSArICc8YnIgLz4nO1xyXG4gICAgICAgICAgICBjb250ZW50LmlubmVySFRNTCArPSAnQ2hhbmdlOiAnICsgcGxhY2UuYWx0UmVhc29uQ29kZSArICc8YnIgLz4nO1xyXG4gICAgICAgICAgICBjb250ZW50LmlubmVySFRNTCArPSAnU3RhdHVzOiAnICsgcGxhY2UudGVjaENoYW5nZVN0YXR1cyArICc8YnIgLz4nO1xyXG4gICAgICAgICAgICBjb250ZW50LmlubmVySFRNTCArPSAnUHJvZ3JhbTogJyArIHBsYWNlLnByb2dyYW1UeXBlICsgJzxiciAvPic7XHJcbiAgICAgICAgICAgIGNvbnRlbnQuaW5uZXJIVE1MICs9ICdUYXJnZXQgUXRyOiAnICsgcGxhY2UudGFyZ2V0RWxpZ2liaWxpdHlRdWFydGVyICsgJzxiciAvPic7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIFxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBjb250ZW50LmlubmVySFRNTCArPSAnQ3VycmVudDogJyArIHBsYWNlLnRlY2hUeXBlICsgJzxiciAvPic7XHJcbiAgICAgICAgICAgIGNvbnRlbnQuaW5uZXJIVE1MICs9ICdDaGFuZ2U6ICcgKyBwbGFjZS5hbHRSZWFzb25Db2RlICsgJzxiciAvPic7XHJcbiAgICAgICAgICAgIGNvbnRlbnQuaW5uZXJIVE1MICs9ICdTdGF0dXM6ICcgKyBwbGFjZS50ZWNoQ2hhbmdlU3RhdHVzICsgJzxiciAvPic7XHJcbiAgICAgICAgICAgIGNvbnRlbnQuaW5uZXJIVE1MICs9ICdQcm9ncmFtOiAnICsgcGxhY2UucHJvZ3JhbVR5cGUgKyAnPGJyIC8+JztcclxuICAgICAgICAgICAgY29udGVudC5pbm5lckhUTUwgKz0gJ1RhcmdldCBRdHI6ICcgKyBwbGFjZS50YXJnZXRFbGlnaWJpbGl0eVF1YXJ0ZXIgKyAnPGJyIC8+JztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnRlbnQuaW5uZXJIVE1MICs9ICc8YnIgLz4nOyBcclxuICAgICAgICBcclxuICAgICAgICBpZiAoaXNEZWJ1Z01vZGUoKSkge1xyXG4gICAgICAgICAgICBjb25zdCBociA9IEwuRG9tVXRpbC5jcmVhdGUoJ2hyJyk7XHJcbiAgICAgICAgICAgIGNvbnN0IHByZSA9IEwuRG9tVXRpbC5jcmVhdGUoJ3ByZScpO1xyXG4gICAgICAgICAgICBwcmUuaW5uZXJIVE1MID0gSlNPTi5zdHJpbmdpZnkocGxhY2UsIG51bGwsIDIpO1xyXG4gICAgICAgICAgICBjb250ZW50LmFwcGVuZENoaWxkKGhyKTtcclxuICAgICAgICAgICAgY29udGVudC5hcHBlbmRDaGlsZChwcmUpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIGNvbnRlbnQ7XHJcbiAgICB9XHJcblxyXG4gICAgcmVuZGVyVG9vbHRpcChwbGFjZXM6IE5iblBsYWNlW10pIDogc3RyaW5nIHtcclxuICAgICAgICBsZXQgbGFiZWwgPSBwbGFjZXNbMF0uYWRkcmVzczE7XHJcblxyXG4gICAgICAgIGlmIChwbGFjZXMubGVuZ3RoID4gMSkge1xyXG4gICAgICAgICAgICBsYWJlbCArPSAnICggKyAnICsgKHBsYWNlcy5sZW5ndGggLSAxKSArICcgbW9yZSknO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIGxhYmVsO1xyXG5cclxuICAgIH1cclxuXHJcbiAgICBnZXRMZWdlbmRJdGVtcygpOiBMZWdlbmRJdGVtW10ge1xyXG4gICAgICAgIHJldHVybiBbXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGxhYmVsOiAnUHJldmlvdXMgVGVjaCBEaXNjb25uZWN0ZWQnLFxyXG4gICAgICAgICAgICAgICAgY29sb3VyOiBDT0xfVEVDSF9DT01QTEVURVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBsYWJlbDogJ05ldyBUZWNoIENvbm5lY3RlZCcsXHJcbiAgICAgICAgICAgICAgICBjb2xvdXI6IENPTF9URUNIX0NPTVBMRVRFXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGxhYmVsOiAnRWxpZ2libGUgVG8gT3JkZXInLFxyXG4gICAgICAgICAgICAgICAgY29sb3VyOiBDT0xfVEVDSF9BVkFJTFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBsYWJlbDogJ0J1aWxkIEZpbmFsaXNlZCcsXHJcbiAgICAgICAgICAgICAgICBjb2xvdXI6IENPTF9URUNIX0JVSUxERklOQUxJU0VEXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGxhYmVsOiAnSW4gRGVzaWduJyxcclxuICAgICAgICAgICAgICAgIGNvbG91cjogQ09MX1RFQ0hfREVTSUdOXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGxhYmVsOiAnQ29tbWl0dGVkJyxcclxuICAgICAgICAgICAgICAgIGNvbG91cjogQ09MX1RFQ0hfQ09NTUlUVEVEXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGxhYmVsOiAnTURVIENvbXBsZXggRWxpZ2libGUgVG8gQXBwbHknLFxyXG4gICAgICAgICAgICAgICAgY29sb3VyOiBDT0xfVEVDSF9NRFVfRUxJR0lCTEVcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgbGFiZWw6ICdNRFUgQ29tcGxleCBQcmVtaXNlcyBJbiBCdWlsZCcsXHJcbiAgICAgICAgICAgICAgICBjb2xvdXI6IENPTF9URUNIX01EVV9JTkJVSUxEXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGxhYmVsOiAnVW5rbm93bicsXHJcbiAgICAgICAgICAgICAgICBjb2xvdXI6IENPTF9VTktOT1dOXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICBdO1xyXG4gICAgfVxyXG5cclxufSIsImltcG9ydCBJTW9kZSBmcm9tIFwiLi4vaW50ZXJmYWNlcy9tb2RlLmludGVyZmFjZVwiO1xyXG5pbXBvcnQgeyBMZWdlbmRJdGVtLCBOYm5QbGFjZSwgUG9pbnRBbmRQbGFjZXMgfSBmcm9tIFwiLi4vdHlwZXNcIjtcclxuaW1wb3J0ICogYXMgTCBmcm9tIFwibGVhZmxldFwiO1xyXG5cclxuaW1wb3J0IHtcclxuICAgIGlzUGxhY2VGVFRQLFxyXG4gICAgaXNQbGFjZUZUVEMsXHJcbiAgICBpc1BsYWNlRlRUUEF2YWlsLFxyXG4gICAgaXNQbGFjZUZUVFBTb29uLFxyXG4gICAgaXNQbGFjZUZUVFBGYXIsXHJcbiAgICBpc0Z3dG9GVFRDLFxyXG4gICAgaXNGd3RvRlRUTixcclxuICAgIGlzU2F0VG9GVyxcclxuICAgIGlzRGVidWdNb2RlXHJcbn0gZnJvbSBcIi4uL3V0aWxzXCI7XHJcblxyXG5jb25zdCBDT0xfRUVfQ0JEX1pCQyAgICA9ICcjMUQ3MDQ0JztcclxuY29uc3QgQ09MX0VFX0NCRF9CQyAgICAgPSAnIzAyQjlFMyc7XHJcbmNvbnN0IENPTF9FRV9aMTIzX1pCQyAgID0gJyNGRjdFMDEnO1xyXG5jb25zdCBDT0xfRUVfWjEyM19CQyAgICA9ICcjRTMwNzFEJztcclxuY29uc3QgQ09MX1VOS05PV04gICAgICAgPSAnIzg4ODg4OCc7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBFRU1vZGUgaW1wbGVtZW50cyBJTW9kZSB7XHJcblxyXG4gICAgZmlsdGVyKHBsYWNlOiBOYm5QbGFjZSkgOiBib29sZWFuIHtcclxuICAgICAgICByZXR1cm4gcGxhY2UuZWU7XHJcbiAgICB9XHJcblxyXG4gICAgcG9pbnRDb2xvdXIocG9pbnQ6IFBvaW50QW5kUGxhY2VzKSA6IHN0cmluZyB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMucGxhY2VDb2xvdXIocG9pbnQucGxhY2VzWzBdKTtcclxuICAgIH1cclxuXHJcbiAgICBwbGFjZUNvbG91cihwbGFjZTogTmJuUGxhY2UpIDogc3RyaW5nIHtcclxuXHJcbiAgICAgICAgaWYocGxhY2UuY2JkcHJpY2luZyAmJiBwbGFjZS56ZXJvQnVpbGRDb3N0KSB7XHJcbiAgICAgICAgICAgIHJldHVybiBDT0xfRUVfQ0JEX1pCQztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmKHBsYWNlLmNiZHByaWNpbmcgJiYgIXBsYWNlLnplcm9CdWlsZENvc3QpIHtcclxuICAgICAgICAgICAgcmV0dXJuIENPTF9FRV9DQkRfQkM7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZighcGxhY2UuY2JkcHJpY2luZyAmJiBwbGFjZS56ZXJvQnVpbGRDb3N0KSB7XHJcbiAgICAgICAgICAgIHJldHVybiBDT0xfRUVfWjEyM19aQkM7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZighcGxhY2UuY2JkcHJpY2luZyAmJiAhcGxhY2UuemVyb0J1aWxkQ29zdCkge1xyXG4gICAgICAgICAgICByZXR1cm4gQ09MX0VFX1oxMjNfQkM7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIFxyXG4gICAgICAgIHJldHVybiBDT0xfVU5LTk9XTjtcclxuXHJcbiAgICB9XHJcblxyXG4gICAgcmVuZGVyUG9wdXBDb250ZW50KHBsYWNlOiBOYm5QbGFjZSkgOiBIVE1MRWxlbWVudCB7XHJcbiAgICAgICAgXHJcbiAgICAgICAgY29uc3QgY29udGVudCA9IEwuRG9tVXRpbC5jcmVhdGUoJ2RpdicpO1xyXG5cclxuICAgICAgICBjb250ZW50LmlubmVySFRNTCA9ICc8Yj4nK3BsYWNlLmxvY2lkKyc8L2I+PC9icj4nXHJcbiAgICAgICAgICAgICsgcGxhY2UuYWRkcmVzczEgKyAnPC9icj4nXHJcbiAgICAgICAgICAgICsgcGxhY2UuYWRkcmVzczIgKyAnPC9icj4nXHJcbiAgICAgICAgICAgICsgJzxiciAvPic7XHJcblxyXG4gICAgICAgIGNvbnRlbnQuaW5uZXJIVE1MICArPSAnPGI+RW50ZXJwcmlzZSBFdGhlcm5ldDwvYj48L2JyPic7XHJcbiAgICAgICAgY29udGVudC5pbm5lckhUTUwgICs9ICdQcmljZSBab25lOiAnICsgKCBwbGFjZS5jYmRwcmljaW5nID8gJ0NCRCcgOiAnWm9uZSAxLzIvMycgKSArICc8YnIgLz4nXHJcbiAgICAgICAgY29udGVudC5pbm5lckhUTUwgICs9ICdCdWlsZCBDb3N0OiAnICsgKCBwbGFjZS56ZXJvQnVpbGRDb3N0ID8gJyQwJyA6ICdQT0EnICkgKyAnPGJyIC8+J1xyXG4gICAgICAgIGNvbnRlbnQuaW5uZXJIVE1MICArPSAnPGJyIC8+JztcclxuICAgICAgICBcclxuICAgICAgICBpZiAoaXNEZWJ1Z01vZGUoKSkge1xyXG4gICAgICAgICAgICBjb25zdCBociA9IEwuRG9tVXRpbC5jcmVhdGUoJ2hyJyk7XHJcbiAgICAgICAgICAgIGNvbnN0IHByZSA9IEwuRG9tVXRpbC5jcmVhdGUoJ3ByZScpO1xyXG4gICAgICAgICAgICBwcmUuaW5uZXJIVE1MID0gSlNPTi5zdHJpbmdpZnkocGxhY2UsIG51bGwsIDIpO1xyXG4gICAgICAgICAgICBjb250ZW50LmFwcGVuZENoaWxkKGhyKTtcclxuICAgICAgICAgICAgY29udGVudC5hcHBlbmRDaGlsZChwcmUpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIGNvbnRlbnQ7XHJcbiAgICB9XHJcblxyXG4gICAgcmVuZGVyVG9vbHRpcChwbGFjZXM6IE5iblBsYWNlW10pIDogc3RyaW5nIHtcclxuICAgICAgICBsZXQgbGFiZWwgPSBwbGFjZXNbMF0uYWRkcmVzczE7XHJcblxyXG4gICAgICAgIGlmIChwbGFjZXMubGVuZ3RoID4gMSkge1xyXG4gICAgICAgICAgICBsYWJlbCArPSAnICggKyAnICsgKHBsYWNlcy5sZW5ndGggLSAxKSArICcgbW9yZSknO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIGxhYmVsO1xyXG5cclxuICAgIH1cclxuXHJcbiAgICBnZXRMZWdlbmRJdGVtcygpOiBMZWdlbmRJdGVtW10ge1xyXG4gICAgICAgIHJldHVybiBbXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGxhYmVsOiAnRUUgQ0JEICQwJyxcclxuICAgICAgICAgICAgICAgIGNvbG91cjogQ09MX0VFX0NCRF9aQkNcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgbGFiZWw6ICdFRSBDQkQgUE9BJyxcclxuICAgICAgICAgICAgICAgIGNvbG91cjogQ09MX0VFX0NCRF9CQ1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBsYWJlbDogJ0VFIFoxMjMgJDAnLFxyXG4gICAgICAgICAgICAgICAgY29sb3VyOiBDT0xfRUVfWjEyM19aQkNcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgbGFiZWw6ICdFRSBab25lIDEvMi8zIFBPQScsXHJcbiAgICAgICAgICAgICAgICBjb2xvdXI6IENPTF9FRV9aMTIzX0JDXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGxhYmVsOiAnVW5rbm93bicsXHJcbiAgICAgICAgICAgICAgICBjb2xvdXI6IENPTF9VTktOT1dOXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICBdO1xyXG4gICAgfVxyXG5cclxufSIsIi8qKlxyXG4gKiBAZmlsZSBNYWluIGVudHJ5IHBvaW50IGZvciBtYXAgc2NyaXB0cy5cclxuICogQG1vZHVsZSBpbmRleC50c1xyXG4gKiBAdmVyc2lvbiAxLjAuMFxyXG4gKiBAYXV0aG9yIEtvYWxhR1xyXG4gKiBAbGljZW5zZSBNSVRcclxuICovXHJcblxyXG5pbXBvcnQgTGlwQXBpIGZyb20gXCIuL2FwaS9saXBfYXBpLmNsYXNzXCI7XHJcbmltcG9ydCBOYm5UZWNoTWFwIGZyb20gXCIuL25ibl90ZWNoX21hcC5jbGFzc1wiO1xyXG5pbXBvcnQgQ29udHJvRGlzcGxheU1vZGUgZnJvbSBcIi4vY29udHJvbHMvY29udHJvbF9kaXNwbGF5X21vZGUuY2xhc3NcIjtcclxuaW1wb3J0IHsgTWVtb3J5RGF0YXN0b3JlIH0gZnJvbSBcIi4vZGF0YXN0b3JlL2RhdGFzdG9yZS5tZW1vcnkuY2xhc3NcIjtcclxuaW1wb3J0IEFsbE1vZGUgZnJvbSBcIi4vbW9kZXMvbW9kZS5hbGxcIjtcclxuaW1wb3J0IENvbnRyb2xMZWdlbmQgZnJvbSBcIi4vY29udHJvbHMvY29udHJvbF9sZWdlbmQuY2xhc3NcIjtcclxuXHJcbmltcG9ydCAnLi9hc3NldHMvU2NyZWVuc2hvdDEucG5nJztcclxuaW1wb3J0ICcuL2Fzc2V0cy9TY3JlZW5zaG90Mi5wbmcnO1xyXG5pbXBvcnQgJy4vYXNzZXRzL1NjcmVlbnNob3QzLnBuZyc7XHJcblxyXG5pbXBvcnQgeyBMb2dnZXIgfSBmcm9tIFwiLi91dGlsc1wiO1xyXG5pbXBvcnQgeyBOYm5QbGFjZSB9IGZyb20gXCIuL3R5cGVzXCI7XHJcbmltcG9ydCB7IEluZGV4REJQbGFjZVN0b3JlIH0gZnJvbSBcIi4vcGxhY2VzdG9yZS9pbmRleGRiLnBsYWNlc3RvcmVcIjtcclxuaW1wb3J0IFRlY2hVcGdyYWRlTW9kZSBmcm9tIFwiLi9tb2Rlcy90ZWNodXBncmFkZS5tb2RlXCI7XHJcbmltcG9ydCBFRU1vZGUgZnJvbSBcIi4vbW9kZXMvZWUubW9kZVwiO1xyXG5jb25zdCBsb2dnZXIgPSBuZXcgTG9nZ2VyKCdpbmRleC50cycpO1xyXG5cclxuY29uc3QgaXNEZXZlbG9wbWVudCA9ICgoKSA9PiB7XHJcbiAgICB0cnkge1xyXG4gICAgICAgIHJldHVybiBwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ2RldmVsb3BtZW50JyB8fCBwcm9jZXNzLmFyZ3YuaW5jbHVkZXMoJ2RldmVsb3BtZW50Jyk7XHJcbiAgICB9IGNhdGNoIChlKSB7XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG59KSgpO1xyXG5sb2dnZXIuZGVidWcoJ2lzRGV2ZWxvcG1lbnQnLCBpc0RldmVsb3BtZW50KTtcclxuXHJcbmlmICgnc2VydmljZVdvcmtlcicgaW4gbmF2aWdhdG9yICYmICFpc0RldmVsb3BtZW50KSB7XHJcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignbG9hZCcsICgpID0+IHtcclxuICAgICAgICBuYXZpZ2F0b3Iuc2VydmljZVdvcmtlci5yZWdpc3RlcignLi9zZXJ2aWNlLXdvcmtlci5qcycpLnRoZW4ocmVnaXN0cmF0aW9uID0+IHtcclxuICAgICAgICAgICAgbG9nZ2VyLmluZm8oJ1NXIHJlZ2lzdGVyZWQ6ICcsIHJlZ2lzdHJhdGlvbik7XHJcbiAgICAgICAgfSkuY2F0Y2gocmVnaXN0cmF0aW9uRXJyb3IgPT4ge1xyXG4gICAgICAgICAgICBsb2dnZXIud2FybignU1cgcmVnaXN0cmF0aW9uIGZhaWxlZDogJywgcmVnaXN0cmF0aW9uRXJyb3IpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfSk7XHJcbn1cclxuXHJcblxyXG4vKipcclxuICogQGZ1bmN0aW9uIHJlYWR5XHJcbiAqIEBkZXNjcmlwdGlvbiBFeGVjdXRlcyBhIGZ1bmN0aW9uIHdoZW4gdGhlIERPTSBpcyByZWFkeS5cclxuICogQHBhcmFtIHtmdW5jdGlvbn0gZm4gLSBGdW5jdGlvbiB0byBleGVjdXRlLlxyXG4gKiBAcmV0dXJucyB7dm9pZH1cclxuICogQHNlZSB7QGxpbmsgaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9hLzk4OTk3MDEvMTI5MzI1Nn1cclxuICovXHJcbmZ1bmN0aW9uIHJlYWR5KGZuOiAoKSA9PiB2b2lkKSB7XHJcbiAgICAvLyBzZWUgaWYgRE9NIGlzIGFscmVhZHkgYXZhaWxhYmxlXHJcbiAgICBpZiAoZG9jdW1lbnQucmVhZHlTdGF0ZSA9PT0gXCJjb21wbGV0ZVwiIHx8IGRvY3VtZW50LnJlYWR5U3RhdGUgPT09IFwiaW50ZXJhY3RpdmVcIikge1xyXG4gICAgICAgIC8vIGNhbGwgb24gbmV4dCBhdmFpbGFibGUgdGlja1xyXG4gICAgICAgIHNldFRpbWVvdXQoZm4sIDEpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwiRE9NQ29udGVudExvYWRlZFwiLCBmbik7XHJcbiAgICB9XHJcbn1cclxuXHJcbi8vIEV4ZWN1dGUgd2hlbiBET00gaXMgcmVhZHkuXHJcbnJlYWR5KGZ1bmN0aW9uKCkge1xyXG5cclxuICAgIGNvbnN0IG1hcEFwaSA9IG5ldyBMaXBBcGkoKTtcclxuICAgIC8vY29uc3QgZGF0YXN0b3JlID0gbmV3IEluZGV4REJEYXRhc3RvcmUoKTtcclxuICAgIC8vIGNvbnN0IGRhdGFzdG9yZSA9IG5ldyBNZW1vcnlEYXRhc3RvcmUoKTtcclxuICAgIC8vY29uc3QgbWFya2VyTGF5ZXIgPSBuZXcgTWFya2VyTGF5ZXJDbHVzdGVyKCk7XHJcblxyXG4gICAgY29uc3QgbW9kZUFsbCA9IG5ldyBBbGxNb2RlKCk7XHJcbiAgICBjb25zdCBtb2RlVGVjaFVwZ3JhZGUgPSBuZXcgVGVjaFVwZ3JhZGVNb2RlKCk7XHJcbiAgICBjb25zdCBtb2RlRUUgPSBuZXcgRUVNb2RlKCk7XHJcblxyXG4gICAgY29uc3QgZ2V0RGVmYXVsdE1vZGVTdHJpbmcgPSAoKSA9PiB7XHJcbiAgICAgICAgY29uc3QgdXJsUGFyYW1zID0gbmV3IFVSTFNlYXJjaFBhcmFtcyh3aW5kb3cubG9jYXRpb24uc2VhcmNoKTtcclxuICAgICAgICBjb25zdCBtb2RlRnJvbVVybCA9IHVybFBhcmFtcy5nZXQoJ21vZGUnKTtcclxuXHJcbiAgICAgICAgaWYgKG1vZGVGcm9tVXJsKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBtb2RlRnJvbVVybDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IG1vZGVGcm9tU3RvcmFnZSA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKCdtb2RlJyk7XHJcbiAgICAgICAgaWYgKG1vZGVGcm9tU3RvcmFnZSkge1xyXG4gICAgICAgICAgICByZXR1cm4gbW9kZUZyb21TdG9yYWdlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuICdhbGwnO1xyXG4gICAgfTtcclxuICAgIGNvbnN0IGdldE1vZGUgPSAobW9kZT86IHN0cmluZykgPT4ge1xyXG5cclxuICAgICAgICBpZiAoIW1vZGUpIHtcclxuICAgICAgICAgICAgbW9kZSA9IGdldERlZmF1bHRNb2RlU3RyaW5nKCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBzd2l0Y2ggKG1vZGUpIHtcclxuICAgICAgICAgICAgY2FzZSAnYWxsJzpcclxuICAgICAgICAgICAgICAgIHJldHVybiBtb2RlQWxsO1xyXG4gICAgICAgICAgICBjYXNlICd1cGdyYWRlJzpcclxuICAgICAgICAgICAgICAgIHJldHVybiBtb2RlVGVjaFVwZ3JhZGU7XHJcbiAgICAgICAgICAgIGNhc2UgJ2VlJzpcclxuICAgICAgICAgICAgICAgIHJldHVybiBtb2RlRUU7XHJcbiAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbW9kZUFsbDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgZGVmYXVsdE1vZGUgPSBnZXRNb2RlKCk7XHJcblxyXG4gICAgY29uc3QgcGxhY2VTdG9yZSA9IG5ldyBJbmRleERCUGxhY2VTdG9yZSgpO1xyXG5cclxuICAgIGNvbnN0IG5iblRlY2hNYXAgPSBuZXcgTmJuVGVjaE1hcCh7XHJcbiAgICAgICAgbWFwQ29udGFpbmVySWQ6ICdtYXAnLFxyXG4gICAgICAgIGFwaTogbWFwQXBpLFxyXG4gICAgICAgIC8vZGF0YXN0b3JlOiBkYXRhc3RvcmUsXHJcbiAgICAgICAgLy9tYXJrZXJMYXllcjogbWFya2VyTGF5ZXIsXHJcbiAgICAgICAgZGVmYXVsdE1vZGVIYW5kbGVyOiBkZWZhdWx0TW9kZSxcclxuICAgICAgICBwbGFjZXN0b3JlOiBwbGFjZVN0b3JlLFxyXG4gICAgfSk7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBBZGQgQ29udHJvbHMgdG8gTWFwXHJcbiAgICAgKi9cclxuXHJcbiAgICAvLyBEaXNwbGF5IE1vZGUgQ29udHJvbFxyXG4gICAgY29uc3QgY0Rpc3BsYXlNb2RlID0gbmV3IENvbnRyb0Rpc3BsYXlNb2RlKCk7XHJcbiAgICBuYm5UZWNoTWFwLmFkZENvbnRyb2woJ2Rpc3BsYXltb2RlJywgY0Rpc3BsYXlNb2RlKTtcclxuXHJcbiAgICAvLyBMZWdlbmQgQ29udHJvbFxyXG4gICAgY29uc3QgY0xlZ2VuZCA9IG5ldyBDb250cm9sTGVnZW5kKCk7XHJcbiAgICBjTGVnZW5kLnVwZGF0ZUxlZ2VuZChkZWZhdWx0TW9kZS5nZXRMZWdlbmRJdGVtcygpKTtcclxuICAgIG5iblRlY2hNYXAuYWRkQ29udHJvbCgnbGVnZW5kJywgY0xlZ2VuZCk7XHJcblxyXG4gICAgLy8gU2VhcmNoIENvbnRyb2xcclxuXHJcbiAgICAvLyBQcm9ncmVzcyBDb250cm9sXHJcblxyXG4gICAgLy8gQWRkIGV2ZW50IExpc3RlbmVyc1xyXG4gICAgY0Rpc3BsYXlNb2RlLm9uKCdjaGFuZ2UnLCAoZSkgPT4ge1xyXG4gICAgICAgIGNvbnN0IG1vZGUgPSBnZXRNb2RlKGUuc3RhdGUpO1xyXG4gICAgICAgIGlmICghbW9kZSkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIFxyXG4gICAgICAgIG5iblRlY2hNYXAuc2V0TW9kZUhhbmRsZXIobW9kZSk7XHJcbiAgICAgICAgY0xlZ2VuZC51cGRhdGVMZWdlbmQobW9kZS5nZXRMZWdlbmRJdGVtcygpKTtcclxuXHJcbiAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ21vZGUnLCBlLnN0YXRlKTtcclxuXHJcbiAgICAgICAgLy8gQWRkIG1vZGUgcGFyYW0gdG8gZXhpc3RpbmcgdXJsXHJcbiAgICAgICAgY29uc3QgdXJsID0gbmV3IFVSTCh3aW5kb3cubG9jYXRpb24uaHJlZik7XHJcbiAgICAgICAgdXJsLnNlYXJjaFBhcmFtcy5zZXQoJ21vZGUnLCBlLnN0YXRlKTtcclxuICAgICAgICB3aW5kb3cuaGlzdG9yeS5wdXNoU3RhdGUoe30sICcnLCB1cmwudG9TdHJpbmcoKSk7XHJcbiAgICAgICAgXHJcbiAgICB9KTtcclxuXHJcbn0pIiwiLy8gVGhlIG1vZHVsZSBjYWNoZVxudmFyIF9fd2VicGFja19tb2R1bGVfY2FjaGVfXyA9IHt9O1xuXG4vLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcblx0dmFyIGNhY2hlZE1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF07XG5cdGlmIChjYWNoZWRNb2R1bGUgIT09IHVuZGVmaW5lZCkge1xuXHRcdHJldHVybiBjYWNoZWRNb2R1bGUuZXhwb3J0cztcblx0fVxuXHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuXHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSA9IHtcblx0XHRpZDogbW9kdWxlSWQsXG5cdFx0Ly8gbm8gbW9kdWxlLmxvYWRlZCBuZWVkZWRcblx0XHRleHBvcnRzOiB7fVxuXHR9O1xuXG5cdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuXHRfX3dlYnBhY2tfbW9kdWxlc19fW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuXHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuXHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59XG5cbi8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG5fX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBfX3dlYnBhY2tfbW9kdWxlc19fO1xuXG4iLCIvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuX193ZWJwYWNrX3JlcXVpcmVfXy5uID0gKG1vZHVsZSkgPT4ge1xuXHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cblx0XHQoKSA9PiAobW9kdWxlWydkZWZhdWx0J10pIDpcblx0XHQoKSA9PiAobW9kdWxlKTtcblx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgeyBhOiBnZXR0ZXIgfSk7XG5cdHJldHVybiBnZXR0ZXI7XG59OyIsIi8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb25zIGZvciBoYXJtb255IGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uZCA9IChleHBvcnRzLCBkZWZpbml0aW9uKSA9PiB7XG5cdGZvcih2YXIga2V5IGluIGRlZmluaXRpb24pIHtcblx0XHRpZihfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZGVmaW5pdGlvbiwga2V5KSAmJiAhX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIGtleSkpIHtcblx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBkZWZpbml0aW9uW2tleV0gfSk7XG5cdFx0fVxuXHR9XG59OyIsIl9fd2VicGFja19yZXF1aXJlX18uZyA9IChmdW5jdGlvbigpIHtcblx0aWYgKHR5cGVvZiBnbG9iYWxUaGlzID09PSAnb2JqZWN0JykgcmV0dXJuIGdsb2JhbFRoaXM7XG5cdHRyeSB7XG5cdFx0cmV0dXJuIHRoaXMgfHwgbmV3IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG5cdH0gY2F0Y2ggKGUpIHtcblx0XHRpZiAodHlwZW9mIHdpbmRvdyA9PT0gJ29iamVjdCcpIHJldHVybiB3aW5kb3c7XG5cdH1cbn0pKCk7IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5vID0gKG9iaiwgcHJvcCkgPT4gKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApKSIsInZhciBzY3JpcHRVcmw7XG5pZiAoX193ZWJwYWNrX3JlcXVpcmVfXy5nLmltcG9ydFNjcmlwdHMpIHNjcmlwdFVybCA9IF9fd2VicGFja19yZXF1aXJlX18uZy5sb2NhdGlvbiArIFwiXCI7XG52YXIgZG9jdW1lbnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLmcuZG9jdW1lbnQ7XG5pZiAoIXNjcmlwdFVybCAmJiBkb2N1bWVudCkge1xuXHRpZiAoZG9jdW1lbnQuY3VycmVudFNjcmlwdClcblx0XHRzY3JpcHRVcmwgPSBkb2N1bWVudC5jdXJyZW50U2NyaXB0LnNyYztcblx0aWYgKCFzY3JpcHRVcmwpIHtcblx0XHR2YXIgc2NyaXB0cyA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKFwic2NyaXB0XCIpO1xuXHRcdGlmKHNjcmlwdHMubGVuZ3RoKSB7XG5cdFx0XHR2YXIgaSA9IHNjcmlwdHMubGVuZ3RoIC0gMTtcblx0XHRcdHdoaWxlIChpID4gLTEgJiYgIXNjcmlwdFVybCkgc2NyaXB0VXJsID0gc2NyaXB0c1tpLS1dLnNyYztcblx0XHR9XG5cdH1cbn1cbi8vIFdoZW4gc3VwcG9ydGluZyBicm93c2VycyB3aGVyZSBhbiBhdXRvbWF0aWMgcHVibGljUGF0aCBpcyBub3Qgc3VwcG9ydGVkIHlvdSBtdXN0IHNwZWNpZnkgYW4gb3V0cHV0LnB1YmxpY1BhdGggbWFudWFsbHkgdmlhIGNvbmZpZ3VyYXRpb25cbi8vIG9yIHBhc3MgYW4gZW1wdHkgc3RyaW5nIChcIlwiKSBhbmQgc2V0IHRoZSBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyB2YXJpYWJsZSBmcm9tIHlvdXIgY29kZSB0byB1c2UgeW91ciBvd24gbG9naWMuXG5pZiAoIXNjcmlwdFVybCkgdGhyb3cgbmV3IEVycm9yKFwiQXV0b21hdGljIHB1YmxpY1BhdGggaXMgbm90IHN1cHBvcnRlZCBpbiB0aGlzIGJyb3dzZXJcIik7XG5zY3JpcHRVcmwgPSBzY3JpcHRVcmwucmVwbGFjZSgvIy4qJC8sIFwiXCIpLnJlcGxhY2UoL1xcPy4qJC8sIFwiXCIpLnJlcGxhY2UoL1xcL1teXFwvXSskLywgXCIvXCIpO1xuX193ZWJwYWNrX3JlcXVpcmVfXy5wID0gc2NyaXB0VXJsOyIsIl9fd2VicGFja19yZXF1aXJlX18uYiA9IGRvY3VtZW50LmJhc2VVUkkgfHwgc2VsZi5sb2NhdGlvbi5ocmVmO1xuXG4vLyBvYmplY3QgdG8gc3RvcmUgbG9hZGVkIGFuZCBsb2FkaW5nIGNodW5rc1xuLy8gdW5kZWZpbmVkID0gY2h1bmsgbm90IGxvYWRlZCwgbnVsbCA9IGNodW5rIHByZWxvYWRlZC9wcmVmZXRjaGVkXG4vLyBbcmVzb2x2ZSwgcmVqZWN0LCBQcm9taXNlXSA9IGNodW5rIGxvYWRpbmcsIDAgPSBjaHVuayBsb2FkZWRcbnZhciBpbnN0YWxsZWRDaHVua3MgPSB7XG5cdDE0MzogMFxufTtcblxuLy8gbm8gY2h1bmsgb24gZGVtYW5kIGxvYWRpbmdcblxuLy8gbm8gcHJlZmV0Y2hpbmdcblxuLy8gbm8gcHJlbG9hZGVkXG5cbi8vIG5vIEhNUlxuXG4vLyBubyBITVIgbWFuaWZlc3RcblxuX193ZWJwYWNrX3JlcXVpcmVfXy5PLmogPSAoY2h1bmtJZCkgPT4gKGluc3RhbGxlZENodW5rc1tjaHVua0lkXSA9PT0gMCk7XG5cbi8vIGluc3RhbGwgYSBKU09OUCBjYWxsYmFjayBmb3IgY2h1bmsgbG9hZGluZ1xudmFyIHdlYnBhY2tKc29ucENhbGxiYWNrID0gKHBhcmVudENodW5rTG9hZGluZ0Z1bmN0aW9uLCBkYXRhKSA9PiB7XG5cdHZhciBbY2h1bmtJZHMsIG1vcmVNb2R1bGVzLCBydW50aW1lXSA9IGRhdGE7XG5cdC8vIGFkZCBcIm1vcmVNb2R1bGVzXCIgdG8gdGhlIG1vZHVsZXMgb2JqZWN0LFxuXHQvLyB0aGVuIGZsYWcgYWxsIFwiY2h1bmtJZHNcIiBhcyBsb2FkZWQgYW5kIGZpcmUgY2FsbGJhY2tcblx0dmFyIG1vZHVsZUlkLCBjaHVua0lkLCBpID0gMDtcblx0aWYoY2h1bmtJZHMuc29tZSgoaWQpID0+IChpbnN0YWxsZWRDaHVua3NbaWRdICE9PSAwKSkpIHtcblx0XHRmb3IobW9kdWxlSWQgaW4gbW9yZU1vZHVsZXMpIHtcblx0XHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhtb3JlTW9kdWxlcywgbW9kdWxlSWQpKSB7XG5cdFx0XHRcdF9fd2VicGFja19yZXF1aXJlX18ubVttb2R1bGVJZF0gPSBtb3JlTW9kdWxlc1ttb2R1bGVJZF07XG5cdFx0XHR9XG5cdFx0fVxuXHRcdGlmKHJ1bnRpbWUpIHZhciByZXN1bHQgPSBydW50aW1lKF9fd2VicGFja19yZXF1aXJlX18pO1xuXHR9XG5cdGlmKHBhcmVudENodW5rTG9hZGluZ0Z1bmN0aW9uKSBwYXJlbnRDaHVua0xvYWRpbmdGdW5jdGlvbihkYXRhKTtcblx0Zm9yKDtpIDwgY2h1bmtJZHMubGVuZ3RoOyBpKyspIHtcblx0XHRjaHVua0lkID0gY2h1bmtJZHNbaV07XG5cdFx0aWYoX193ZWJwYWNrX3JlcXVpcmVfXy5vKGluc3RhbGxlZENodW5rcywgY2h1bmtJZCkgJiYgaW5zdGFsbGVkQ2h1bmtzW2NodW5rSWRdKSB7XG5cdFx0XHRpbnN0YWxsZWRDaHVua3NbY2h1bmtJZF1bMF0oKTtcblx0XHR9XG5cdFx0aW5zdGFsbGVkQ2h1bmtzW2NodW5rSWRdID0gMDtcblx0fVxuXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXy5PKHJlc3VsdCk7XG59XG5cbnZhciBjaHVua0xvYWRpbmdHbG9iYWwgPSBzZWxmW1wid2VicGFja0NodW5rXCJdID0gc2VsZltcIndlYnBhY2tDaHVua1wiXSB8fCBbXTtcbmNodW5rTG9hZGluZ0dsb2JhbC5mb3JFYWNoKHdlYnBhY2tKc29ucENhbGxiYWNrLmJpbmQobnVsbCwgMCkpO1xuY2h1bmtMb2FkaW5nR2xvYmFsLnB1c2ggPSB3ZWJwYWNrSnNvbnBDYWxsYmFjay5iaW5kKG51bGwsIGNodW5rTG9hZGluZ0dsb2JhbC5wdXNoLmJpbmQoY2h1bmtMb2FkaW5nR2xvYmFsKSk7IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5uYyA9IHVuZGVmaW5lZDsiLCIvLyBzdGFydHVwXG4vLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbi8vIFRoaXMgZW50cnkgbW9kdWxlIGRlcGVuZHMgb24gb3RoZXIgbG9hZGVkIGNodW5rcyBhbmQgZXhlY3V0aW9uIG5lZWQgdG8gYmUgZGVsYXllZFxudmFyIF9fd2VicGFja19leHBvcnRzX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fLk8odW5kZWZpbmVkLCBbNTc4XSwgKCkgPT4gKF9fd2VicGFja19yZXF1aXJlX18oNjA5KSkpXG5fX3dlYnBhY2tfZXhwb3J0c19fID0gX193ZWJwYWNrX3JlcXVpcmVfXy5PKF9fd2VicGFja19leHBvcnRzX18pO1xuIl0sIm5hbWVzIjpbImRlZmVycmVkIiwiZmV0Y2hQYWdlIiwiYm91bmRzIiwicGFnZSIsInByb2NlZWQiLCJub3J0aCIsImdldE5vcnRoIiwidG9GaXhlZCIsIndlc3QiLCJnZXRXZXN0IiwiRXJyb3IiLCJ1cmxQYXJhbXMiLCJVUkxTZWFyY2hQYXJhbXMiLCJ3aW5kb3ciLCJsb2NhdGlvbiIsInNlYXJjaCIsImFwaVNlcnZlciIsImdldCIsIk1hdGgiLCJtYXgiLCJOdW1iZXIiLCJwYWdlVXJsIiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJmZXRjaCIsIm1ldGhvZCIsInJlZGlyZWN0IiwidGhlbiIsInJlc3BvbnNlIiwidGV4dCIsInJlc3VsdCIsInBhcnNlZFJlc3VsdCIsIkpTT04iLCJwYXJzZSIsImRhdGEiLCJjYXRjaCIsIm5hbWUiLCJzdWIiLCJMb2dnZXIiLCJ0aGlzIiwiZXJyb3IiLCJjb25zb2xlIiwiYXJncyIsIndhcm4iLCJkZWJ1ZyIsImlzRGVidWdNb2RlIiwiaW5mbyIsImxvZyIsImhyZWYiLCJpbmNsdWRlcyIsIm1hcCIsIm1vZGVIYW5kbGVyIiwicGxhY2VTdG9yZSIsImxvZ2dlciIsInBvaW50TWFwIiwiTWFwIiwibWFya2VycyIsIm1heENsdXN0ZXJSYWRpdXMiLCJtYXJrZXJDbHVzdGVyUmFkaXVzIiwic3BpZGVyZnlPbk1heFpvb20iLCJkaXNhYmxlQ2x1c3RlcmluZ0F0Wm9vbSIsInNob3dDb3ZlcmFnZU9uSG92ZXIiLCJ6b29tVG9Cb3VuZHNPbkNsaWNrIiwicmVtb3ZlT3V0c2lkZVZpc2libGVCb3VuZHMiLCJpY29uQ3JlYXRlRnVuY3Rpb24iLCJjaHVua2VkTG9hZGluZyIsImNodW5rSW50ZXJ2YWwiLCJjaHVua0RlbGF5IiwiY2h1bmtQcm9ncmVzcyIsInByb2Nlc3NlZCIsInRvdGFsIiwiZWxhcHNlZCIsImFkZFRvIiwib24iLCJldmVudCIsInRhcmdldCIsImdldFpvb20iLCJhZGRQb2ludHMiLCJwb2ludHMiLCJuZXdMYXllcnMiLCJmb3JFYWNoIiwicG9pbnQiLCJsYXRMbmdTdHJpbmciLCJsYXQiLCJsbmciLCJuZXdMYXllciIsInJlbmRlclBvaW50IiwicHVzaCIsInNldCIsImxheWVyIiwibGVuZ3RoIiwiYWRkTGF5ZXJzIiwicmVtb3ZlQWxsUG9pbnRzIiwiY2xlYXJMYXllcnMiLCJjbGVhciIsInJlbW92ZUFsbE1hcmtlcnMiLCJ6b29tIiwidXBkYXRlUG9pbnRTdHlsZSIsInBsYWNlcyIsInNldFN0eWxlIiwiZmlsbENvbG9yIiwicGxhY2VDb2xvdXIiLCJzZXRUb29sdGlwQ29udGVudCIsInJlbmRlclRvb2x0aXAiLCJyZWRyYXciLCJzZXRNb2RlSGFuZGxlciIsInBsYWNlc3RvcmUiLCJERVBfcmVmcmVzaE1hcmtlcnNJbnNpZGVCb3VuZHMiLCJtRmlsdGVyIiwicmVtb3ZlTWFya2Vyc091dHNpZGVCb3VuZHMiLCJjaXJjbGVNYXJrZXJMYXllciIsInJhZGl1cyIsImNvbCIsInVuZGVmaW5lZCIsImNvbG9yIiwid2VpZ2h0Iiwib3BhY2l0eSIsImZpbGxPcGFjaXR5IiwiYmluZFBvcHVwIiwiZ2V0UGxhY2VzIiwiaWRzIiwicG9wdXAiLCJyZW5kZXJQb3B1cCIsInNldFBvcHVwQ29udGVudCIsImxvYWRpbmdQb3B1cCIsImRvY3VtZW50IiwiY3JlYXRlRWxlbWVudCIsImlubmVySFRNTCIsImF1dG9QYW4iLCJhdXRvQ2xvc2UiLCJiaW5kVG9vbHRpcCIsImxhYmVsIiwiYWRkIiwicmVuZGVyUG9wdXBDb250ZW50IiwicmVuZG9yUG9wdXBNdWx0aSIsImdyb3VwRGl2IiwicGxhY2VDb250YWluZXJzIiwic29ydCIsImEiLCJiIiwiYWRkcmVzczEiLCJwbGFjZSIsInBsYWNlQ29udGFpbmVyIiwiYnV0dG9uIiwiY2xhc3NMaXN0IiwidHlwZSIsInBhbmVsIiwiYXBwZW5kQ2hpbGQiLCJhZGRFdmVudExpc3RlbmVyIiwiY3VycmVudGx5QWN0aXZlIiwiY29udGFpbnMiLCJyZW1vdmUiLCJjbHVzdGVyIiwiY29sb3JBcnJheSIsImdldEFsbENoaWxkTWFya2VycyIsIm1hcmtlciIsIm9wdGlvbnMiLCJjb2xvckNvdW50cyIsImNvbG9yQXJyYXlTb3J0ZWQiLCJPYmplY3QiLCJrZXlzIiwiYmFja2dyb3VuZCIsImxhc3RDb2xvdXJQZXJjZW50IiwiaW5kZXgiLCJ0aGlzQ29sb3VyUGVyY2VudCIsInJhbmRvbUlkIiwicmFuZG9tIiwidG9TdHJpbmciLCJzdWJzdHJpbmciLCJodG1sIiwiZ2V0Q2hpbGRDb3VudCIsImNsYXNzTmFtZSIsIk1BWF9VTkZFVENIRURfQk9YRVMiLCJpbml0aWFsVmlld1NldCIsImRlYnVnQm94ZXMiLCJmZXRjaGVkQm94ZXMiLCJTZXQiLCJwcm9ncmVzc0NvbnRyb2wiLCJwb3NpdGlvbiIsInByb2dyZXNzSXRlbXMiLCJjb250cm9scyIsIk5iblRlY2hNYXAiLCJERUZBVUxUX09QVElPTlMiLCJhcGkiLCJkZWZhdWx0TW9kZUhhbmRsZXIiLCJtYXBDb250YWluZXJJZCIsInByZWZlckNhbnZhcyIsIm1hcmtlckxheWVyIiwibWFwVGlsZUxheWVyIiwiYXR0cmlidXRpb24iLCJzdWJkb21haW5zIiwiY3Jvc3NPcmlnaW4iLCJtaW5ab29tIiwibWF4Wm9vbSIsIkwiLCJHZW9jb2RlciIsImdlb2NvZGVyIiwibWFwR2VvY29kZXIiLCJBcmNHaXMiLCJhcGlLZXkiLCJnZW9jb2RpbmdRdWVyeVBhcmFtcyIsImNvdW50cnlDb2RlIiwiY2F0ZWdvcnkiLCJtYXBTZWFyY2giLCJjb2xsYXBzZWQiLCJkZWZhdWx0TWFya0dlb2NvZGUiLCJzdWdnZXN0TWluTGVuZ3RoIiwic3VnZ2VzdFRpbWVvdXQiLCJiYm94IiwiZ2VvY29kZSIsImZpdEJvdW5kcyIsIm1hcExvY2F0ZSIsImxvY2F0ZSIsImxvY2F0ZU9wdGlvbnMiLCJzZXRWaWV3Iiwia2VlcEN1cnJlbnRab29tTGV2ZWwiLCJpbml0aWFsWm9vbUxldmVsIiwiY2FjaGVMb2NhdGlvbiIsImxvY2FsU3RvcmFnZSIsInNldEl0ZW0iLCJyZW1vdmVJdGVtIiwic2V0SW5pdGlhbE1hcFZpZXciLCJjZW50ZXIiLCJnZXRDZW50ZXIiLCJzdHJpbmdpZnkiLCJwdXNoQnJvd3Nlckhpc3RvcnkiLCJmZXRjaERhdGFGb3JDdXJyZW50VmlldyIsInBhcnNlSW50IiwibmV3VXJsIiwicGF0aG5hbWUiLCJoaXN0b3J5IiwicHVzaFN0YXRlIiwiZ2V0U3RhcnRQb3MiLCJzdGFydFBvc1N0cmluZyIsImdldEl0ZW0iLCJnZW9GbGFnIiwic3RhcnRQb3MiLCJzdGFydCIsInNldFpvb20iLCJnZXRCb3hlc0luQm91bmRzIiwibm9ydGhtb3N0IiwiY2VpbCIsIndlc3RtbW9zdCIsImZsb29yIiwiYm94ZXMiLCJsYXRpdHVkZSIsImdldFNvdXRoIiwibG9uZ2l0dWRlIiwiZ2V0RWFzdCIsImJveEJvdW5kcyIsImJveCIsInNvdXRoIiwiZWFzdCIsInJlbW92ZUxheWVyIiwiZ2V0Q3VycmVudFZpZXdCb3hlcyIsImdldEJvdW5kcyIsImhpZGVNYXJrZXJzT3V0c2lkZUN1cnJlbnRWaWV3IiwibWFwQm91bmRzIiwicGFkIiwiREVQX2Rpc3BsYXlNYXJrZXJzSW5DdXJyZW50VmlldyIsImF0dGVtcHQiLCJzaG93Wm9vbUluV2FybmluZyIsInpvb21Jbldhcm5pbmdDb250cm9sIiwib25BZGQiLCJkaXYiLCJjcmVhdGUiLCJzdHlsZSIsImJhY2tncm91bmRDb2xvciIsInBhZGRpbmciLCJzZXRUaW1lb3V0IiwiYWRkQ29udHJvbCIsImhpZGVab29tSW5XYXJuaW5nIiwicmVtb3ZlQ29udHJvbCIsInVuZmV0Y2hlZEJveGVzIiwiZmlsdGVyIiwiaGFzIiwidXBkYXRlS2V5IiwicHJvZ3Jlc3NJdGVtIiwiY3JlYXRlUHJvZ3Jlc3MiLCJyZW5kZXJQcm9ncmVzcyIsImJveGVzUHJvY2Vzc2VkIiwidXBkYXRlUHJvZ3Jlc3MiLCJmZXRjaERhdGEiLCJrZXkiLCJzdGFydGVkIiwiRGF0ZSIsImZpbmlzaGVkIiwiY29tcGxldGUiLCJwcm9ncmVzcyIsIm5vdyIsImkiLCJnZXRUaW1lIiwiaXRlbXMiLCJ2YWx1ZXMiLCJpdGVtIiwicHJvZ3Jlc3NUZXh0IiwiZXZlcnkiLCJoaWRlUHJvZ3Jlc3MiLCJpbnRlcnNlY3RzIiwicHJvY2Vzc0ZldGNoUmVzdWx0IiwibmV4dCIsIm1lc3NhZ2UiLCJzdG9yZVBsYWNlcyIsImxhdExuZyIsImV4aXN0aW5nUG9pbnQiLCJsb2NpZCIsIkRFUFJfcmVmcmVzaFBvaW50c0Zyb21TdG9yZSIsInJvdW5kQm91bmRzIiwiY29udHJvbCIsImdldENvbnRyb2wiLCJldmVudEhhbmRsZXJzIiwiZXZlbnROYW1lIiwiY2FsbGJhY2siLCJlbWl0IiwiaGFuZGxlcnMiLCJzdGF0ZSIsImdldFN0YXRlIiwiZGlzcGxheU1vZGUiLCJlbENvbnRyb2xEaXYiLCJlbERyb3Bkb3duIiwiYWxsTGFiZWwiLCJhbGxSYWRpbyIsImFsbFRleHQiLCJ1cGdyYWRlTGFiZWwiLCJ1cGdyYWRlUmFkaW8iLCJ1cGdyYWRlVGV4dCIsImVlTGFiZWwiLCJlZVJhZGlvIiwiZWVUZXh0IiwiZ2VuZXJhdGVDb250cm9sRGl2IiwiZ2VuZXJhdGVEcm9wZG93biIsImNoYW5nZU1vZGUiLCJtb2RlIiwiYm9yZGVyUmFkaXVzIiwiZHJvcGRvd24iLCJhbGxPcHRpb24iLCJ2YWx1ZSIsImlubmVyVGV4dCIsInVwZ3JhZGVPcHRpb24iLCJlZU9wdGlvbiIsImUiLCJnZXRUZWNoQ29sb3VyIiwidGVjaFR5cGUiLCJwb2ludENvbG91ciIsImlzUGxhY2VGVFRQIiwiYWx0UmVhc29uQ29kZSIsIm1hdGNoIiwidGVjaENoYW5nZVN0YXR1cyIsImlzUGxhY2VGVFRQQXZhaWwiLCJpc1BsYWNlRlRUUFNvb24iLCJpc1BsYWNlRlRUUEZhciIsInJlYXNvbkNvZGUiLCJpc1BsYWNlRlRUQyIsImlzRnd0b0ZUVEMiLCJpc0Z3dG9GVFROIiwiaXNTYXRUb0ZXIiwiY29udGVudCIsImFkZHJlc3MyIiwicHJvZ3JhbVR5cGUiLCJ0YXJnZXRFbGlnaWJpbGl0eVF1YXJ0ZXIiLCJlZSIsImNiZHByaWNpbmciLCJ6ZXJvQnVpbGRDb3N0IiwiaHIiLCJwcmUiLCJnZXRMZWdlbmRJdGVtcyIsImNvbG91ciIsInNldFBvc2l0aW9uIiwidXBkYXRlTGVnZW5kIiwiY291bnQiLCJEQl9OQU1FIiwidXBncmFkZSIsImRiIiwib2xkVmVyc2lvbiIsIm5ld1ZlcnNpb24iLCJ0cmFuc2FjdGlvbiIsIm9iamVjdFN0b3JlTmFtZXMiLCJjcmVhdGVPYmplY3RTdG9yZSIsImtleVBhdGgiLCJibG9ja2VkIiwiY3VycmVudFZlcnNpb24iLCJibG9ja2VkVmVyc2lvbiIsImJsb2NraW5nIiwidGVybWluYXRlZCIsImVyciIsImZpbmFsbHkiLCJpc1JlYWR5Iiwid2FpdFVudGlsUmVhZHkiLCJ0aW1lb3V0U2Vjb25kcyIsInN0YXJ0VGltZSIsImludGVydmFsIiwic2V0SW50ZXJ2YWwiLCJ0aW1lRWxhcHNlZCIsImNsZWFySW50ZXJ2YWwiLCJzdG9yZVBsYWNlIiwiZ2V0RGIiLCJwdXQiLCJ0eCIsIm9iamVjdFN0b3JlIiwiZG9uZSIsImdldFBsYWNlIiwibG9jaWRzIiwiYWxsIiwidGltZW91dCIsIkNPTF9VTktOT1dOIiwiQ09MX0VFX0NCRF9aQkMiLCJDT0xfRUVfQ0JEX0JDIiwiQ09MX0VFX1oxMjNfWkJDIiwiQ09MX0VFX1oxMjNfQkMiLCJmbiIsImlzRGV2ZWxvcG1lbnQiLCJwcm9jZXNzIiwiYXJndiIsIm5hdmlnYXRvciIsInNlcnZpY2VXb3JrZXIiLCJyZWdpc3RlciIsInJlZ2lzdHJhdGlvbiIsInJlZ2lzdHJhdGlvbkVycm9yIiwibWFwQXBpIiwibW9kZUFsbCIsIm1vZGVUZWNoVXBncmFkZSIsIm1vZGVFRSIsImdldE1vZGUiLCJkZWZhdWx0TW9kZSIsIkluZGV4REJQbGFjZVN0b3JlIiwibmJuVGVjaE1hcCIsImNEaXNwbGF5TW9kZSIsImNMZWdlbmQiLCJ1cmwiLCJVUkwiLCJzZWFyY2hQYXJhbXMiLCJyZWFkeVN0YXRlIiwiX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiY2FjaGVkTW9kdWxlIiwiZXhwb3J0cyIsIm1vZHVsZSIsImlkIiwiX193ZWJwYWNrX21vZHVsZXNfXyIsImNhbGwiLCJtIiwiTyIsImNodW5rSWRzIiwicHJpb3JpdHkiLCJub3RGdWxmaWxsZWQiLCJJbmZpbml0eSIsImZ1bGZpbGxlZCIsImoiLCJzcGxpY2UiLCJyIiwibiIsImdldHRlciIsIl9fZXNNb2R1bGUiLCJkIiwiZGVmaW5pdGlvbiIsIm8iLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnIiwiZ2xvYmFsVGhpcyIsIkZ1bmN0aW9uIiwib2JqIiwicHJvcCIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5Iiwic2NyaXB0VXJsIiwiaW1wb3J0U2NyaXB0cyIsImN1cnJlbnRTY3JpcHQiLCJzcmMiLCJzY3JpcHRzIiwiZ2V0RWxlbWVudHNCeVRhZ05hbWUiLCJyZXBsYWNlIiwicCIsImJhc2VVUkkiLCJzZWxmIiwiaW5zdGFsbGVkQ2h1bmtzIiwiY2h1bmtJZCIsIndlYnBhY2tKc29ucENhbGxiYWNrIiwicGFyZW50Q2h1bmtMb2FkaW5nRnVuY3Rpb24iLCJtb3JlTW9kdWxlcyIsInJ1bnRpbWUiLCJzb21lIiwiY2h1bmtMb2FkaW5nR2xvYmFsIiwiYmluZCIsIm5jIiwiX193ZWJwYWNrX2V4cG9ydHNfXyJdLCJzb3VyY2VSb290IjoiIn0=