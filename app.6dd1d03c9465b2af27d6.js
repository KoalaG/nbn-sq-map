(()=>{"use strict";var t,e={224:(t,e,n)=>{const r=function(){function t(){}return t.prototype.fetchPage=function(t,e,n){return void 0===e&&(e=1),void 0===n&&(n=function(){return!0}),r=this,o=void 0,i=function(){var r,o,a,i;return function(t,e){var n,r,o,a,i={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return a={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(a[Symbol.iterator]=function(){return this}),a;function s(s){return function(c){return function(s){if(n)throw new TypeError("Generator is already executing.");for(;a&&(a=0,s[0]&&(i=0)),i;)try{if(n=1,r&&(o=2&s[0]?r.return:s[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,s[1])).done)return o;switch(r=0,o&&(s=[2&s[0],o.value]),s[0]){case 0:case 1:o=s;break;case 4:return i.label++,{value:s[1],done:!1};case 5:i.label++,r=s[1],s=[0];continue;case 7:s=i.ops.pop(),i.trys.pop();continue;default:if(!((o=(o=i.trys).length>0&&o[o.length-1])||6!==s[0]&&2!==s[0])){i=0;continue}if(3===s[0]&&(!o||s[1]>o[0]&&s[1]<o[3])){i.label=s[1];break}if(6===s[0]&&i.label<o[1]){i.label=o[1],o=s;break}if(o&&i.label<o[2]){i.label=o[2],i.ops.push(s);break}o[2]&&i.ops.pop(),i.trys.pop();continue}s=e.call(t,i)}catch(t){s=[6,t],r=0}finally{n=o=0}if(5&s[0])throw s[1];return{value:s[0]?s[1]:void 0,done:!0}}([s,c])}}}(this,(function(s){switch(s.label){case 0:if(r=t.getNorth().toFixed(2),o=t.getEast().toFixed(2),a=t.getSouth().toFixed(2),i=t.getWest().toFixed(2),!n())throw new Error("Proceed function returned false. Stopping fetch.");return e=Math.max(1,Number(e)),"https://api.lip.net.au/nbn-bulk/map/".concat(r,"/").concat(o,"/").concat(a,"/").concat(i,"?page=").concat(e),[4,new Promise((function(t,n){fetch("https://api.lip.net.au/nbn-bulk/map/".concat(r,"/").concat(o,"/").concat(a,"/").concat(i,"?page=").concat(e),{method:"GET",redirect:"follow"}).then((function(t){return t.text()})).then((function(e){var n=JSON.parse(e);t(n.data)})).catch(n)}))];case 1:return[2,s.sent()]}}))},new((a=void 0)||(a=Promise))((function(t,e){function n(t){try{c(i.next(t))}catch(t){e(t)}}function s(t){try{c(i.throw(t))}catch(t){e(t)}}function c(e){var r;e.done?t(e.value):(r=e.value,r instanceof a?r:new a((function(t){t(r)}))).then(n,s)}c((i=i.apply(r,o||[])).next())}));var r,o,a,i},t}();n(623);var o=n(243),a=(n(664),n(687),n(634),n(817)),i=(n(732),n(256),function(t,e,n,r){return new(n||(n=Promise))((function(o,a){function i(t){try{c(r.next(t))}catch(t){a(t)}}function s(t){try{c(r.throw(t))}catch(t){a(t)}}function c(t){var e;t.done?o(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(i,s)}c((r=r.apply(t,e||[])).next())}))}),s=function(t,e){var n,r,o,a,i={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return a={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(a[Symbol.iterator]=function(){return this}),a;function s(s){return function(c){return function(s){if(n)throw new TypeError("Generator is already executing.");for(;a&&(a=0,s[0]&&(i=0)),i;)try{if(n=1,r&&(o=2&s[0]?r.return:s[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,s[1])).done)return o;switch(r=0,o&&(s=[2&s[0],o.value]),s[0]){case 0:case 1:o=s;break;case 4:return i.label++,{value:s[1],done:!1};case 5:i.label++,r=s[1],s=[0];continue;case 7:s=i.ops.pop(),i.trys.pop();continue;default:if(!((o=(o=i.trys).length>0&&o[o.length-1])||6!==s[0]&&2!==s[0])){i=0;continue}if(3===s[0]&&(!o||s[1]>o[0]&&s[1]<o[3])){i.label=s[1];break}if(6===s[0]&&i.label<o[1]){i.label=o[1],o=s;break}if(o&&i.label<o[2]){i.label=o[2],i.ops.push(s);break}o[2]&&i.ops.pop(),i.trys.pop();continue}s=e.call(t,i)}catch(t){s=[6,t],r=0}finally{n=o=0}if(5&s[0])throw s[1];return{value:s[0]?s[1]:void 0,done:!0}}([s,c])}}};const c=function(){function t(t,e,n){this.pointMap=new Map,this.map=t,this.placeStore=n,this.modeHandler=e,this.markers=new o.MarkerClusterGroup({maxClusterRadius:this.markerClusterRadius,spiderfyOnMaxZoom:!1,disableClusteringAtZoom:18,showCoverageOnHover:!0,zoomToBoundsOnClick:!0,removeOutsideVisibleBounds:!0,iconCreateFunction:this.iconCreateFunction,chunkedLoading:!0,chunkInterval:150,chunkDelay:150,chunkProgress:function(t,e,n){console.log("chunkProgress",{processed:t,total:e,elapsed:n})}}),this.markers.addTo(this.map),this.map.on("zoomend",(function(t){console.log("zoomend",t.target.getZoom())}))}return t.prototype.addPoints=function(t){var e=this,n=[];t.forEach((function(t){var r=t.lat+","+t.lng,o=e.pointMap.get(r);if(o)o.point=t;else{var a=e.renderPoint(t);n.push(a),e.pointMap.set(r,{layer:a,point:t})}})),n.length&&this.markers.addLayers(n)},t.prototype.markerClusterRadius=function(t){switch(t){case 0:case 1:case 2:case 3:case 4:case 5:case 6:case 7:case 8:case 9:case 10:case 11:case 12:case 13:return 150;case 14:return 100;default:return 0}},t.prototype.updatePointStyle=function(t,e){e.setStyle({fillColor:this.modeHandler.placeColour(t[0])}),e.setTooltipContent(this.modeHandler.renderTooltip(t)),e.redraw()},t.prototype.setModeHandler=function(t,e){var n=this;return this.modeHandler=t,this.pointMap.forEach((function(t){var r=t.layer,o=t.point;e.getPlaces(o.ids).then((function(t){return n.updatePointStyle(t,r)}))})),this.markers&&this.markers.getLayers().length&&this.markers.refreshClusters(),this},t.prototype.DEP_refreshMarkersInsideBounds=function(t,e){return i(this,void 0,void 0,(function(){return s(this,(function(t){return[2]}))}))},t.prototype.removeMarkersOutsideBounds=function(t){return i(this,void 0,void 0,(function(){return s(this,(function(t){return[2]}))}))},t.prototype.removeAllMarkers=function(){var t;return i(this,void 0,void 0,(function(){return s(this,(function(e){return null===(t=this.markers)||void 0===t||t.clearLayers(),[2]}))}))},t.prototype.renderPoint=function(t){var e=this,n=o.circleMarker([t.lat,t.lng],{radius:5,fillColor:t.col?t.col[0]:void 0,color:"#000000",weight:1,opacity:1,fillOpacity:.8});return n.bindPopup((function(n){e.placeStore.getPlaces(t.ids).then((function(t){var r=e.renderPopup(t);n.setPopupContent(r)}));var r=document.createElement("div");return r.innerHTML='<div class="loading">Loading...</div>',r}),{autoPan:!0,autoClose:!1}),n.bindTooltip((function(e){var n=t.add[0];return t.add.length>1&&(n+=" ( + "+(t.add.length-1)+" more)"),n}),{}),n},t.prototype.renderPopup=function(t){return 1==t.length?this.modeHandler.renderPopupContent(t[0]):this.rendorPopupMulti(t)},t.prototype.rendorPopupMulti=function(t){var e,n,r=document.createElement("div"),o=[];t.sort((function(t,e){return t.address1<e.address1?-1:t.address1>e.address1?1:0}));var a=function(t){var e=document.createElement("div"),n=i.modeHandler.placeColour(t),a=document.createElement("button");a.classList.add("accordion"),a.type="button",a.innerHTML='<svg height="15" width="15" style="margin-right:3px">'+'<circle class="circle" cx="7.5" cy="9" r="5" stroke="#000" stroke-width="1" fill="'.concat(n,'" />')+"</svg>"+"<span>".concat(t.address1,"</span>");var s=document.createElement("div");s.classList.add("panel"),s.appendChild(i.modeHandler.renderPopupContent(t)),a.addEventListener("click",(function(){var t=e.classList.contains("active");o.forEach((function(t){t.classList.remove("active")})),t||e.classList.add("active")})),e.appendChild(a),e.appendChild(s),r.appendChild(e),o.push(e)},i=this;try{for(var s=function(t){var e="function"==typeof Symbol&&Symbol.iterator,n=e&&t[e],r=0;if(n)return n.call(t);if(t&&"number"==typeof t.length)return{next:function(){return t&&r>=t.length&&(t=void 0),{value:t&&t[r++],done:!t}}};throw new TypeError(e?"Object is not iterable.":"Symbol.iterator is not defined.")}(t),c=s.next();!c.done;c=s.next())a(c.value)}catch(t){e={error:t}}finally{try{c&&!c.done&&(n=s.return)&&n.call(s)}finally{if(e)throw e.error}}return r},t.prototype.iconCreateFunction=function(t){var e=t.getAllChildMarkers().map((function(t){return t.options.fillColor})),n={};e.forEach((function(t){n[t]||(n[t]=0),n[t]++}));var r=Object.keys(n).sort((function(t,e){return n[e]-n[t]})),a="background: conic-gradient(",i=0;r.forEach((function(t,r){0==r&&(a+="\n"+t+" 0%");var o=n[t]/e.length*100;a+=", \n"+t+" "+i+"%",a+=", \n"+t+" "+(i+o)+"%",i+=o})),a+="\n);";var s=Math.random().toString(36).substring(7);return o.divIcon({html:"<style>#cluster_".concat(s,"::before { ").concat(a," }</style> <div id='cluster_").concat(s,"'><span>")+t.getChildCount()+"</span></div>",className:"marker-cluster"})},t}();var l=function(t,e){var n="function"==typeof Symbol&&t[Symbol.iterator];if(!n)return t;var r,o,a=n.call(t),i=[];try{for(;(void 0===e||e-- >0)&&!(r=a.next()).done;)i.push(r.value)}catch(t){o={error:t}}finally{try{r&&!r.done&&(n=a.return)&&n.call(a)}finally{if(o)throw o.error}}return i},u=function(t,e,n){if(n||2===arguments.length)for(var r,o=0,a=e.length;o<a;o++)!r&&o in e||(r||(r=Array.prototype.slice.call(e,0,o)),r[o]=e[o]);return t.concat(r||Array.prototype.slice.call(e))},p=function(){function t(t){this.name=t}return t.prototype.sub=function(e){return new t("".concat(this.name,".").concat(e))},t.prototype.error=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];console.error.apply(console,u(["[".concat(this.name,"]")],l(t),!1))},t.prototype.warn=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];console.warn.apply(console,u(["[".concat(this.name,"]")],l(t),!1))},t.prototype.debug=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];d()&&console.debug.apply(console,u(["[".concat(this.name,"]")],l(t),!1))},t.prototype.info=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];console.info.apply(console,u(["[".concat(this.name,"]")],l(t),!1))},t.prototype.log=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];console.log.apply(console,u(["[".concat(this.name,"]")],l(t),!1))},t}();function d(){return window.location.href.includes("localhost")||window.location.href.includes("debug=true")}var h=function(){return h=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var o in e=arguments[n])Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=e[o]);return t},h.apply(this,arguments)},f=function(t,e,n,r){return new(n||(n=Promise))((function(o,a){function i(t){try{c(r.next(t))}catch(t){a(t)}}function s(t){try{c(r.throw(t))}catch(t){a(t)}}function c(t){var e;t.done?o(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(i,s)}c((r=r.apply(t,e||[])).next())}))},g=function(t,e){var n,r,o,a,i={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return a={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(a[Symbol.iterator]=function(){return this}),a;function s(s){return function(c){return function(s){if(n)throw new TypeError("Generator is already executing.");for(;a&&(a=0,s[0]&&(i=0)),i;)try{if(n=1,r&&(o=2&s[0]?r.return:s[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,s[1])).done)return o;switch(r=0,o&&(s=[2&s[0],o.value]),s[0]){case 0:case 1:o=s;break;case 4:return i.label++,{value:s[1],done:!1};case 5:i.label++,r=s[1],s=[0];continue;case 7:s=i.ops.pop(),i.trys.pop();continue;default:if(!((o=(o=i.trys).length>0&&o[o.length-1])||6!==s[0]&&2!==s[0])){i=0;continue}if(3===s[0]&&(!o||s[1]>o[0]&&s[1]<o[3])){i.label=s[1];break}if(6===s[0]&&i.label<o[1]){i.label=o[1],o=s;break}if(o&&i.label<o[2]){i.label=o[2],i.ops.push(s);break}o[2]&&i.ops.pop(),i.trys.pop();continue}s=e.call(t,i)}catch(t){s=[6,t],r=0}finally{n=o=0}if(5&s[0])throw s[1];return{value:s[0]?s[1]:void 0,done:!0}}([s,c])}}},v=function(){function t(e){var n=this;this.logger=new p("NbnTechMap"),this.markerFilter=function(t){return!0},this.initialViewSet=!1,this.fetchedBoxes=new Set,this.progressControl=new o.Control({position:"bottomleft"}),this.progressItems={},this.controls={},e=h(h({},t.DEFAULT_OPTIONS),e),this.api=e.api,this.placeStore=e.placestore,this.modeHandler=e.defaultModeHandler,this.map=o.map(e.mapContainerId,{preferCanvas:!0}),this.markerLayer=new c(this.map,this.modeHandler,this.placeStore),this.mapTileLayer=o.tileLayer("https://{s}.basemaps.cartocdn.com/rastertiles/voyager/{z}/{x}/{y}{r}.png",{attribution:'&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors &copy; <a href="https://carto.com/attributions">CARTO</a>',subdomains:"abcd",crossOrigin:!0,minZoom:5,maxZoom:20}),this.mapTileLayer.addTo(this.map),console.log({L:o,Geocoder:a.Ms,geocoder:a.yK});var r=new a.d2.ArcGis({apiKey:"AAPKa97b8a5374db4fa9b0fdd8e55361cba4Z9fEuw3ckAOIFHK1CP_VbzTv3OTeUz3ggrFAzVPzjyn3Q7bQFzbwkDMvDxaJ-JzG",geocodingQueryParams:{countryCode:"AU",category:"Address,LatLong,Neighborhood,District,City,Metro Area"}});this.mapSearch=o.Control.geocoder({position:"topleft",collapsed:!0,defaultMarkGeocode:!1,geocoder:r,suggestMinLength:5,suggestTimeout:1e3}),this.mapSearch.on("markgeocode",(function(t){var e=t.geocode.bbox;n.map.fitBounds(e,{maxZoom:16})})),this.mapSearch.addTo(this.map),this.mapLocate=o.control.locate({position:"topleft",locateOptions:{maxZoom:16},setView:"untilPan",keepCurrentZoomLevel:!0,initialZoomLevel:17,cacheLocation:!0}),this.mapLocate.addTo(this.map),this.map.on("locateactivate",(function(){localStorage.setItem("geolocate","1")})),this.map.on("locatedeactivate",(function(){localStorage.removeItem("geolocate")})),this.setInitialMapView(),this.map.on("moveend",(function(){return f(n,void 0,void 0,(function(){var t,e;return g(this,(function(n){return t=this.map.getCenter(),e=this.map.getZoom(),localStorage.setItem("startpos",JSON.stringify({lat:t.lat,lng:t.lng,zoom:e})),this.pushBrowserHistory(),r.options.geocodingQueryParams&&(r.options.geocodingQueryParams.location="".concat(t.lng,",").concat(t.lat)),this.fetchDataForCurrentView(),[2]}))}))})),this.fetchDataForCurrentView(),window.addEventListener("popstate",(function(){var t=new URLSearchParams(window.location.search),e=t.get("lat"),r=t.get("lng"),o=t.get("zoom");e&&r&&o&&(n.map.setView([Number(e),Number(r)],parseInt(o)),n.initialViewSet=!0)}))}return t.prototype.pushBrowserHistory=function(){var t=this.map.getCenter(),e=this.map.getZoom(),n=new URLSearchParams(window.location.search);n.set("lat",t.lat.toString()),n.set("lng",t.lng.toString()),n.set("zoom",e.toString());var r=window.location.pathname+"?"+n.toString();window.history.pushState({},"",r)},t.prototype.getStartPos=function(){var t=localStorage.getItem("startpos");if(!t)return null;try{return JSON.parse(t)}catch(t){return null}},t.prototype.setInitialMapView=function(){var t=this.logger.sub("setInitialMapView");if(this.initialViewSet)t.warn("Initial map view already set");else{var e=new URLSearchParams(window.location.search),n=e.get("lat"),r=e.get("lng"),o=e.get("zoom");if(n&&r&&o)return this.map.setView([Number(n),Number(r)],parseInt(o)),void(this.initialViewSet=!0);var a=localStorage.getItem("geolocate"),i=this.getStartPos();i&&(this.map.setView([i.lat,i.lng],i.zoom),this.initialViewSet=!0),i||(this.map.setView([-26.1772288,133.4170119],10),this.initialViewSet=!0),!a&&i||(this.mapLocate.start(),this.map.setZoom(17),this.initialViewSet=!0),this.initialViewSet||t.error("Could not set initial map view")}},t.prototype.getBoxesInBounds=function(t){for(var e=Math.ceil(50*t.getNorth())/50,n=Math.floor(25*t.getWest())/25,r=[],a=e;a>t.getSouth();a-=.02)for(var i=n;i<t.getEast();i+=.04)r.push([a,i]);return r.map((function(t){var e=t[0],n=t[1],r=e-.02,a=n+.04;return o.latLngBounds([r,n],[e,a])}))},t.prototype.getCurrentViewBoxes=function(){return this.getBoxesInBounds(this.map.getBounds())},t.prototype.hideMarkersOutsideCurrentView=function(){var t=this.map.getBounds().pad(.5);this.markerLayer.removeMarkersOutsideBounds(t)},t.prototype.DEP_displayMarkersInCurrentView=function(t){return void 0===t&&(t=1),f(this,void 0,void 0,(function(){return g(this,(function(t){return[2]}))}))},t.prototype.showZoomInWarning=function(){var t=this;this.zoomInWarningControl||(this.zoomInWarningControl=new o.Control({position:"topright"}),this.zoomInWarningControl.onAdd=function(){var t=o.DomUtil.create("div","info legend");return t.innerHTML='<h4 style="margin:0">Area Too Big!</h4>',t.innerHTML+='<p style="margin:0">Location loading is paused until you zoom in.</p>',t.style.backgroundColor="#ff9800",t.style.opacity="0.8",t.style.padding="10px 20px",t.style.color="#ffffff",t});var e=this.zoomInWarningControl;setTimeout((function(){return t.map.addControl(e)}),1e3)},t.prototype.hideZoomInWarning=function(){this.zoomInWarningControl&&this.map.removeControl(this.zoomInWarningControl)},t.prototype.fetchDataForCurrentView=function(){return f(this,void 0,void 0,(function(){var t,e,n,r,o,a,i,s,c,l,u,p,d=this;return g(this,(function(h){switch(h.label){case 0:if(t=this.logger.sub("fetchDataForCurrentView"),this.hideMarkersOutsideCurrentView(),this.map.getZoom()<11)return t.warn("Zoom level too low. Skipping."),this.showZoomInWarning(),[2];if(e=this.getCurrentViewBoxes(),t.debug("Current view boxes",e),n=e.filter((function(t){return!d.fetchedBoxes.has(t.getCenter().toString())})),0==n.length)return[2];if(n.length>500)return t.warn("Too many boxes to fetch. Skipping."),this.showZoomInWarning(),[2];this.hideZoomInWarning(),r=this.map.getCenter().toString()+this.map.getZoom(),o=this.createProgress(r,n.length,"Fetching sections..."),this.renderProgress(),a=0,h.label=1;case 1:h.trys.push([1,6,7,8]),i=function(t){var e="function"==typeof Symbol&&Symbol.iterator,n=e&&t[e],r=0;if(n)return n.call(t);if(t&&"number"==typeof t.length)return{next:function(){return t&&r>=t.length&&(t=void 0),{value:t&&t[r++],done:!t}}};throw new TypeError(e?"Object is not iterable.":"Symbol.iterator is not defined.")}(n),s=i.next(),h.label=2;case 2:return s.done?[3,5]:(c=s.value,this.map.getCenter().toString()+this.map.getZoom()!=r?(t.debug("Map moved. Fetch stopped."),o.text="Map moved. Fetch stopped.",this.updateProgress(r,a,!0),[2]):[4,this.fetchData(c)]);case 3:h.sent(),this.fetchedBoxes.add(c.getCenter().toString()),a++,this.updateProgress(r,a,!1),h.label=4;case 4:return s=i.next(),[3,2];case 5:return[3,8];case 6:return l=h.sent(),u={error:l},[3,8];case 7:try{s&&!s.done&&(p=i.return)&&p.call(i)}finally{if(u)throw u.error}return[7];case 8:return this.updateProgress(r,a,!0),t.debug("All boxes fetched"),[2]}}))}))},t.prototype.createProgress=function(t,e,n){return this.progressItems[t]={started:new Date,finished:void 0,complete:!1,progress:0,total:e,text:n},this.progressItems[t]},t.prototype.updateProgress=function(t,e,n){if(!this.progressItems[t])throw new Error("Progress item with key ".concat(t," does not exist"));this.progressItems[t].finished=n?new Date:void 0,this.progressItems[t].complete=n,this.progressItems[t].progress=e,this.renderProgress()},t.prototype.renderProgress=function(){for(var t=this,e=new Date,n=Object.keys(this.progressItems),r=0;r<n.length;r++){var a=n[r];if(this.progressItems[a]){var i=this.progressItems[a].finished;i&&e.getTime()-i.getTime()>5e3&&delete this.progressItems[a]}}0!=Object.keys(this.progressItems).length?(this.progressControl.onAdd=function(){var e=o.DomUtil.create("div","info legend");e.innerHTML='<h4 style="margin:0">Loading...</h4>';for(var n=Object.values(t.progressItems),r=0;r<n.length;r++){var a=n[r];if(!(a.finished&&(new Date).getTime()-a.finished.getTime()>1e4)){var i=a.progress/a.total*100,s=a.complete?"Complete":"".concat(a.progress," of ").concat(a.total);e.innerHTML+='<p style="margin:0">'.concat(a.text," (").concat(s,")</p>"),e.innerHTML+='<progress value="'.concat(i,'" max="100"></progress>')}}return e.style.backgroundColor="#000000",e.style.opacity="0.8",e.style.padding="10px 20px",e.style.color="#ffffff",e},this.map.addControl(this.progressControl),setTimeout((function(){Object.values(t.progressItems).every((function(t){return t.complete}))&&t.hideProgress()}),5e3)):this.hideProgress()},t.prototype.hideProgress=function(){this.map.removeControl(this.progressControl)},t.prototype.fetchData=function(t,e){return void 0===e&&(e=1),f(this,void 0,void 0,(function(){var n,r,o=this;return g(this,(function(a){switch(a.label){case 0:d()&&console.log("Fetching Box",t.getCenter().toString(),e),a.label=1;case 1:return a.trys.push([1,5,,6]),[4,this.api.fetchPage(t,e,(function(){return o.map.getBounds().intersects(t)}))];case 2:return n=a.sent(),this.processFetchResult(n,t),n.next?[4,this.fetchData(t,n.next)]:[3,4];case 3:return[2,a.sent()];case 4:return[2];case 5:return"Page already loaded this session."==(r=a.sent()).message?[2]:(console.error(r),[3,6]);case 6:return[2]}}))}))},t.prototype.processFetchResult=function(t,e){var n,r;this.placeStore.storePlaces(t.places);for(var o={},a=0;a<t.places.length;a++){var i=t.places[a],s="".concat(i.latitude,",").concat(i.longitude),c=this.modeHandler.placeColour(i);o[s]||(o[s]={lat:i.latitude,lng:i.longitude,col:[],add:[],ids:[]}),o[s].ids.includes(i.locid)||(o[s].ids.push(i.locid),null===(n=o[s].add)||void 0===n||n.push(i.address1),null===(r=o[s].col)||void 0===r||r.push(c))}var l=Object.values(o);this.markerLayer.addPoints(l)},t.prototype.DEPR_refreshPointsFromStore=function(t){return f(this,void 0,void 0,(function(){return g(this,(function(e){if(!this.markerLayer)throw new Error("Marker Layer not set");return t||(console.log("Bounds not passed. Using map bounds."),t=this.map.getBounds()),t=function(t){var e=Math.ceil(50*t.getNorth())/50,n=Math.floor(25*t.getWest())/25,r=Math.floor(50*t.getSouth())/50,a=Math.ceil(25*t.getEast())/25;return o.latLngBounds([r,n],[e,a])}(t),[2]}))}))},t.prototype.addControl=function(t,e){if(this.controls[t])throw new Error("Control with key ".concat(t," already exists"));this.controls[t]=e,this.map.addControl(e.getControl()),console.log("Added control",t)},t.prototype.setMarkerFilter=function(t){if(!this.markerLayer)throw new Error("Marker Layer not set");this.markerFilter=t},t.prototype.setModeHandler=function(t){var e;this.modeHandler=t,null===(e=this.markerLayer)||void 0===e||e.setModeHandler(t,this.placeStore)},t.DEFAULT_OPTIONS={mapContainerId:"map"},t}();const m=v,y=function(){function t(){this.eventHandlers={},this.control=new o.Control}return t.prototype.on=function(t,e){this.eventHandlers[t]||(this.eventHandlers[t]=[]),this.eventHandlers[t].push(e)},t.prototype.emit=function(t,e){var n=this;console.debug("Emitting event: ".concat(t),{data:e,handlers:this.eventHandlers[t]}),this.eventHandlers[t]&&this.eventHandlers[t].forEach((function(r){return r({name:t,state:n.getState(),data:e})}))},t.prototype.getControl=function(){return this.control},t}();var b,w=(b=function(t,e){return b=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},b(t,e)},function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function n(){this.constructor=t}b(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});const C=function(t){function e(){var e=t.call(this)||this;return e.displayMode="all",e.elControlDiv=document.createElement("div"),e.elDropdown=document.createElement("select"),e.allLabel=null,e.allRadio=null,e.allText=null,e.upgradeLabel=null,e.upgradeRadio=null,e.upgradeText=null,e.eeLabel=null,e.eeRadio=null,e.eeText=null,e.generateControlDiv(),e.control.onAdd=function(t){return e.generateDropdown(),e.elControlDiv},e}return w(e,t),e.prototype.getState=function(){return this.displayMode},e.prototype.changeMode=function(t){this.displayMode=t,this.emit("change",t)},e.prototype.generateControlDiv=function(){this.elControlDiv&&console.warn("ControlDiv already exists"),this.elControlDiv.classList.add("info","legend"),this.elControlDiv.style.backgroundColor="#ffffff",this.elControlDiv.style.opacity="0.8",this.elControlDiv.style.padding="5px",this.elControlDiv.style.borderRadius="5px"},e.prototype.generateDropdown=function(){var t=this;this.elDropdown&&console.warn("Dropdown already exists");var e=this.elDropdown;e.classList.add("control-select");var n=document.createElement("option");n.value="all",n.innerText="Show All Locations",e.appendChild(n),e.addEventListener("change",(function(e){return t.changeMode(e.target.value)})),this.elDropdown=e,this.elControlDiv.appendChild(e)},e}(y);var T="#1D7044",S="#75AD6F",x="#C8E3C5",k="#FFBE00",P="#FF7E01",M="#E3071D",E="#02B9E3",L="#022BE3",D="#6B02E3",F="#888888";function O(t){switch(t){case"FTTP":return T;case"FTTC":return P;case"FTTN":case"FTTB":return M;case"HFC":return k;case"WIRELESS":return E;case"SATELLITE":return D}return F}const I=function(){function t(){}return t.prototype.filter=function(t){return!0},t.prototype.pointColour=function(t){return this.placeColour(t.places[0])},t.prototype.placeColour=function(t){return function(t){return"FTTP"===t.techType}(t)?T:function(t){return!(!t.altReasonCode||!t.altReasonCode.match(/^FTTP/)||"Eligible To Order"!==t.techChangeStatus)}(t)?S:function(t){if(t.altReasonCode&&t.altReasonCode.match(/^FTTP/))switch(t.techChangeStatus){case"In Design":case"Build Finalised":case"Planned":case"MDU Complex Eligible To Apply":case"MDU Complex Premises In Build":return!0}return!1}(t)?x:function(t){if(t.altReasonCode&&t.altReasonCode.match(/^FTTP/)&&"Committed"===t.techChangeStatus)return!0}(t)?O(t.techType):function(t){return!("FTTC"!=t.techType||!t.reasonCode||!t.reasonCode.match(/^FTTC/)||"New Tech Connected"!=t.techChangeStatus)}(t)?P:function(t){return"FTTC"==t.techType&&"FTTC_SA"==t.reasonCode&&"FW_CT"==t.altReasonCode&&"Eligible To Order"==t.techChangeStatus}(t)?"#FF7E01":function(t){return"FTTN"==t.techType&&"FTTN_SA"==t.reasonCode&&"FW_CT"==t.altReasonCode&&"Eligible To Order"==t.techChangeStatus}(t)?M:function(t){return"WIRELESS"==t.techType&&"FW_SA"==t.reasonCode&&"Eligible To Order"==t.techChangeStatus}(t)?L:(t.altReasonCode&&"NULL_NA"!=t.altReasonCode&&console.log(t),O(t.techType))},t.prototype.renderPopupContent=function(t){var e=o.DomUtil.create("div");if(e.innerHTML="<b>"+t.locid+"</b></br>"+t.address1+"</br>"+t.address2+"</br><br />",e.innerHTML+="<b>Technology Plan</b></br>","FTTP"!=t.techType&&t.altReasonCode&&"NULL_NA"!=t.altReasonCode?(t.altReasonCode&&t.altReasonCode.match(/^FTTP/),e.innerHTML+="Current: "+t.techType+"<br />",e.innerHTML+="Change: "+t.altReasonCode+"<br />",e.innerHTML+="Status: "+t.techChangeStatus+"<br />",e.innerHTML+="Program: "+t.programType+"<br />",e.innerHTML+="Target Qtr: "+t.targetEligibilityQuarter+"<br />"):(e.innerHTML+="Technology: "+t.techType+"<br />","FTTP"!=t.techType&&(e.innerHTML+="No tech upgrade planned<br />")),e.innerHTML+="<br />",t.ee&&(e.innerHTML+="<b>Enterprise Ethernet</b></br>",e.innerHTML+="Price Zone: "+(t.cbdpricing?"CBD":"Zone 1/2/3")+"<br />",e.innerHTML+="Build Cost: "+(t.zeroBuildCost?"$0":"POA")+"<br />",e.innerHTML+="<br />"),d()){var n=o.DomUtil.create("hr"),r=o.DomUtil.create("pre");r.innerHTML=JSON.stringify(t,null,2),e.appendChild(n),e.appendChild(r)}return e},t.prototype.renderTooltip=function(t){var e=t[0].address1;return t.length>1&&(e+=" ( + "+(t.length-1)+" more)"),e},t.prototype.getLegendItems=function(){return[{label:"FTTP",colour:T},{label:"FTTP Upgrade",colour:S},{label:"FTTP Upgrade Soon",colour:x},{label:"HFC",colour:k},{label:"FTTC",colour:P},{label:"FTTN/FTTB",colour:M},{label:"FW",colour:E},{label:"FW Upgrade",colour:L},{label:"Satellite",colour:D},{label:"Unknown",colour:F}]},t}();var H=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}();const B=function(t){function e(){var e=t.call(this)||this;return e.elControlDiv=document.createElement("div"),e.control.setPosition("bottomright"),e.elControlDiv.classList.add("info","legend"),e.elControlDiv.style.backgroundColor="#ffffff",e.elControlDiv.style.opacity="0.8",e.elControlDiv.style.padding="5px",e.elControlDiv.style.borderRadius="5px",e.control.onAdd=function(t){return e.elControlDiv},e}return H(e,t),e.prototype.getState=function(){},e.prototype.updateLegend=function(t){var e="";t.forEach((function(t){e+='<svg height="10" width="10"><circle cx="5" cy="5" r="5" fill="'+t.colour+'" stroke="#000000" stroke-width="1" opacity="1" fill-opacity="0.8" /></svg> '+t.label,t.count&&(e+=" ("+t.count+")"),e+="<br>"})),this.elControlDiv.innerHTML=e},e}(y);n.p,n.p,n.p;var A,R=n(269),_=function(t,e,n,r){return new(n||(n=Promise))((function(o,a){function i(t){try{c(r.next(t))}catch(t){a(t)}}function s(t){try{c(r.throw(t))}catch(t){a(t)}}function c(t){var e;t.done?o(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(i,s)}c((r=r.apply(t,e||[])).next())}))},z=function(t,e){var n,r,o,a,i={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return a={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(a[Symbol.iterator]=function(){return this}),a;function s(s){return function(c){return function(s){if(n)throw new TypeError("Generator is already executing.");for(;a&&(a=0,s[0]&&(i=0)),i;)try{if(n=1,r&&(o=2&s[0]?r.return:s[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,s[1])).done)return o;switch(r=0,o&&(s=[2&s[0],o.value]),s[0]){case 0:case 1:o=s;break;case 4:return i.label++,{value:s[1],done:!1};case 5:i.label++,r=s[1],s=[0];continue;case 7:s=i.ops.pop(),i.trys.pop();continue;default:if(!((o=(o=i.trys).length>0&&o[o.length-1])||6!==s[0]&&2!==s[0])){i=0;continue}if(3===s[0]&&(!o||s[1]>o[0]&&s[1]<o[3])){i.label=s[1];break}if(6===s[0]&&i.label<o[1]){i.label=o[1],o=s;break}if(o&&i.label<o[2]){i.label=o[2],i.ops.push(s);break}o[2]&&i.ops.pop(),i.trys.pop();continue}s=e.call(t,i)}catch(t){s=[6,t],r=0}finally{n=o=0}if(5&s[0])throw s[1];return{value:s[0]?s[1]:void 0,done:!0}}([s,c])}}},V=function(){function t(){var t=this;this.DB_NAME="nsm-placestore",this.logger=new p("IndexDBPlaceStore"),this.logger.info("Setting up database..."),(0,R.X3)(this.DB_NAME,1,{upgrade:function(t,e,n,r,o){t.objectStoreNames.contains("nbnPlaceStore")||t.createObjectStore("nbnPlaceStore",{keyPath:"locid"})},blocked:function(e,n,r){t.logger.warn("Database blocked!",{currentVersion:e,blockedVersion:n,event:r})},blocking:function(e,n,r){t.logger.warn("Database blocking!",{currentVersion:e,blockedVersion:n,event:r})},terminated:function(){t.logger.warn("Database terminated!")}}).then((function(e){t.db=e,t.logger.info("Database ready!")})).catch((function(e){t.logger.error("Failed to open database: ",e)})).finally((function(){t.logger.info("Database setup complete.")}))}return t.prototype.isReady=function(){return!!this.db},t.prototype.waitUntilReady=function(t){return _(this,void 0,void 0,(function(){var e=this;return z(this,(function(n){return[2,new Promise((function(n,r){var o=Date.now(),a=setInterval((function(){var i=Date.now()-o;e.isReady()?(clearInterval(a),n()):i>1e3*t&&(clearInterval(a),r(new Error("Database not ready after ".concat(t," seconds."))))}),100)}))]}))}))},t.prototype.storePlace=function(t){return _(this,void 0,void 0,(function(){return z(this,(function(e){switch(e.label){case 0:return[4,this.getDb()];case 1:return[4,e.sent().put("nbnPlaceStore",t)];case 2:return e.sent(),[2]}}))}))},t.prototype.storePlaces=function(t){return _(this,void 0,void 0,(function(){var e,n,r;return z(this,(function(o){switch(o.label){case 0:return[4,this.getDb()];case 1:return e=o.sent(),n=e.transaction(["nbnPlaceStore"],"readwrite",{durability:"relaxed"}),r=n.objectStore("nbnPlaceStore"),[4,t.map((function(t){return r.put(t)}))];case 2:return o.sent(),[4,n.done];case 3:return o.sent(),[2]}}))}))},t.prototype.getPlace=function(t){return _(this,void 0,void 0,(function(){return z(this,(function(e){switch(e.label){case 0:return[4,this.getDb()];case 1:return[4,e.sent().get("nbnPlaceStore",t)];case 2:return[2,e.sent()]}}))}))},t.prototype.getPlaces=function(t){return _(this,void 0,void 0,(function(){var e,n,r,o;return z(this,(function(a){switch(a.label){case 0:return[4,this.getDb()];case 1:return e=a.sent(),n=e.transaction(["nbnPlaceStore"],"readonly"),r=n.objectStore("nbnPlaceStore"),[4,Promise.all(t.map((function(t){return r.get(t)})))];case 2:return o=a.sent(),[4,n.done];case 3:return a.sent(),[2,o.filter((function(t){return!!t}))]}}))}))},t.prototype.getDb=function(t){return void 0===t&&(t=5),_(this,void 0,void 0,(function(){return z(this,(function(e){switch(e.label){case 0:return[4,this.waitUntilReady(t)];case 1:if(e.sent(),!this.db)throw new Error("Database not ready.");return[2,this.db]}}))}))},t}(),N=new p("index.ts"),j=function(){try{return process.argv.includes("development")}catch(t){return!1}}();N.debug("isDevelopment",j),"serviceWorker"in navigator&&!j&&window.addEventListener("load",(function(){navigator.serviceWorker.register("./service-worker.js").then((function(t){N.info("SW registered: ",t)})).catch((function(t){N.warn("SW registration failed: ",t)}))})),A=function(){var t=new r,e=new I,n=new V,o=new m({mapContainerId:"map",api:t,defaultModeHandler:e,placestore:n}),a=new C;o.addControl("displaymode",a);var i=new B;i.updateLegend(e.getLegendItems()),o.addControl("legend",i),a.on("change",(function(t){"all"===t.state&&o.setModeHandler(e)}))},"complete"===document.readyState||"interactive"===document.readyState?setTimeout(A,1):document.addEventListener("DOMContentLoaded",A)},36:t=>{t.exports="data:image/svg+xml,%3Csvg xmlns=%27http://www.w3.org/2000/svg%27 stroke=%27%23000%27 stroke-linecap=%27round%27 stroke-width=%271.6%27 viewBox=%270 0 24 24%27%3E%3Cdefs/%3E%3Cg%3E%3Cpath stroke-opacity=%27.1%27 d=%27M14 8.4l3-5%27/%3E%3Cpath stroke-opacity=%27.2%27 d=%27M15.6 10l5-3%27/%3E%3Cpath stroke-opacity=%27.3%27 d=%27M16.2 12H22%27/%3E%3Cpath stroke-opacity=%27.4%27 d=%27M15.6 14l5 3m-6.5-1.4l2.9 5%27/%3E%3Cpath stroke-opacity=%27.5%27 d=%27M12 16.2V22m-2-6.4l-3 5%27/%3E%3Cpath stroke-opacity=%27.6%27 d=%27M8.4 14l-5 3%27/%3E%3Cpath stroke-opacity=%27.7%27 d=%27M7.8 12H2%27/%3E%3Cpath stroke-opacity=%27.8%27 d=%27M8.4 10l-5-3%27/%3E%3Cpath stroke-opacity=%27.9%27 d=%27M10 8.4l-3-5%27/%3E%3Cpath d=%27M12 7.8V2%27/%3E%3CanimateTransform attributeName=%27transform%27 calcMode=%27discrete%27 dur=%271s%27 repeatCount=%27indefinite%27 type=%27rotate%27 values=%270 12 12;30 12 12;60 12 12;90 12 12;120 12 12;150 12 12;180 12 12;210 12 12;240 12 12;270 12 12;300 12 12;330 12 12%27/%3E%3C/g%3E%3C/svg%3E"},585:t=>{t.exports="data:image/svg+xml,%3Csvg xmlns=%27http://www.w3.org/2000/svg%27 viewBox=%270 0 24 24%27%3E%3Cpath d=%27M12.2 13l3.4 6.6c.6 1.1 2.5-.4 2-1.2l-4-6.2z%27/%3E%3Ccircle cx=%2710.8%27 cy=%278.9%27 r=%273.9%27 fill=%27none%27 stroke=%27%23000%27 stroke-width=%271.5%27/%3E%3C/svg%3E"},539:t=>{t.exports='data:image/svg+xml;charset=UTF-8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><path fill="black" d="M304 48a48 48 0 1 1-96 0 48 48 0 0 1 96 0zm-48 368a48 48 0 1 0 0 96 48 48 0 0 0 0-96zm208-208a48 48 0 1 0 0 96 48 48 0 0 0 0-96zM96 256a48 48 0 1 0-96 0 48 48 0 0 0 96 0zm13 99a48 48 0 1 0 0 96 48 48 0 0 0 0-96zm294 0a48 48 0 1 0 0 96 48 48 0 0 0 0-96zM109 61a48 48 0 1 0 0 96 48 48 0 0 0 0-96z"/></svg>'},141:t=>{t.exports='data:image/svg+xml;charset=UTF-8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><path fill="black" d="M445 4 29 195c-48 23-32 93 19 93h176v176c0 51 70 67 93 19L508 67c16-38-25-79-63-63z"/></svg>'},478:t=>{t.exports='data:image/svg+xml;charset=UTF-8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><path fill="rgb%28252, 132, 40%29" d="M445 4 29 195c-48 23-32 93 19 93h176v176c0 51 70 67 93 19L508 67c16-38-25-79-63-63z"/></svg>'},38:t=>{t.exports='data:image/svg+xml;charset=UTF-8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><path fill="rgb%2832, 116, 182%29" d="M445 4 29 195c-48 23-32 93 19 93h176v176c0 51 70 67 93 19L508 67c16-38-25-79-63-63z"/></svg>'}},n={};function r(t){var o=n[t];if(void 0!==o)return o.exports;var a=n[t]={id:t,exports:{}};return e[t].call(a.exports,a,a.exports,r),a.exports}r.m=e,t=[],r.O=(e,n,o,a)=>{if(!n){var i=1/0;for(u=0;u<t.length;u++){for(var[n,o,a]=t[u],s=!0,c=0;c<n.length;c++)(!1&a||i>=a)&&Object.keys(r.O).every((t=>r.O[t](n[c])))?n.splice(c--,1):(s=!1,a<i&&(i=a));if(s){t.splice(u--,1);var l=o();void 0!==l&&(e=l)}}return e}a=a||0;for(var u=t.length;u>0&&t[u-1][2]>a;u--)t[u]=t[u-1];t[u]=[n,o,a]},r.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return r.d(e,{a:e}),e},r.d=(t,e)=>{for(var n in e)r.o(e,n)&&!r.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:e[n]})},r.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),r.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),(()=>{var t;r.g.importScripts&&(t=r.g.location+"");var e=r.g.document;if(!t&&e&&(e.currentScript&&(t=e.currentScript.src),!t)){var n=e.getElementsByTagName("script");if(n.length)for(var o=n.length-1;o>-1&&!t;)t=n[o--].src}if(!t)throw new Error("Automatic publicPath is not supported in this browser");t=t.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),r.p=t})(),(()=>{r.b=document.baseURI||self.location.href;var t={143:0};r.O.j=e=>0===t[e];var e=(e,n)=>{var o,a,[i,s,c]=n,l=0;if(i.some((e=>0!==t[e]))){for(o in s)r.o(s,o)&&(r.m[o]=s[o]);if(c)var u=c(r)}for(e&&e(n);l<i.length;l++)a=i[l],r.o(t,a)&&t[a]&&t[a][0](),t[a]=0;return r.O(u)},n=self.webpackChunk=self.webpackChunk||[];n.forEach(e.bind(null,0)),n.push=e.bind(null,n.push.bind(n))})(),r.nc=void 0;var o=r.O(void 0,[578],(()=>r(224)));o=r.O(o)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,