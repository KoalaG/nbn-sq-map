/*! For license information please see app.566039a34bebfb3de114.js.LICENSE.txt */
(()=>{"use strict";var t,e={281:(t,e,n)=>{const r=function(){function t(){}return t.prototype.fetchPage=function(t,e,n){return void 0===e&&(e=1),void 0===n&&(n=function(){return!0}),r=this,o=void 0,a=function(){var r,o,i,a;return function(t,e){var n,r,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(s){return function(l){return function(s){if(n)throw new TypeError("Generator is already executing.");for(;i&&(i=0,s[0]&&(a=0)),a;)try{if(n=1,r&&(o=2&s[0]?r.return:s[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,s[1])).done)return o;switch(r=0,o&&(s=[2&s[0],o.value]),s[0]){case 0:case 1:o=s;break;case 4:return a.label++,{value:s[1],done:!1};case 5:a.label++,r=s[1],s=[0];continue;case 7:s=a.ops.pop(),a.trys.pop();continue;default:if(!((o=(o=a.trys).length>0&&o[o.length-1])||6!==s[0]&&2!==s[0])){a=0;continue}if(3===s[0]&&(!o||s[1]>o[0]&&s[1]<o[3])){a.label=s[1];break}if(6===s[0]&&a.label<o[1]){a.label=o[1],o=s;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(s);break}o[2]&&a.ops.pop(),a.trys.pop();continue}s=e.call(t,a)}catch(t){s=[6,t],r=0}finally{n=o=0}if(5&s[0])throw s[1];return{value:s[0]?s[1]:void 0,done:!0}}([s,l])}}}(this,(function(s){switch(s.label){case 0:if(r=t.getNorth().toFixed(2),o=t.getEast().toFixed(2),i=t.getSouth().toFixed(2),a=t.getWest().toFixed(2),!n())throw new Error("Proceed function returned false. Stopping fetch.");return e=Math.max(1,Number(e)),"https://api.lip.net.au/nbn-bulk/map/".concat(r,"/").concat(o,"/").concat(i,"/").concat(a,"?page=").concat(e),[4,new Promise((function(t,n){fetch("https://api.lip.net.au/nbn-bulk/map/".concat(r,"/").concat(o,"/").concat(i,"/").concat(a,"?page=").concat(e),{method:"GET",redirect:"follow"}).then((function(t){return t.text()})).then((function(e){var n=JSON.parse(e);t(n.data)})).catch(n)}))];case 1:return[2,s.sent()]}}))},new((i=void 0)||(i=Promise))((function(t,e){function n(t){try{l(a.next(t))}catch(t){e(t)}}function s(t){try{l(a.throw(t))}catch(t){e(t)}}function l(e){var r;e.done?t(e.value):(r=e.value,r instanceof i?r:new i((function(t){t(r)}))).then(n,s)}l((a=a.apply(r,o||[])).next())}));var r,o,i,a},t}();n(623);var o=n(243),i=(n(664),n(687),n(69),n(672),n(732),n(256),function(t,e,n,r){return new(n||(n=Promise))((function(o,i){function a(t){try{l(r.next(t))}catch(t){i(t)}}function s(t){try{l(r.throw(t))}catch(t){i(t)}}function l(t){var e;t.done?o(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(a,s)}l((r=r.apply(t,e||[])).next())}))}),a=function(t,e){var n,r,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(s){return function(l){return function(s){if(n)throw new TypeError("Generator is already executing.");for(;i&&(i=0,s[0]&&(a=0)),a;)try{if(n=1,r&&(o=2&s[0]?r.return:s[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,s[1])).done)return o;switch(r=0,o&&(s=[2&s[0],o.value]),s[0]){case 0:case 1:o=s;break;case 4:return a.label++,{value:s[1],done:!1};case 5:a.label++,r=s[1],s=[0];continue;case 7:s=a.ops.pop(),a.trys.pop();continue;default:if(!((o=(o=a.trys).length>0&&o[o.length-1])||6!==s[0]&&2!==s[0])){a=0;continue}if(3===s[0]&&(!o||s[1]>o[0]&&s[1]<o[3])){a.label=s[1];break}if(6===s[0]&&a.label<o[1]){a.label=o[1],o=s;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(s);break}o[2]&&a.ops.pop(),a.trys.pop();continue}s=e.call(t,a)}catch(t){s=[6,t],r=0}finally{n=o=0}if(5&s[0])throw s[1];return{value:s[0]?s[1]:void 0,done:!0}}([s,l])}}};const s=function(){function t(t,e,n){this.points={},this.map=t,this.datastore=e,this.modeHandler=n,this.markers=new o.MarkerClusterGroup({maxClusterRadius:this.markerClusterRadius,spiderfyOnMaxZoom:!1,disableClusteringAtZoom:18,showCoverageOnHover:!0,zoomToBoundsOnClick:!0,removeOutsideVisibleBounds:!0,iconCreateFunction:this.iconCreateFunction,chunkedLoading:!0,chunkInterval:150,chunkDelay:150,chunkProgress:function(t,e,n){console.log("chunkProgress",{processed:t,total:e,elapsed:n})}}),this.markers.addTo(this.map),this.map.on("zoomend",(function(t){console.log("zoomend",t.target.getZoom())}))}return t.prototype.iconCreateFunction=function(t){var e=t.getAllChildMarkers().map((function(t){return t.options.fillColor})),n={};e.forEach((function(t){n[t]||(n[t]=0),n[t]++}));var r=Object.keys(n).sort((function(t,e){return n[e]-n[t]})),i="background: conic-gradient(",a=0;r.forEach((function(t,r){0==r&&(i+="\n"+t+" 0%");var o=n[t]/e.length*100;i+=", \n"+t+" "+a+"%",i+=", \n"+t+" "+(a+o)+"%",a+=o})),i+="\n);";var s=Math.random().toString(36).substring(7);return o.divIcon({html:"<style>#cluster_".concat(s,"::before { ").concat(i," }</style> <div id='cluster_").concat(s,"'><span>")+t.getChildCount()+"</span></div>",className:"marker-cluster"})},t.prototype.markerClusterRadius=function(t){switch(t){case 0:case 1:case 2:case 3:case 4:case 5:case 6:case 7:case 8:case 9:case 10:case 11:case 12:case 13:return 150;case 14:return 100;default:return 0}},t.prototype.setModeHandler=function(t){return this.modeHandler=t,Object.values(this.points).forEach((function(e){var n=e.layer,r=e.point;n.setStyle({fillColor:t.pointColour(r)}),n.redraw()})),console.error(this.markers),this.markers&&this.markers.getLayers().length&&this.markers.refreshClusters(),this},t.prototype.refreshMarkersInsideBounds=function(t,e){var n,r,o;return i(this,void 0,void 0,(function(){var i,s,l=this;return a(this,(function(a){switch(a.label){case 0:if(!this.datastore)throw new Error("Datastore not set");return[4,this.datastore.getFullPointsWithinBounds(t)];case 1:return a.sent().forEach((function(t){var e=t.latlng;l.points[e]?l.points[e].point=t:l.points[e]={layer:l.renderPoint(t),point:t}})),e?(i=[],s=Object.values(this.points).filter((function(t){var n=t.layer,r=t.point.places.filter(e).length>0;return r||i.push(n),r})),i.length&&(null===(n=this.markers)||void 0===n||n.removeLayers(i)),null===(r=this.markers)||void 0===r||r.addLayers(s.map((function(t){return t.layer})))):null===(o=this.markers)||void 0===o||o.addLayers(Object.values(this.points).map((function(t){return t.layer}))),[2]}}))}))},t.prototype.removeMarkersOutsideBounds=function(t){return i(this,void 0,void 0,(function(){return a(this,(function(t){return[2]}))}))},t.prototype.removeAllMarkers=function(){var t;return i(this,void 0,void 0,(function(){return a(this,(function(e){return null===(t=this.markers)||void 0===t||t.clearLayers(),[2]}))}))},t.prototype.renderPoint=function(t){var e,n=this,r=o.circleMarker([t.latitude,t.longitude],{radius:5,fillColor:null===(e=this.modeHandler)||void 0===e?void 0:e.pointColour(t),color:"#000000",weight:1,opacity:1,fillOpacity:.8});return r.bindPopup((function(e){return n.renderPopup(t.places)||""}),{autoPan:!0,autoClose:!1}),r.bindTooltip((function(e){return n.modeHandler.renderTooltip(t.places)||""}),{}),r},t.prototype.renderPopup=function(t){return 1==t.length?this.modeHandler.renderPopupContent(t[0]):this.rendorPopupMulti(t)},t.prototype.rendorPopupMulti=function(t){var e,n,r=document.createElement("div"),o=[];t.sort((function(t,e){return t.address1<e.address1?-1:t.address1>e.address1?1:0}));var i=function(t){var e=document.createElement("div"),n=a.modeHandler.placeColour(t),i=document.createElement("button");i.classList.add("accordion"),i.type="button",i.innerHTML='<svg height="15" width="15" style="margin-right:3px">'+'<circle class="circle" cx="7.5" cy="9" r="5" stroke="#000" stroke-width="1" fill="'.concat(n,'" />')+"</svg>"+"<span>".concat(t.address1,"</span>");var s=document.createElement("div");s.classList.add("panel"),s.appendChild(a.modeHandler.renderPopupContent(t)),i.addEventListener("click",(function(){var t=e.classList.contains("active");o.forEach((function(t){t.classList.remove("active")})),t||e.classList.add("active")})),e.appendChild(i),e.appendChild(s),r.appendChild(e),o.push(e)},a=this;try{for(var s=function(t){var e="function"==typeof Symbol&&Symbol.iterator,n=e&&t[e],r=0;if(n)return n.call(t);if(t&&"number"==typeof t.length)return{next:function(){return t&&r>=t.length&&(t=void 0),{value:t&&t[r++],done:!t}}};throw new TypeError(e?"Object is not iterable.":"Symbol.iterator is not defined.")}(t),l=s.next();!l.done;l=s.next())i(l.value)}catch(t){e={error:t}}finally{try{l&&!l.done&&(n=s.return)&&n.call(s)}finally{if(e)throw e.error}}return r},t}();var l=function(t,e){var n="function"==typeof Symbol&&t[Symbol.iterator];if(!n)return t;var r,o,i=n.call(t),a=[];try{for(;(void 0===e||e-- >0)&&!(r=i.next()).done;)a.push(r.value)}catch(t){o={error:t}}finally{try{r&&!r.done&&(n=i.return)&&n.call(i)}finally{if(o)throw o.error}}return a},c=function(t,e,n){if(n||2===arguments.length)for(var r,o=0,i=e.length;o<i;o++)!r&&o in e||(r||(r=Array.prototype.slice.call(e,0,o)),r[o]=e[o]);return t.concat(r||Array.prototype.slice.call(e))},u=function(){function t(t){this.name=t}return t.prototype.sub=function(e){return new t("".concat(this.name,".").concat(e))},t.prototype.error=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];console.error.apply(console,c(["[".concat(this.name,"]")],l(t),!1))},t.prototype.warn=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];console.warn.apply(console,c(["[".concat(this.name,"]")],l(t),!1))},t.prototype.debug=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];p()&&console.debug.apply(console,c(["[".concat(this.name,"]")],l(t),!1))},t.prototype.info=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];console.info.apply(console,c(["[".concat(this.name,"]")],l(t),!1))},t.prototype.log=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];console.log.apply(console,c(["[".concat(this.name,"]")],l(t),!1))},t}();function p(){return window.location.href.includes("localhost")||window.location.href.includes("debug=true")}var d=function(){return d=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var o in e=arguments[n])Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=e[o]);return t},d.apply(this,arguments)},h=function(t,e,n,r){return new(n||(n=Promise))((function(o,i){function a(t){try{l(r.next(t))}catch(t){i(t)}}function s(t){try{l(r.throw(t))}catch(t){i(t)}}function l(t){var e;t.done?o(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(a,s)}l((r=r.apply(t,e||[])).next())}))},f=function(t,e){var n,r,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(s){return function(l){return function(s){if(n)throw new TypeError("Generator is already executing.");for(;i&&(i=0,s[0]&&(a=0)),a;)try{if(n=1,r&&(o=2&s[0]?r.return:s[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,s[1])).done)return o;switch(r=0,o&&(s=[2&s[0],o.value]),s[0]){case 0:case 1:o=s;break;case 4:return a.label++,{value:s[1],done:!1};case 5:a.label++,r=s[1],s=[0];continue;case 7:s=a.ops.pop(),a.trys.pop();continue;default:if(!((o=(o=a.trys).length>0&&o[o.length-1])||6!==s[0]&&2!==s[0])){a=0;continue}if(3===s[0]&&(!o||s[1]>o[0]&&s[1]<o[3])){a.label=s[1];break}if(6===s[0]&&a.label<o[1]){a.label=o[1],o=s;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(s);break}o[2]&&a.ops.pop(),a.trys.pop();continue}s=e.call(t,a)}catch(t){s=[6,t],r=0}finally{n=o=0}if(5&s[0])throw s[1];return{value:s[0]?s[1]:void 0,done:!0}}([s,l])}}};function g(t){var e=Math.ceil(50*t.getNorth())/50,n=Math.floor(25*t.getWest())/25,r=Math.floor(50*t.getSouth())/50,i=Math.ceil(25*t.getEast())/25;return o.latLngBounds([r,n],[e,i])}var v=function(){function t(e){var n=this;this.logger=new u("NbnTechMap"),this.markerFilter=function(t){return!0},this.initialViewSet=!1,this.controls={},e=d(d({},t.DEFAULT_OPTIONS),e),this.api=e.api,this.datastore=e.datastore,this.modeHandler=e.defaultModeHandler,this.map=o.map(e.mapContainerId,{preferCanvas:!0}),this.markerLayer=new s(this.map,this.datastore,this.modeHandler),this.mapTileLayer=o.tileLayer("https://{s}.basemaps.cartocdn.com/rastertiles/voyager/{z}/{x}/{y}{r}.png",{attribution:'&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors &copy; <a href="https://carto.com/attributions">CARTO</a>',subdomains:"abcd",crossOrigin:!0,minZoom:5,maxZoom:20}),this.mapTileLayer.addTo(this.map),this.mapLocate=o.control.locate({position:"topleft",locateOptions:{maxZoom:16},setView:"untilPan",keepCurrentZoomLevel:!0,initialZoomLevel:17,cacheLocation:!0}),this.mapLocate.addTo(this.map),this.map.on("locateactivate",(function(){localStorage.setItem("geolocate","1")})),this.map.on("locatedeactivate",(function(){localStorage.removeItem("geolocate")})),this.setInitialMapView(),this.map.on("moveend",(function(){return h(n,void 0,void 0,(function(){var t,e;return f(this,(function(n){return t=this.map.getCenter(),e=this.map.getZoom(),localStorage.setItem("startpos",JSON.stringify({lat:t.lat,lng:t.lng,zoom:e})),this.fetchDataForCurrentView(),[2]}))}))}))}return t.prototype.getStartPos=function(){var t=localStorage.getItem("startpos");if(!t)return null;try{return JSON.parse(t)}catch(t){return null}},t.prototype.setInitialMapView=function(){var t=this.logger.sub("setInitialMapView");if(this.initialViewSet)t.warn("Initial map view already set");else{var e=localStorage.getItem("geolocate"),n=this.getStartPos();n&&(this.map.setView([n.lat,n.lng],n.zoom),this.initialViewSet=!0),n||(this.map.setView([-26.1772288,133.4170119],10),this.initialViewSet=!0),!e&&n||(this.mapLocate.start(),this.map.setZoom(17),this.initialViewSet=!0),this.initialViewSet||t.error("Could not set initial map view")}},t.prototype.getBoxesInBounds=function(t){for(var e=Math.ceil(50*t.getNorth())/50,n=Math.floor(25*t.getWest())/25,r=[],i=e;i>t.getSouth();i-=.02)for(var a=n;a<t.getEast();a+=.04)r.push([i,a]);return r.map((function(t){var e=t[0],n=t[1],r=e-.02,i=n+.04;return o.latLngBounds([r,n],[e,i])}))},t.prototype.getCurrentViewBoxes=function(){return this.getBoxesInBounds(this.map.getBounds())},t.prototype.hideMarkersOutsideCurrentView=function(){var t=this.map.getBounds().pad(.5);this.markerLayer.removeMarkersOutsideBounds(t)},t.prototype.displayMarkersInCurrentView=function(t){return void 0===t&&(t=1),h(this,void 0,void 0,(function(){var e,n=this;return f(this,(function(r){return!1===this.datastore.isReady()?t>10?(console.error("Could not get datastore ready. Giving up."),[2]):(console.warn("Datastore is not ready. Delaying displayMarkersInCurrentView()"),setTimeout((function(){return n.displayMarkersInCurrentView(t+1)}),1e3),[2]):(console.log("Displaying markers in current view"),e=g(this.map.getBounds()),console.log("Fetching from Datastore",e),this.refreshPointsFromStore(e),[2])}))}))},t.prototype.fetchDataForCurrentView=function(){return h(this,void 0,void 0,(function(){var t,e,n,r,o,i=this;return f(this,(function(a){switch(a.label){case 0:if(t=this.logger.sub("fetchDataForCurrentView"),this.hideMarkersOutsideCurrentView(),this.displayMarkersInCurrentView(),this.map.getZoom()<11)return t.warn("Zoom level too low. Skipping."),[2];if(e=this.getCurrentViewBoxes(),t.debug("Current view boxes",e),e.length>1e3)return t.warn("Too many boxes to fetch. Skipping."),[2];t.debug("Fetching boxes",e.length),n=function(t,e){for(var n=[];t.length;)n.push(t.splice(0,10));return n}(e),t.debug("Box chunks",n.length,n),r=0,a.label=1;case 1:return r<n.length?(o=n[r].map((function(t){return i.fetchData(t)})),t.debug("Fetch promises",o.length,o),[4,Promise.all(o)]):[3,4];case 2:a.sent(),this.refreshPointsFromStore(this.map.getBounds().pad(.5)),a.label=3;case 3:return r++,[3,1];case 4:return t.debug("All boxes fetched"),[2]}}))}))},t.prototype.fetchData=function(t,e){return void 0===e&&(e=1),h(this,void 0,void 0,(function(){var n,r,o=this;return f(this,(function(i){switch(i.label){case 0:p()&&console.log("Fetching Box",t.getCenter().toString(),e),i.label=1;case 1:return i.trys.push([1,6,,7]),[4,this.api.fetchPage(t,e,(function(){return o.map.getBounds().intersects(t)}))];case 2:return n=i.sent(),[4,this.processFetchResult(n,t)];case 3:return i.sent(),n.next?[4,this.fetchData(t,n.next)]:[3,5];case 4:return[2,i.sent()];case 5:return[2];case 6:return"Page already loaded this session."==(r=i.sent()).message?[2]:(console.error(r),[3,7]);case 7:return[2]}}))}))},t.prototype.processFetchResult=function(t,e){return h(this,void 0,void 0,(function(){var e;return f(this,(function(n){switch(n.label){case 0:return console.log("Storing places."),e=this.datastore.storePlaces(t.places),console.log("Waiting for place storing to finish"),[4,e];case 1:return n.sent(),[2]}}))}))},t.prototype.refreshPointsFromStore=function(t){return h(this,void 0,void 0,(function(){return f(this,(function(e){if(!this.markerLayer)throw new Error("Marker Layer not set");return t||(console.log("Bounds not passed. Using map bounds."),t=this.map.getBounds()),t=g(t),this.markerLayer.refreshMarkersInsideBounds(t,this.markerFilter),[2]}))}))},t.prototype.addControl=function(t,e){if(this.controls[t])throw new Error("Control with key ".concat(t," already exists"));this.controls[t]=e,this.map.addControl(e.getControl()),console.log("Added control",t)},t.prototype.setMarkerFilter=function(t){if(!this.markerLayer)throw new Error("Marker Layer not set");this.markerFilter=t,this.markerLayer.refreshMarkersInsideBounds(this.map.getBounds(),this.markerFilter)},t.prototype.setModeHandler=function(t){var e;this.modeHandler=t,null===(e=this.markerLayer)||void 0===e||e.setModeHandler(t)},t.DEFAULT_OPTIONS={mapContainerId:"map"},t}();const y=v,m=function(){function t(){this.eventHandlers={},this.control=new o.Control}return t.prototype.on=function(t,e){this.eventHandlers[t]||(this.eventHandlers[t]=[]),this.eventHandlers[t].push(e)},t.prototype.emit=function(t,e){var n=this;console.debug("Emitting event: ".concat(t),{data:e,handlers:this.eventHandlers[t]}),this.eventHandlers[t]&&this.eventHandlers[t].forEach((function(r){return r({name:t,state:n.getState(),data:e})}))},t.prototype.getControl=function(){return this.control},t}();var b,w=(b=function(t,e){return b=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},b(t,e)},function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function n(){this.constructor=t}b(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});const C=function(t){function e(){var e=t.call(this)||this;return e.displayMode="all",e.elControlDiv=document.createElement("div"),e.elDropdown=document.createElement("select"),e.allLabel=null,e.allRadio=null,e.allText=null,e.upgradeLabel=null,e.upgradeRadio=null,e.upgradeText=null,e.eeLabel=null,e.eeRadio=null,e.eeText=null,e.generateControlDiv(),e.control.onAdd=function(t){return e.generateDropdown(),e.elControlDiv},e}return w(e,t),e.prototype.getState=function(){return this.displayMode},e.prototype.changeMode=function(t){this.displayMode=t,this.emit("change",t)},e.prototype.generateControlDiv=function(){this.elControlDiv&&console.warn("ControlDiv already exists"),this.elControlDiv.classList.add("info","legend"),this.elControlDiv.style.backgroundColor="#ffffff",this.elControlDiv.style.opacity="0.8",this.elControlDiv.style.padding="5px",this.elControlDiv.style.borderRadius="5px"},e.prototype.generateDropdown=function(){var t=this;this.elDropdown&&console.warn("Dropdown already exists");var e=this.elDropdown;e.classList.add("control-select");var n=document.createElement("option");n.value="all",n.innerText="Show All Locations",e.appendChild(n),e.addEventListener("change",(function(e){return t.changeMode(e.target.value)})),this.elDropdown=e,this.elControlDiv.appendChild(e)},e}(m);var T=function(t,e,n,r){return new(n||(n=Promise))((function(o,i){function a(t){try{l(r.next(t))}catch(t){i(t)}}function s(t){try{l(r.throw(t))}catch(t){i(t)}}function l(t){var e;t.done?o(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(a,s)}l((r=r.apply(t,e||[])).next())}))},x=function(t,e){var n,r,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(s){return function(l){return function(s){if(n)throw new TypeError("Generator is already executing.");for(;i&&(i=0,s[0]&&(a=0)),a;)try{if(n=1,r&&(o=2&s[0]?r.return:s[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,s[1])).done)return o;switch(r=0,o&&(s=[2&s[0],o.value]),s[0]){case 0:case 1:o=s;break;case 4:return a.label++,{value:s[1],done:!1};case 5:a.label++,r=s[1],s=[0];continue;case 7:s=a.ops.pop(),a.trys.pop();continue;default:if(!((o=(o=a.trys).length>0&&o[o.length-1])||6!==s[0]&&2!==s[0])){a=0;continue}if(3===s[0]&&(!o||s[1]>o[0]&&s[1]<o[3])){a.label=s[1];break}if(6===s[0]&&a.label<o[1]){a.label=o[1],o=s;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(s);break}o[2]&&a.ops.pop(),a.trys.pop();continue}s=e.call(t,a)}catch(t){s=[6,t],r=0}finally{n=o=0}if(5&s[0])throw s[1];return{value:s[0]?s[1]:void 0,done:!0}}([s,l])}}},k=function(){function t(){this.latLngIndex={},this.nbnPlaceStore={}}return t.prototype.isReady=function(){return!0},t.prototype.storePlace=function(t){return T(this,void 0,void 0,(function(){var e,n,r,o;return x(this,(function(i){return e=t.latitude,n=t.longitude,r="".concat(e,",").concat(n),o=t.locid,this.latLngIndex[r]?this.latLngIndex[r].includes(o)||this.latLngIndex[r].push(o):this.latLngIndex[r]=[o],this.nbnPlaceStore[o]=t,[2]}))}))},t.prototype.storePlaces=function(t){return T(this,void 0,void 0,(function(){var e=this;return x(this,(function(n){return t.forEach((function(t){return e.storePlace(t)})),[2]}))}))},t.prototype.getPlace=function(t){return T(this,void 0,void 0,(function(){return x(this,(function(e){return[2,this.nbnPlaceStore[t]]}))}))},t.prototype.getPlaces=function(){return T(this,void 0,void 0,(function(){var t=this;return x(this,(function(e){return[2,Object.keys(this.nbnPlaceStore).map((function(e){return t.nbnPlaceStore[e]}))]}))}))},t.prototype.getPoints=function(){return T(this,void 0,void 0,(function(){var t=this;return x(this,(function(e){return[2,Object.keys(this.latLngIndex).map((function(e){var n=function(t,e){var n="function"==typeof Symbol&&t[Symbol.iterator];if(!n)return t;var r,o,i=n.call(t),a=[];try{for(;(void 0===e||e-- >0)&&!(r=i.next()).done;)a.push(r.value)}catch(t){o={error:t}}finally{try{r&&!r.done&&(n=i.return)&&n.call(i)}finally{if(o)throw o.error}}return a}(e.split(",").map(Number),2);return{latlng:e,latitude:n[0],longitude:n[1],locids:t.latLngIndex[e]}}))]}))}))},t.prototype.getPointsWithinBounds=function(t){return T(this,void 0,void 0,(function(){var e=this;return x(this,(function(n){switch(n.label){case 0:return[4,this.getPoints()];case 1:return[2,n.sent().filter((function(n){var r=n.latitude,o=n.longitude;return e.isLatLngWithinBounds(r,o,t)}))]}}))}))},t.prototype.getFullPointsWithinBounds=function(t){return T(this,void 0,void 0,(function(){var e,n=this;return x(this,(function(r){switch(r.label){case 0:return[4,this.getPoints()];case 1:return e=r.sent().filter((function(e){var r=e.latitude,o=e.longitude;return n.isLatLngWithinBounds(r,o,t)})).map((function(t){return{latlng:t.latlng,latitude:t.latitude,longitude:t.longitude,places:t.locids.map((function(t){return n.nbnPlaceStore[t]}))}})),[2,e]}}))}))},t.prototype.getPlacesAtLatLng=function(t,e){return T(this,void 0,void 0,(function(){var n,r=this;return x(this,(function(o){return n="".concat(t,",").concat(e),[2,this.latLngIndex[n].map((function(t){return r.nbnPlaceStore[t]}))]}))}))},t.prototype.isLatLngWithinBounds=function(t,e,n){return t>n.getSouth()&&t<n.getNorth()&&e>n.getWest()&&e<n.getEast()},t}(),L="#1D7044",S="#75AD6F",P="#C8E3C5",M="#FFBE00",F="#FF7E01",E="#E3071D",O="#02B9E3",D="#022BE3",B="#6B02E3",H="#888888";function I(t){switch(t){case"FTTP":return L;case"FTTC":return F;case"FTTN":case"FTTB":return E;case"HFC":return M;case"WIRELESS":return O;case"SATELLITE":return B}return H}const R=function(){function t(){}return t.prototype.filter=function(t){return!0},t.prototype.pointColour=function(t){return this.placeColour(t.places[0])},t.prototype.placeColour=function(t){return function(t){return"FTTP"===t.techType}(t)?L:function(t){return!(!t.altReasonCode||!t.altReasonCode.match(/^FTTP/)||"Eligible To Order"!==t.techChangeStatus)}(t)?S:function(t){if(t.altReasonCode&&t.altReasonCode.match(/^FTTP/))switch(t.techChangeStatus){case"In Design":case"Build Finalised":case"Planned":case"MDU Complex Eligible To Apply":case"MDU Complex Premises In Build":return!0}return!1}(t)?P:function(t){if(t.altReasonCode&&t.altReasonCode.match(/^FTTP/)&&"Committed"===t.techChangeStatus)return!0}(t)?I(t.techType):function(t){return!("FTTC"!=t.techType||!t.reasonCode||!t.reasonCode.match(/^FTTC/)||"New Tech Connected"!=t.techChangeStatus)}(t)?F:function(t){return"FTTC"==t.techType&&"FTTC_SA"==t.reasonCode&&"FW_CT"==t.altReasonCode&&"Eligible To Order"==t.techChangeStatus}(t)?"#FF7E01":function(t){return"FTTN"==t.techType&&"FTTN_SA"==t.reasonCode&&"FW_CT"==t.altReasonCode&&"Eligible To Order"==t.techChangeStatus}(t)?E:function(t){return"WIRELESS"==t.techType&&"FW_SA"==t.reasonCode&&"Eligible To Order"==t.techChangeStatus}(t)?D:(t.altReasonCode&&"NULL_NA"!=t.altReasonCode&&console.log(t),I(t.techType))},t.prototype.renderPopupContent=function(t){var e=o.DomUtil.create("div");if(e.innerHTML="<b>"+t.locid+"</b></br>"+t.address1+"</br>"+t.address2+"</br><br />",e.innerHTML+="<b>Technology Plan</b></br>","FTTP"!=t.techType&&t.altReasonCode&&"NULL_NA"!=t.altReasonCode?(t.altReasonCode&&t.altReasonCode.match(/^FTTP/),e.innerHTML+="Current: "+t.techType+"<br />",e.innerHTML+="Change: "+t.altReasonCode+"<br />",e.innerHTML+="Status: "+t.techChangeStatus+"<br />",e.innerHTML+="Program: "+t.programType+"<br />",e.innerHTML+="Target Qtr: "+t.targetEligibilityQuarter+"<br />"):(e.innerHTML+="Technology: "+t.techType+"<br />","FTTP"!=t.techType&&(e.innerHTML+="No tech upgrade planned<br />")),e.innerHTML+="<br />",t.ee&&(e.innerHTML+="<b>Enterprise Ethernet</b></br>",e.innerHTML+="Price Zone: "+(t.cbdpricing?"CBD":"Zone 1/2/3")+"<br />",e.innerHTML+="Build Cost: "+(t.zeroBuildCost?"$0":"POA")+"<br />",e.innerHTML+="<br />"),p()){var n=o.DomUtil.create("hr"),r=o.DomUtil.create("pre");r.innerHTML=JSON.stringify(t,null,2),e.appendChild(n),e.appendChild(r)}return e},t.prototype.renderTooltip=function(t){var e=t[0].address1;return t.length>1&&(e+=" ( + "+(t.length-1)+" more)"),e},t.prototype.getLegendItems=function(){return[{label:"FTTP",colour:L},{label:"FTTP Upgrade",colour:S},{label:"FTTP Upgrade Soon",colour:P},{label:"HFC",colour:M},{label:"FTTC",colour:F},{label:"FTTN/FTTB",colour:E},{label:"FW",colour:O},{label:"FW Upgrade",colour:D},{label:"Satellite",colour:B},{label:"Unknown",colour:H}]},t}();var _=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}();const A=function(t){function e(){var e=t.call(this)||this;return e.elControlDiv=document.createElement("div"),e.control.setPosition("bottomright"),e.elControlDiv.classList.add("info","legend"),e.elControlDiv.style.backgroundColor="#ffffff",e.elControlDiv.style.opacity="0.8",e.elControlDiv.style.padding="5px",e.elControlDiv.style.borderRadius="5px",e.control.onAdd=function(t){return e.elControlDiv},e}return _(e,t),e.prototype.getState=function(){},e.prototype.updateLegend=function(t){var e="";t.forEach((function(t){e+='<svg height="10" width="10"><circle cx="5" cy="5" r="5" fill="'+t.colour+'" stroke="#000000" stroke-width="1" opacity="1" fill-opacity="0.8" /></svg> '+t.label,t.count&&(e+=" ("+t.count+")"),e+="<br>"})),this.elControlDiv.innerHTML=e},e}(m);var N,j=new u("index.ts"),V=function(){try{return process.argv.includes("development")}catch(t){return!1}}();j.debug("isDevelopment",V),"serviceWorker"in navigator&&!V&&window.addEventListener("load",(function(){navigator.serviceWorker.register("./service-worker.js").then((function(t){j.info("SW registered: ",t)})).catch((function(t){j.warn("SW registration failed: ",t)}))})),N=function(){var t=new r,e=new k,n=new R,o=new y({mapContainerId:"map",api:t,datastore:e,defaultModeHandler:n}),i=new C;o.addControl("displaymode",i);var a=new A;a.updateLegend(n.getLegendItems()),o.addControl("legend",a),i.on("change",(function(t){"all"===t.state&&o.setModeHandler(n)}))},"complete"===document.readyState||"interactive"===document.readyState?setTimeout(N,1):document.addEventListener("DOMContentLoaded",N)},539:t=>{t.exports='data:image/svg+xml;charset=UTF-8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><path fill="black" d="M304 48a48 48 0 1 1-96 0 48 48 0 0 1 96 0zm-48 368a48 48 0 1 0 0 96 48 48 0 0 0 0-96zm208-208a48 48 0 1 0 0 96 48 48 0 0 0 0-96zM96 256a48 48 0 1 0-96 0 48 48 0 0 0 96 0zm13 99a48 48 0 1 0 0 96 48 48 0 0 0 0-96zm294 0a48 48 0 1 0 0 96 48 48 0 0 0 0-96zM109 61a48 48 0 1 0 0 96 48 48 0 0 0 0-96z"/></svg>'},141:t=>{t.exports='data:image/svg+xml;charset=UTF-8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><path fill="black" d="M445 4 29 195c-48 23-32 93 19 93h176v176c0 51 70 67 93 19L508 67c16-38-25-79-63-63z"/></svg>'},478:t=>{t.exports='data:image/svg+xml;charset=UTF-8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><path fill="rgb%28252, 132, 40%29" d="M445 4 29 195c-48 23-32 93 19 93h176v176c0 51 70 67 93 19L508 67c16-38-25-79-63-63z"/></svg>'},38:t=>{t.exports='data:image/svg+xml;charset=UTF-8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><path fill="rgb%2832, 116, 182%29" d="M445 4 29 195c-48 23-32 93 19 93h176v176c0 51 70 67 93 19L508 67c16-38-25-79-63-63z"/></svg>'}},n={};function r(t){var o=n[t];if(void 0!==o)return o.exports;var i=n[t]={id:t,exports:{}};return e[t].call(i.exports,i,i.exports,r),i.exports}r.m=e,t=[],r.O=(e,n,o,i)=>{if(!n){var a=1/0;for(u=0;u<t.length;u++){for(var[n,o,i]=t[u],s=!0,l=0;l<n.length;l++)(!1&i||a>=i)&&Object.keys(r.O).every((t=>r.O[t](n[l])))?n.splice(l--,1):(s=!1,i<a&&(a=i));if(s){t.splice(u--,1);var c=o();void 0!==c&&(e=c)}}return e}i=i||0;for(var u=t.length;u>0&&t[u-1][2]>i;u--)t[u]=t[u-1];t[u]=[n,o,i]},r.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return r.d(e,{a:e}),e},r.d=(t,e)=>{for(var n in e)r.o(e,n)&&!r.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:e[n]})},r.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),r.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),r.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},(()=>{var t;r.g.importScripts&&(t=r.g.location+"");var e=r.g.document;if(!t&&e&&(e.currentScript&&(t=e.currentScript.src),!t)){var n=e.getElementsByTagName("script");if(n.length)for(var o=n.length-1;o>-1&&!t;)t=n[o--].src}if(!t)throw new Error("Automatic publicPath is not supported in this browser");t=t.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),r.p=t})(),(()=>{r.b=document.baseURI||self.location.href;var t={143:0};r.O.j=e=>0===t[e];var e=(e,n)=>{var o,i,[a,s,l]=n,c=0;if(a.some((e=>0!==t[e]))){for(o in s)r.o(s,o)&&(r.m[o]=s[o]);if(l)var u=l(r)}for(e&&e(n);c<a.length;c++)i=a[c],r.o(t,i)&&t[i]&&t[i][0](),t[i]=0;return r.O(u)},n=self.webpackChunk=self.webpackChunk||[];n.forEach(e.bind(null,0)),n.push=e.bind(null,n.push.bind(n))})(),r.nc=void 0;var o=r.O(void 0,[155],(()=>r(281)));o=r.O(o)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,